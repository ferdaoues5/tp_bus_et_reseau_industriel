
TP_bus_et_reseau.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007200  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  080073d0  080073d0  000173d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078d0  080078d0  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080078d0  080078d0  000178d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078d8  080078d8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078d8  080078d8  000178d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078dc  080078dc  000178dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080078e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003f0  20000070  08007950  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000460  08007950  00020460  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001577c  00000000  00000000  000200e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003520  00000000  00000000  0003585f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f0  00000000  00000000  00038d80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ebf  00000000  00000000  0003a070  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024ee3  00000000  00000000  0003af2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019f99  00000000  00000000  0005fe12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d7c0c  00000000  00000000  00079dab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000570c  00000000  00000000  001519b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005a  00000000  00000000  001570c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000070 	.word	0x20000070
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080073b8 	.word	0x080073b8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000074 	.word	0x20000074
 800020c:	080073b8 	.word	0x080073b8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <bmp280_compensate_T_int32>:


BMP280_S32_t t_fine;

BMP280_S32_t bmp280_compensate_T_int32(BMP280_S32_t adc_T)
{
 80005ac:	b480      	push	{r7}
 80005ae:	b087      	sub	sp, #28
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	BMP280_S32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((BMP280_S32_t)dig_T1<<1))) * ((BMP280_S32_t)dig_T2)) >> 11;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	10da      	asrs	r2, r3, #3
 80005b8:	4b19      	ldr	r3, [pc, #100]	; (8000620 <bmp280_compensate_T_int32+0x74>)
 80005ba:	881b      	ldrh	r3, [r3, #0]
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	1ad3      	subs	r3, r2, r3
 80005c0:	4a18      	ldr	r2, [pc, #96]	; (8000624 <bmp280_compensate_T_int32+0x78>)
 80005c2:	f9b2 2000 	ldrsh.w	r2, [r2]
 80005c6:	fb02 f303 	mul.w	r3, r2, r3
 80005ca:	12db      	asrs	r3, r3, #11
 80005cc:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((BMP280_S32_t)dig_T1)) * ((adc_T>>4) - ((BMP280_S32_t)dig_T1))) >> 12) *
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	111b      	asrs	r3, r3, #4
 80005d2:	4a13      	ldr	r2, [pc, #76]	; (8000620 <bmp280_compensate_T_int32+0x74>)
 80005d4:	8812      	ldrh	r2, [r2, #0]
 80005d6:	1a9b      	subs	r3, r3, r2
 80005d8:	687a      	ldr	r2, [r7, #4]
 80005da:	1112      	asrs	r2, r2, #4
 80005dc:	4910      	ldr	r1, [pc, #64]	; (8000620 <bmp280_compensate_T_int32+0x74>)
 80005de:	8809      	ldrh	r1, [r1, #0]
 80005e0:	1a52      	subs	r2, r2, r1
 80005e2:	fb02 f303 	mul.w	r3, r2, r3
 80005e6:	131b      	asrs	r3, r3, #12
			((BMP280_S32_t)dig_T3)) >> 14;
 80005e8:	4a0f      	ldr	r2, [pc, #60]	; (8000628 <bmp280_compensate_T_int32+0x7c>)
 80005ea:	f9b2 2000 	ldrsh.w	r2, [r2]
	var2 = (((((adc_T>>4) - ((BMP280_S32_t)dig_T1)) * ((adc_T>>4) - ((BMP280_S32_t)dig_T1))) >> 12) *
 80005ee:	fb02 f303 	mul.w	r3, r2, r3
 80005f2:	139b      	asrs	r3, r3, #14
 80005f4:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80005f6:	697a      	ldr	r2, [r7, #20]
 80005f8:	693b      	ldr	r3, [r7, #16]
 80005fa:	4413      	add	r3, r2
 80005fc:	4a0b      	ldr	r2, [pc, #44]	; (800062c <bmp280_compensate_T_int32+0x80>)
 80005fe:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 8000600:	4b0a      	ldr	r3, [pc, #40]	; (800062c <bmp280_compensate_T_int32+0x80>)
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	4613      	mov	r3, r2
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4413      	add	r3, r2
 800060a:	3380      	adds	r3, #128	; 0x80
 800060c:	121b      	asrs	r3, r3, #8
 800060e:	60fb      	str	r3, [r7, #12]
	return T;
 8000610:	68fb      	ldr	r3, [r7, #12]
}
 8000612:	4618      	mov	r0, r3
 8000614:	371c      	adds	r7, #28
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	2000008c 	.word	0x2000008c
 8000624:	2000008e 	.word	0x2000008e
 8000628:	20000090 	.word	0x20000090
 800062c:	200000a4 	.word	0x200000a4

08000630 <bmp280_compensate_P_int32>:
BMP280_U32_t bmp280_compensate_P_int32(BMP280_S32_t adc_P)
{
 8000630:	b480      	push	{r7}
 8000632:	b087      	sub	sp, #28
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	BMP280_S32_t var1, var2;
	BMP280_U32_t p;
	var1 = (((BMP280_S32_t)t_fine)>>1) - (BMP280_S32_t)64000;
 8000638:	4b4a      	ldr	r3, [pc, #296]	; (8000764 <bmp280_compensate_P_int32+0x134>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	105b      	asrs	r3, r3, #1
 800063e:	f5a3 437a 	sub.w	r3, r3, #64000	; 0xfa00
 8000642:	613b      	str	r3, [r7, #16]
	var2 = (((var1>>2) * (var1>>2)) >> 11 ) * ((BMP280_S32_t)dig_P6);
 8000644:	693b      	ldr	r3, [r7, #16]
 8000646:	109b      	asrs	r3, r3, #2
 8000648:	693a      	ldr	r2, [r7, #16]
 800064a:	1092      	asrs	r2, r2, #2
 800064c:	fb02 f303 	mul.w	r3, r2, r3
 8000650:	12db      	asrs	r3, r3, #11
 8000652:	4a45      	ldr	r2, [pc, #276]	; (8000768 <bmp280_compensate_P_int32+0x138>)
 8000654:	f9b2 2000 	ldrsh.w	r2, [r2]
 8000658:	fb02 f303 	mul.w	r3, r2, r3
 800065c:	60fb      	str	r3, [r7, #12]
	var2 = var2 + ((var1*((BMP280_S32_t)dig_P5))<<1);
 800065e:	4b43      	ldr	r3, [pc, #268]	; (800076c <bmp280_compensate_P_int32+0x13c>)
 8000660:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000664:	461a      	mov	r2, r3
 8000666:	693b      	ldr	r3, [r7, #16]
 8000668:	fb02 f303 	mul.w	r3, r2, r3
 800066c:	005b      	lsls	r3, r3, #1
 800066e:	68fa      	ldr	r2, [r7, #12]
 8000670:	4413      	add	r3, r2
 8000672:	60fb      	str	r3, [r7, #12]
	var2 = (var2>>2)+(((BMP280_S32_t)dig_P4)<<16);
 8000674:	68fb      	ldr	r3, [r7, #12]
 8000676:	109a      	asrs	r2, r3, #2
 8000678:	4b3d      	ldr	r3, [pc, #244]	; (8000770 <bmp280_compensate_P_int32+0x140>)
 800067a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800067e:	041b      	lsls	r3, r3, #16
 8000680:	4413      	add	r3, r2
 8000682:	60fb      	str	r3, [r7, #12]
	var1 = (((dig_P3 * (((var1>>2) * (var1>>2)) >> 13 )) >> 3) + ((((BMP280_S32_t)dig_P2) * var1)>>1))>>18;
 8000684:	4b3b      	ldr	r3, [pc, #236]	; (8000774 <bmp280_compensate_P_int32+0x144>)
 8000686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800068a:	4619      	mov	r1, r3
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	109b      	asrs	r3, r3, #2
 8000690:	693a      	ldr	r2, [r7, #16]
 8000692:	1092      	asrs	r2, r2, #2
 8000694:	fb02 f303 	mul.w	r3, r2, r3
 8000698:	135b      	asrs	r3, r3, #13
 800069a:	fb01 f303 	mul.w	r3, r1, r3
 800069e:	10da      	asrs	r2, r3, #3
 80006a0:	4b35      	ldr	r3, [pc, #212]	; (8000778 <bmp280_compensate_P_int32+0x148>)
 80006a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006a6:	4619      	mov	r1, r3
 80006a8:	693b      	ldr	r3, [r7, #16]
 80006aa:	fb01 f303 	mul.w	r3, r1, r3
 80006ae:	105b      	asrs	r3, r3, #1
 80006b0:	4413      	add	r3, r2
 80006b2:	149b      	asrs	r3, r3, #18
 80006b4:	613b      	str	r3, [r7, #16]
	var1 =((((32768+var1))*((BMP280_S32_t)dig_P1))>>15);
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80006bc:	4a2f      	ldr	r2, [pc, #188]	; (800077c <bmp280_compensate_P_int32+0x14c>)
 80006be:	8812      	ldrh	r2, [r2, #0]
 80006c0:	fb02 f303 	mul.w	r3, r2, r3
 80006c4:	13db      	asrs	r3, r3, #15
 80006c6:	613b      	str	r3, [r7, #16]
	if (var1 == 0)
 80006c8:	693b      	ldr	r3, [r7, #16]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d101      	bne.n	80006d2 <bmp280_compensate_P_int32+0xa2>
	{
		return 0; // avoid exception caused by division by zero
 80006ce:	2300      	movs	r3, #0
 80006d0:	e041      	b.n	8000756 <bmp280_compensate_P_int32+0x126>
	}
	p = (((BMP280_U32_t)(((BMP280_S32_t)1048576)-adc_P)-(var2>>12)))*3125;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	131b      	asrs	r3, r3, #12
 80006d6:	461a      	mov	r2, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4413      	add	r3, r2
 80006dc:	4a28      	ldr	r2, [pc, #160]	; (8000780 <bmp280_compensate_P_int32+0x150>)
 80006de:	fb02 f303 	mul.w	r3, r2, r3
 80006e2:	f103 4343 	add.w	r3, r3, #3271557120	; 0xc3000000
 80006e6:	f503 03a0 	add.w	r3, r3, #5242880	; 0x500000
 80006ea:	617b      	str	r3, [r7, #20]
	if (p < 0x80000000)
 80006ec:	697b      	ldr	r3, [r7, #20]
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	db06      	blt.n	8000700 <bmp280_compensate_P_int32+0xd0>
	{
		p = (p << 1) / ((BMP280_U32_t)var1);
 80006f2:	697b      	ldr	r3, [r7, #20]
 80006f4:	005a      	lsls	r2, r3, #1
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80006fc:	617b      	str	r3, [r7, #20]
 80006fe:	e005      	b.n	800070c <bmp280_compensate_P_int32+0xdc>
	}
	else
	{
		p = (p / (BMP280_U32_t)var1) * 2;
 8000700:	693b      	ldr	r3, [r7, #16]
 8000702:	697a      	ldr	r2, [r7, #20]
 8000704:	fbb2 f3f3 	udiv	r3, r2, r3
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	617b      	str	r3, [r7, #20]
	}
	var1 = (((BMP280_S32_t)dig_P9) * ((BMP280_S32_t)(((p>>3) * (p>>3))>>13)))>>12;
 800070c:	4b1d      	ldr	r3, [pc, #116]	; (8000784 <bmp280_compensate_P_int32+0x154>)
 800070e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000712:	4619      	mov	r1, r3
 8000714:	697b      	ldr	r3, [r7, #20]
 8000716:	08db      	lsrs	r3, r3, #3
 8000718:	697a      	ldr	r2, [r7, #20]
 800071a:	08d2      	lsrs	r2, r2, #3
 800071c:	fb02 f303 	mul.w	r3, r2, r3
 8000720:	0b5b      	lsrs	r3, r3, #13
 8000722:	fb01 f303 	mul.w	r3, r1, r3
 8000726:	131b      	asrs	r3, r3, #12
 8000728:	613b      	str	r3, [r7, #16]
	var2 = (((BMP280_S32_t)(p>>2)) * ((BMP280_S32_t)dig_P8))>>13;
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	089b      	lsrs	r3, r3, #2
 800072e:	461a      	mov	r2, r3
 8000730:	4b15      	ldr	r3, [pc, #84]	; (8000788 <bmp280_compensate_P_int32+0x158>)
 8000732:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000736:	fb02 f303 	mul.w	r3, r2, r3
 800073a:	135b      	asrs	r3, r3, #13
 800073c:	60fb      	str	r3, [r7, #12]
	p = (BMP280_U32_t)((BMP280_S32_t)p + ((var1 + var2 + dig_P7) >> 4));
 800073e:	693a      	ldr	r2, [r7, #16]
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	4413      	add	r3, r2
 8000744:	4a11      	ldr	r2, [pc, #68]	; (800078c <bmp280_compensate_P_int32+0x15c>)
 8000746:	f9b2 2000 	ldrsh.w	r2, [r2]
 800074a:	4413      	add	r3, r2
 800074c:	111a      	asrs	r2, r3, #4
 800074e:	697b      	ldr	r3, [r7, #20]
 8000750:	4413      	add	r3, r2
 8000752:	617b      	str	r3, [r7, #20]
	return p;
 8000754:	697b      	ldr	r3, [r7, #20]
}
 8000756:	4618      	mov	r0, r3
 8000758:	371c      	adds	r7, #28
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	200000a4 	.word	0x200000a4
 8000768:	2000009c 	.word	0x2000009c
 800076c:	2000009a 	.word	0x2000009a
 8000770:	20000098 	.word	0x20000098
 8000774:	20000096 	.word	0x20000096
 8000778:	20000094 	.word	0x20000094
 800077c:	20000092 	.word	0x20000092
 8000780:	fffff3cb 	.word	0xfffff3cb
 8000784:	200000a2 	.word	0x200000a2
 8000788:	200000a0 	.word	0x200000a0
 800078c:	2000009e 	.word	0x2000009e

08000790 <BMP280_check>:

int BMP280_check() {
 8000790:	b580      	push	{r7, lr}
 8000792:	b084      	sub	sp, #16
 8000794:	af02      	add	r7, sp, #8
	uint8_t buf[1];
	HAL_StatusTypeDef ret;
	buf[0] = BMP280_ID_REG;
 8000796:	23d0      	movs	r3, #208	; 0xd0
 8000798:	713b      	strb	r3, [r7, #4]

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 800079a:	23ee      	movs	r3, #238	; 0xee
 800079c:	b299      	uxth	r1, r3
 800079e:	1d3a      	adds	r2, r7, #4
 80007a0:	f04f 33ff 	mov.w	r3, #4294967295
 80007a4:	9300      	str	r3, [sp, #0]
 80007a6:	2301      	movs	r3, #1
 80007a8:	4819      	ldr	r0, [pc, #100]	; (8000810 <BMP280_check+0x80>)
 80007aa:	f002 fbf7 	bl	8002f9c <HAL_I2C_Master_Transmit>
 80007ae:	4603      	mov	r3, r0
 80007b0:	71fb      	strb	r3, [r7, #7]
	if (ret != 0) {
 80007b2:	79fb      	ldrb	r3, [r7, #7]
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d002      	beq.n	80007be <BMP280_check+0x2e>
		printf("Problem with check (I2C Transmit)\r\n");
 80007b8:	4816      	ldr	r0, [pc, #88]	; (8000814 <BMP280_check+0x84>)
 80007ba:	f006 f82f 	bl	800681c <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, BMP280_ID_LEN,
 80007be:	23ee      	movs	r3, #238	; 0xee
 80007c0:	b299      	uxth	r1, r3
 80007c2:	2301      	movs	r3, #1
 80007c4:	b29b      	uxth	r3, r3
 80007c6:	1d3a      	adds	r2, r7, #4
 80007c8:	f04f 30ff 	mov.w	r0, #4294967295
 80007cc:	9000      	str	r0, [sp, #0]
 80007ce:	4810      	ldr	r0, [pc, #64]	; (8000810 <BMP280_check+0x80>)
 80007d0:	f002 fce2 	bl	8003198 <HAL_I2C_Master_Receive>
 80007d4:	4603      	mov	r3, r0
 80007d6:	71fb      	strb	r3, [r7, #7]
			HAL_MAX_DELAY);
	if (ret != 0) {
 80007d8:	79fb      	ldrb	r3, [r7, #7]
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d002      	beq.n	80007e4 <BMP280_check+0x54>
		printf("Problem with check (I2C Receive) \r\n");
 80007de:	480e      	ldr	r0, [pc, #56]	; (8000818 <BMP280_check+0x88>)
 80007e0:	f006 f81c 	bl	800681c <puts>
	}

	printf("Id: 0x%x...", buf[0]);
 80007e4:	793b      	ldrb	r3, [r7, #4]
 80007e6:	4619      	mov	r1, r3
 80007e8:	480c      	ldr	r0, [pc, #48]	; (800081c <BMP280_check+0x8c>)
 80007ea:	f005 ffb1 	bl	8006750 <iprintf>
	if (buf[0] == BMP280_ID_VAL) {
 80007ee:	793b      	ldrb	r3, [r7, #4]
 80007f0:	2258      	movs	r2, #88	; 0x58
 80007f2:	4293      	cmp	r3, r2
 80007f4:	d104      	bne.n	8000800 <BMP280_check+0x70>
		printf("Ok\r\n");
 80007f6:	480a      	ldr	r0, [pc, #40]	; (8000820 <BMP280_check+0x90>)
 80007f8:	f006 f810 	bl	800681c <puts>
		return 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	e003      	b.n	8000808 <BMP280_check+0x78>
	} else {
		printf("not Ok!\r\n");
 8000800:	4808      	ldr	r0, [pc, #32]	; (8000824 <BMP280_check+0x94>)
 8000802:	f006 f80b 	bl	800681c <puts>
		return 1;
 8000806:	2301      	movs	r3, #1
	}
}
 8000808:	4618      	mov	r0, r3
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	200000d0 	.word	0x200000d0
 8000814:	080073d0 	.word	0x080073d0
 8000818:	080073f4 	.word	0x080073f4
 800081c:	08007418 	.word	0x08007418
 8000820:	08007424 	.word	0x08007424
 8000824:	08007428 	.word	0x08007428

08000828 <BMP280_init>:

int BMP280_init() {
 8000828:	b580      	push	{r7, lr}
 800082a:	b082      	sub	sp, #8
 800082c:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef ret;
	uint8_t ctrl = (0b010 << 5) | (0b101 << 2) | (0b11);
 800082e:	2357      	movs	r3, #87	; 0x57
 8000830:	71fb      	strb	r3, [r7, #7]
	/* 				osr_t x2       osr_p x16       normal mode   */

	printf("Configure...\r\n");
 8000832:	480d      	ldr	r0, [pc, #52]	; (8000868 <BMP280_init+0x40>)
 8000834:	f005 fff2 	bl	800681c <puts>
	ret = BMP280_Write_Reg(BMP280_CTRL_MEAS_REG, ctrl);
 8000838:	22f4      	movs	r2, #244	; 0xf4
 800083a:	79fb      	ldrb	r3, [r7, #7]
 800083c:	4619      	mov	r1, r3
 800083e:	4610      	mov	r0, r2
 8000840:	f000 f8d2 	bl	80009e8 <BMP280_Write_Reg>
 8000844:	4603      	mov	r3, r0
 8000846:	71bb      	strb	r3, [r7, #6]
	if (ret == 0) {
 8000848:	79bb      	ldrb	r3, [r7, #6]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d104      	bne.n	8000858 <BMP280_init+0x30>
		printf("Config Ok\r\n");
 800084e:	4807      	ldr	r0, [pc, #28]	; (800086c <BMP280_init+0x44>)
 8000850:	f005 ffe4 	bl	800681c <puts>
	} else {
		printf("Config not Ok!\r\n");
		return 1;
	}

	return 0;
 8000854:	2300      	movs	r3, #0
 8000856:	e003      	b.n	8000860 <BMP280_init+0x38>
		printf("Config not Ok!\r\n");
 8000858:	4805      	ldr	r0, [pc, #20]	; (8000870 <BMP280_init+0x48>)
 800085a:	f005 ffdf 	bl	800681c <puts>
		return 1;
 800085e:	2301      	movs	r3, #1
}
 8000860:	4618      	mov	r0, r3
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	08007434 	.word	0x08007434
 800086c:	08007444 	.word	0x08007444
 8000870:	08007450 	.word	0x08007450

08000874 <BMP280_get_trimming>:
void BMP280_get_trimming(uint8_t calibration_data[Calibration_size])
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af02      	add	r7, sp, #8
 800087a:	6078      	str	r0, [r7, #4]
	uint16_t DevAddress=BMP280_ADDR;
 800087c:	23ee      	movs	r3, #238	; 0xee
 800087e:	827b      	strh	r3, [r7, #18]
	uint8_t TX_Data=BMP280_TRIM_REG_MSB;
 8000880:	2388      	movs	r3, #136	; 0x88
 8000882:	72fb      	strb	r3, [r7, #11]
	uint8_t* p = calibration_data;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	60fb      	str	r3, [r7, #12]
	int i=0;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
	if (HAL_I2C_Master_Transmit(&hi2c1, DevAddress, &TX_Data, 1, HAL_MAX_DELAY)==HAL_OK)
 800088c:	f107 020b 	add.w	r2, r7, #11
 8000890:	8a79      	ldrh	r1, [r7, #18]
 8000892:	f04f 33ff 	mov.w	r3, #4294967295
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	2301      	movs	r3, #1
 800089a:	4844      	ldr	r0, [pc, #272]	; (80009ac <BMP280_get_trimming+0x138>)
 800089c:	f002 fb7e 	bl	8002f9c <HAL_I2C_Master_Transmit>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d17d      	bne.n	80009a2 <BMP280_get_trimming+0x12e>
	{
		if(HAL_I2C_Master_Receive(&hi2c1, DevAddress, calibration_data, Calibration_size, HAL_MAX_DELAY)==HAL_OK)
 80008a6:	8a79      	ldrh	r1, [r7, #18]
 80008a8:	f04f 33ff 	mov.w	r3, #4294967295
 80008ac:	9300      	str	r3, [sp, #0]
 80008ae:	231a      	movs	r3, #26
 80008b0:	687a      	ldr	r2, [r7, #4]
 80008b2:	483e      	ldr	r0, [pc, #248]	; (80009ac <BMP280_get_trimming+0x138>)
 80008b4:	f002 fc70 	bl	8003198 <HAL_I2C_Master_Receive>
 80008b8:	4603      	mov	r3, r0
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d171      	bne.n	80009a2 <BMP280_get_trimming+0x12e>
		{
			printf("Calibration data received\r\n");
 80008be:	483c      	ldr	r0, [pc, #240]	; (80009b0 <BMP280_get_trimming+0x13c>)
 80008c0:	f005 ffac 	bl	800681c <puts>
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	881b      	ldrh	r3, [r3, #0]
 80008c8:	b29a      	uxth	r2, r3

			memcpy(&dig_T1, p, 2);
 80008ca:	4b3a      	ldr	r3, [pc, #232]	; (80009b4 <BMP280_get_trimming+0x140>)
 80008cc:	801a      	strh	r2, [r3, #0]
			p += 2;
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	3302      	adds	r3, #2
 80008d2:	60fb      	str	r3, [r7, #12]
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	881b      	ldrh	r3, [r3, #0]
 80008d8:	b29a      	uxth	r2, r3
			memcpy(&dig_T2, p, 2);
 80008da:	4b37      	ldr	r3, [pc, #220]	; (80009b8 <BMP280_get_trimming+0x144>)
 80008dc:	801a      	strh	r2, [r3, #0]
			p += 2;
 80008de:	68fb      	ldr	r3, [r7, #12]
 80008e0:	3302      	adds	r3, #2
 80008e2:	60fb      	str	r3, [r7, #12]
 80008e4:	68fb      	ldr	r3, [r7, #12]
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	b29a      	uxth	r2, r3
			memcpy(&dig_T3, p, 2);
 80008ea:	4b34      	ldr	r3, [pc, #208]	; (80009bc <BMP280_get_trimming+0x148>)
 80008ec:	801a      	strh	r2, [r3, #0]
			p += 2;
 80008ee:	68fb      	ldr	r3, [r7, #12]
 80008f0:	3302      	adds	r3, #2
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	881b      	ldrh	r3, [r3, #0]
 80008f8:	b29a      	uxth	r2, r3
			memcpy(&dig_P1, p, 2);
 80008fa:	4b31      	ldr	r3, [pc, #196]	; (80009c0 <BMP280_get_trimming+0x14c>)
 80008fc:	801a      	strh	r2, [r3, #0]
			p += 2;
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	3302      	adds	r3, #2
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	881b      	ldrh	r3, [r3, #0]
 8000908:	b29a      	uxth	r2, r3
			memcpy(&dig_P2, p, 2);
 800090a:	4b2e      	ldr	r3, [pc, #184]	; (80009c4 <BMP280_get_trimming+0x150>)
 800090c:	801a      	strh	r2, [r3, #0]
			p += 2;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	3302      	adds	r3, #2
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	881b      	ldrh	r3, [r3, #0]
 8000918:	b29a      	uxth	r2, r3
			memcpy(&dig_P3, p, 2);
 800091a:	4b2b      	ldr	r3, [pc, #172]	; (80009c8 <BMP280_get_trimming+0x154>)
 800091c:	801a      	strh	r2, [r3, #0]
			p += 2;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	3302      	adds	r3, #2
 8000922:	60fb      	str	r3, [r7, #12]
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	881b      	ldrh	r3, [r3, #0]
 8000928:	b29a      	uxth	r2, r3
			memcpy(&dig_P4, p, 2);
 800092a:	4b28      	ldr	r3, [pc, #160]	; (80009cc <BMP280_get_trimming+0x158>)
 800092c:	801a      	strh	r2, [r3, #0]
			p += 2;
 800092e:	68fb      	ldr	r3, [r7, #12]
 8000930:	3302      	adds	r3, #2
 8000932:	60fb      	str	r3, [r7, #12]
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	881b      	ldrh	r3, [r3, #0]
 8000938:	b29a      	uxth	r2, r3
			memcpy(&dig_P5, p, 2);
 800093a:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <BMP280_get_trimming+0x15c>)
 800093c:	801a      	strh	r2, [r3, #0]
			p += 2;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	3302      	adds	r3, #2
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	881b      	ldrh	r3, [r3, #0]
 8000948:	b29a      	uxth	r2, r3
			memcpy(&dig_P6, p, 2);
 800094a:	4b22      	ldr	r3, [pc, #136]	; (80009d4 <BMP280_get_trimming+0x160>)
 800094c:	801a      	strh	r2, [r3, #0]
			p += 2;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	3302      	adds	r3, #2
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	881b      	ldrh	r3, [r3, #0]
 8000958:	b29a      	uxth	r2, r3
			memcpy(&dig_P7, p, 2);
 800095a:	4b1f      	ldr	r3, [pc, #124]	; (80009d8 <BMP280_get_trimming+0x164>)
 800095c:	801a      	strh	r2, [r3, #0]
			p += 2;
 800095e:	68fb      	ldr	r3, [r7, #12]
 8000960:	3302      	adds	r3, #2
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
 8000966:	881b      	ldrh	r3, [r3, #0]
 8000968:	b29a      	uxth	r2, r3
			memcpy(&dig_P8, p, 2);
 800096a:	4b1c      	ldr	r3, [pc, #112]	; (80009dc <BMP280_get_trimming+0x168>)
 800096c:	801a      	strh	r2, [r3, #0]
			p += 2;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	3302      	adds	r3, #2
 8000972:	60fb      	str	r3, [r7, #12]
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	b29a      	uxth	r2, r3
			memcpy(&dig_P9, p, 2);
 800097a:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <BMP280_get_trimming+0x16c>)
 800097c:	801a      	strh	r2, [r3, #0]



			for (i=0;i<Calibration_size;i++)
 800097e:	2300      	movs	r3, #0
 8000980:	617b      	str	r3, [r7, #20]
 8000982:	e00b      	b.n	800099c <BMP280_get_trimming+0x128>
			{
				printf("calib %d = 0x%x\n\r",i,calibration_data[i]);
 8000984:	697b      	ldr	r3, [r7, #20]
 8000986:	687a      	ldr	r2, [r7, #4]
 8000988:	4413      	add	r3, r2
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	461a      	mov	r2, r3
 800098e:	6979      	ldr	r1, [r7, #20]
 8000990:	4814      	ldr	r0, [pc, #80]	; (80009e4 <BMP280_get_trimming+0x170>)
 8000992:	f005 fedd 	bl	8006750 <iprintf>
			for (i=0;i<Calibration_size;i++)
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	3301      	adds	r3, #1
 800099a:	617b      	str	r3, [r7, #20]
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	2b19      	cmp	r3, #25
 80009a0:	ddf0      	ble.n	8000984 <BMP280_get_trimming+0x110>
			}


		}
	}
}
 80009a2:	bf00      	nop
 80009a4:	3718      	adds	r7, #24
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bd80      	pop	{r7, pc}
 80009aa:	bf00      	nop
 80009ac:	200000d0 	.word	0x200000d0
 80009b0:	08007460 	.word	0x08007460
 80009b4:	2000008c 	.word	0x2000008c
 80009b8:	2000008e 	.word	0x2000008e
 80009bc:	20000090 	.word	0x20000090
 80009c0:	20000092 	.word	0x20000092
 80009c4:	20000094 	.word	0x20000094
 80009c8:	20000096 	.word	0x20000096
 80009cc:	20000098 	.word	0x20000098
 80009d0:	2000009a 	.word	0x2000009a
 80009d4:	2000009c 	.word	0x2000009c
 80009d8:	2000009e 	.word	0x2000009e
 80009dc:	200000a0 	.word	0x200000a0
 80009e0:	200000a2 	.word	0x200000a2
 80009e4:	0800747c 	.word	0x0800747c

080009e8 <BMP280_Write_Reg>:
int BMP280_Write_Reg(uint8_t reg, uint8_t value) {
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af02      	add	r7, sp, #8
 80009ee:	4603      	mov	r3, r0
 80009f0:	460a      	mov	r2, r1
 80009f2:	71fb      	strb	r3, [r7, #7]
 80009f4:	4613      	mov	r3, r2
 80009f6:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[3];
	HAL_StatusTypeDef ret;

	buf[0] = reg;
 80009f8:	79fb      	ldrb	r3, [r7, #7]
 80009fa:	733b      	strb	r3, [r7, #12]
	buf[1] = value;
 80009fc:	79bb      	ldrb	r3, [r7, #6]
 80009fe:	737b      	strb	r3, [r7, #13]
	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, buf, 2, HAL_MAX_DELAY);
 8000a00:	23ee      	movs	r3, #238	; 0xee
 8000a02:	b299      	uxth	r1, r3
 8000a04:	f107 020c 	add.w	r2, r7, #12
 8000a08:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0c:	9300      	str	r3, [sp, #0]
 8000a0e:	2302      	movs	r3, #2
 8000a10:	4814      	ldr	r0, [pc, #80]	; (8000a64 <BMP280_Write_Reg+0x7c>)
 8000a12:	f002 fac3 	bl	8002f9c <HAL_I2C_Master_Transmit>
 8000a16:	4603      	mov	r3, r0
 8000a18:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8000a1a:	7bfb      	ldrb	r3, [r7, #15]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d002      	beq.n	8000a26 <BMP280_Write_Reg+0x3e>
		printf("Problem with I2C Transmit\r\n");
 8000a20:	4811      	ldr	r0, [pc, #68]	; (8000a68 <BMP280_Write_Reg+0x80>)
 8000a22:	f005 fefb 	bl	800681c <puts>
	}

	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, 1, HAL_MAX_DELAY);
 8000a26:	23ee      	movs	r3, #238	; 0xee
 8000a28:	b299      	uxth	r1, r3
 8000a2a:	f107 020c 	add.w	r2, r7, #12
 8000a2e:	f04f 33ff 	mov.w	r3, #4294967295
 8000a32:	9300      	str	r3, [sp, #0]
 8000a34:	2301      	movs	r3, #1
 8000a36:	480b      	ldr	r0, [pc, #44]	; (8000a64 <BMP280_Write_Reg+0x7c>)
 8000a38:	f002 fbae 	bl	8003198 <HAL_I2C_Master_Receive>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8000a40:	7bfb      	ldrb	r3, [r7, #15]
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d002      	beq.n	8000a4c <BMP280_Write_Reg+0x64>
		printf("Problem with I2C Receive\r\n");
 8000a46:	4809      	ldr	r0, [pc, #36]	; (8000a6c <BMP280_Write_Reg+0x84>)
 8000a48:	f005 fee8 	bl	800681c <puts>
	}

	if (buf[0] == value) {
 8000a4c:	7b3b      	ldrb	r3, [r7, #12]
 8000a4e:	79ba      	ldrb	r2, [r7, #6]
 8000a50:	429a      	cmp	r2, r3
 8000a52:	d101      	bne.n	8000a58 <BMP280_Write_Reg+0x70>
		return 0;
 8000a54:	2300      	movs	r3, #0
 8000a56:	e000      	b.n	8000a5a <BMP280_Write_Reg+0x72>
	} else {
		return 1;
 8000a58:	2301      	movs	r3, #1
	}
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200000d0 	.word	0x200000d0
 8000a68:	08007490 	.word	0x08007490
 8000a6c:	080074ac 	.word	0x080074ac

08000a70 <BMP280_Read_Reg>:

uint8_t* BMP280_Read_Reg(uint8_t reg, uint8_t length) {
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af02      	add	r7, sp, #8
 8000a76:	4603      	mov	r3, r0
 8000a78:	460a      	mov	r2, r1
 8000a7a:	71fb      	strb	r3, [r7, #7]
 8000a7c:	4613      	mov	r3, r2
 8000a7e:	71bb      	strb	r3, [r7, #6]
	uint8_t *buf;
	HAL_StatusTypeDef ret;

	ret = HAL_I2C_Master_Transmit(&hi2c1, BMP280_ADDR, &reg, 1, HAL_MAX_DELAY);
 8000a80:	23ee      	movs	r3, #238	; 0xee
 8000a82:	b299      	uxth	r1, r3
 8000a84:	1dfa      	adds	r2, r7, #7
 8000a86:	f04f 33ff 	mov.w	r3, #4294967295
 8000a8a:	9300      	str	r3, [sp, #0]
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	4814      	ldr	r0, [pc, #80]	; (8000ae0 <BMP280_Read_Reg+0x70>)
 8000a90:	f002 fa84 	bl	8002f9c <HAL_I2C_Master_Transmit>
 8000a94:	4603      	mov	r3, r0
 8000a96:	73fb      	strb	r3, [r7, #15]
	if (ret != 0) {
 8000a98:	7bfb      	ldrb	r3, [r7, #15]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d002      	beq.n	8000aa4 <BMP280_Read_Reg+0x34>
		printf("Problem with I2C Transmit\r\n");
 8000a9e:	4811      	ldr	r0, [pc, #68]	; (8000ae4 <BMP280_Read_Reg+0x74>)
 8000aa0:	f005 febc 	bl	800681c <puts>
	}

	buf = (uint8_t*) malloc(length);
 8000aa4:	79bb      	ldrb	r3, [r7, #6]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f005 fc5a 	bl	8006360 <malloc>
 8000aac:	4603      	mov	r3, r0
 8000aae:	60bb      	str	r3, [r7, #8]
	ret = HAL_I2C_Master_Receive(&hi2c1, BMP280_ADDR, buf, length,
 8000ab0:	23ee      	movs	r3, #238	; 0xee
 8000ab2:	b299      	uxth	r1, r3
 8000ab4:	79bb      	ldrb	r3, [r7, #6]
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8000abc:	9200      	str	r2, [sp, #0]
 8000abe:	68ba      	ldr	r2, [r7, #8]
 8000ac0:	4807      	ldr	r0, [pc, #28]	; (8000ae0 <BMP280_Read_Reg+0x70>)
 8000ac2:	f002 fb69 	bl	8003198 <HAL_I2C_Master_Receive>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	73fb      	strb	r3, [r7, #15]
			HAL_MAX_DELAY);
	if (ret != 0) {
 8000aca:	7bfb      	ldrb	r3, [r7, #15]
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d002      	beq.n	8000ad6 <BMP280_Read_Reg+0x66>
		printf("Problem with I2C Receive\r\n");
 8000ad0:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <BMP280_Read_Reg+0x78>)
 8000ad2:	f005 fea3 	bl	800681c <puts>
	}

	return buf;
 8000ad6:	68bb      	ldr	r3, [r7, #8]
}
 8000ad8:	4618      	mov	r0, r3
 8000ada:	3710      	adds	r7, #16
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	200000d0 	.word	0x200000d0
 8000ae4:	08007490 	.word	0x08007490
 8000ae8:	080074ac 	.word	0x080074ac

08000aec <BMP280_get_temperature>:

BMP280_S32_t BMP280_get_temperature() {
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_T;
	BMP280_S32_t adc_T_compensate;

	buf = BMP280_Read_Reg(BMP280_TEMP_REG_MSB, BMP280_TEMP_LEN);
 8000af2:	23fa      	movs	r3, #250	; 0xfa
 8000af4:	2203      	movs	r2, #3
 8000af6:	4611      	mov	r1, r2
 8000af8:	4618      	mov	r0, r3
 8000afa:	f7ff ffb9 	bl	8000a70 <BMP280_Read_Reg>
 8000afe:	60f8      	str	r0, [r7, #12]

	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	031a      	lsls	r2, r3, #12
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	3301      	adds	r3, #1
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	011b      	lsls	r3, r3, #4
 8000b0e:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 8000b10:	68fa      	ldr	r2, [r7, #12]
 8000b12:	3202      	adds	r2, #2
 8000b14:	7812      	ldrb	r2, [r2, #0]
 8000b16:	0912      	lsrs	r2, r2, #4
 8000b18:	b2d2      	uxtb	r2, r2
	adc_T = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000b1a:	4313      	orrs	r3, r2
 8000b1c:	60bb      	str	r3, [r7, #8]
	adc_T_compensate =bmp280_compensate_T_int32(adc_T);
 8000b1e:	68b8      	ldr	r0, [r7, #8]
 8000b20:	f7ff fd44 	bl	80005ac <bmp280_compensate_T_int32>
 8000b24:	6078      	str	r0, [r7, #4]

	free(buf);
 8000b26:	68f8      	ldr	r0, [r7, #12]
 8000b28:	f005 fc22 	bl	8006370 <free>

	printf("Temperature: ");
 8000b2c:	4807      	ldr	r0, [pc, #28]	; (8000b4c <BMP280_get_temperature+0x60>)
 8000b2e:	f005 fe0f 	bl	8006750 <iprintf>
	printf("0X%05lX", adc_T_compensate);
 8000b32:	6879      	ldr	r1, [r7, #4]
 8000b34:	4806      	ldr	r0, [pc, #24]	; (8000b50 <BMP280_get_temperature+0x64>)
 8000b36:	f005 fe0b 	bl	8006750 <iprintf>
	printf("\r\n");
 8000b3a:	4806      	ldr	r0, [pc, #24]	; (8000b54 <BMP280_get_temperature+0x68>)
 8000b3c:	f005 fe6e 	bl	800681c <puts>

	return adc_T;
 8000b40:	68bb      	ldr	r3, [r7, #8]
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	3710      	adds	r7, #16
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	080074c8 	.word	0x080074c8
 8000b50:	080074d8 	.word	0x080074d8
 8000b54:	080074e0 	.word	0x080074e0

08000b58 <BMP280_get_pressure>:

int BMP280_get_pressure() {
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b084      	sub	sp, #16
 8000b5c:	af00      	add	r7, sp, #0
	uint8_t *buf;
	BMP280_S32_t adc_P;
	BMP280_S32_t adc_P_compensate;
	buf = BMP280_Read_Reg(BMP280_PRES_REG_MSB, BMP280_PRES_LEN);
 8000b5e:	23f7      	movs	r3, #247	; 0xf7
 8000b60:	2203      	movs	r2, #3
 8000b62:	4611      	mov	r1, r2
 8000b64:	4618      	mov	r0, r3
 8000b66:	f7ff ff83 	bl	8000a70 <BMP280_Read_Reg>
 8000b6a:	60f8      	str	r0, [r7, #12]

	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000b6c:	68fb      	ldr	r3, [r7, #12]
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	031a      	lsls	r2, r3, #12
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	3301      	adds	r3, #1
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	011b      	lsls	r3, r3, #4
 8000b7a:	4313      	orrs	r3, r2
			| ((BMP280_S32_t) (buf[2]) >> 4);
 8000b7c:	68fa      	ldr	r2, [r7, #12]
 8000b7e:	3202      	adds	r2, #2
 8000b80:	7812      	ldrb	r2, [r2, #0]
 8000b82:	0912      	lsrs	r2, r2, #4
 8000b84:	b2d2      	uxtb	r2, r2
	adc_P = ((BMP280_S32_t) (buf[0]) << 12) | ((BMP280_S32_t) (buf[1]) << 4)
 8000b86:	4313      	orrs	r3, r2
 8000b88:	60bb      	str	r3, [r7, #8]
	adc_P_compensate=bmp280_compensate_P_int32(adc_P);
 8000b8a:	68b8      	ldr	r0, [r7, #8]
 8000b8c:	f7ff fd50 	bl	8000630 <bmp280_compensate_P_int32>
 8000b90:	4603      	mov	r3, r0
 8000b92:	607b      	str	r3, [r7, #4]
	free(buf);
 8000b94:	68f8      	ldr	r0, [r7, #12]
 8000b96:	f005 fbeb 	bl	8006370 <free>

	printf("Pressure:    0x");
 8000b9a:	4807      	ldr	r0, [pc, #28]	; (8000bb8 <BMP280_get_pressure+0x60>)
 8000b9c:	f005 fdd8 	bl	8006750 <iprintf>
	printf("%05lX", adc_P_compensate);
 8000ba0:	6879      	ldr	r1, [r7, #4]
 8000ba2:	4806      	ldr	r0, [pc, #24]	; (8000bbc <BMP280_get_pressure+0x64>)
 8000ba4:	f005 fdd4 	bl	8006750 <iprintf>
	printf("\r\n");
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <BMP280_get_pressure+0x68>)
 8000baa:	f005 fe37 	bl	800681c <puts>

	return 0;
 8000bae:	2300      	movs	r3, #0
}
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	3710      	adds	r7, #16
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	080074e4 	.word	0x080074e4
 8000bbc:	080074f4 	.word	0x080074f4
 8000bc0:	080074e0 	.word	0x080074e0

08000bc4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000bc8:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <MX_CAN1_Init+0x64>)
 8000bca:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <MX_CAN1_Init+0x68>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 21;
 8000bce:	4b16      	ldr	r3, [pc, #88]	; (8000c28 <MX_CAN1_Init+0x64>)
 8000bd0:	2215      	movs	r2, #21
 8000bd2:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000bd4:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <MX_CAN1_Init+0x64>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000bda:	4b13      	ldr	r3, [pc, #76]	; (8000c28 <MX_CAN1_Init+0x64>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000be0:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <MX_CAN1_Init+0x64>)
 8000be2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000be6:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8000be8:	4b0f      	ldr	r3, [pc, #60]	; (8000c28 <MX_CAN1_Init+0x64>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_CAN1_Init+0x64>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000bf4:	4b0c      	ldr	r3, [pc, #48]	; (8000c28 <MX_CAN1_Init+0x64>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <MX_CAN1_Init+0x64>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000c00:	4b09      	ldr	r3, [pc, #36]	; (8000c28 <MX_CAN1_Init+0x64>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <MX_CAN1_Init+0x64>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_CAN1_Init+0x64>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000c12:	4805      	ldr	r0, [pc, #20]	; (8000c28 <MX_CAN1_Init+0x64>)
 8000c14:	f000 ffa2 	bl	8001b5c <HAL_CAN_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8000c1e:	f000 fad3 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000c22:	bf00      	nop
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	200000a8 	.word	0x200000a8
 8000c2c:	40006400 	.word	0x40006400

08000c30 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b08a      	sub	sp, #40	; 0x28
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c38:	f107 0314 	add.w	r3, r7, #20
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]
 8000c46:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a19      	ldr	r2, [pc, #100]	; (8000cb4 <HAL_CAN_MspInit+0x84>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d12c      	bne.n	8000cac <HAL_CAN_MspInit+0x7c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
 8000c56:	4b18      	ldr	r3, [pc, #96]	; (8000cb8 <HAL_CAN_MspInit+0x88>)
 8000c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5a:	4a17      	ldr	r2, [pc, #92]	; (8000cb8 <HAL_CAN_MspInit+0x88>)
 8000c5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c60:	6413      	str	r3, [r2, #64]	; 0x40
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_CAN_MspInit+0x88>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <HAL_CAN_MspInit+0x88>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c76:	4a10      	ldr	r2, [pc, #64]	; (8000cb8 <HAL_CAN_MspInit+0x88>)
 8000c78:	f043 0302 	orr.w	r3, r3, #2
 8000c7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <HAL_CAN_MspInit+0x88>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	60fb      	str	r3, [r7, #12]
 8000c88:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c90:	2302      	movs	r3, #2
 8000c92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c94:	2300      	movs	r3, #0
 8000c96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c98:	2303      	movs	r3, #3
 8000c9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000c9c:	2309      	movs	r3, #9
 8000c9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca0:	f107 0314 	add.w	r3, r7, #20
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <HAL_CAN_MspInit+0x8c>)
 8000ca8:	f001 fe86 	bl	80029b8 <HAL_GPIO_Init>

  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000cac:	bf00      	nop
 8000cae:	3728      	adds	r7, #40	; 0x28
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40006400 	.word	0x40006400
 8000cb8:	40023800 	.word	0x40023800
 8000cbc:	40020400 	.word	0x40020400

08000cc0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
 8000cca:	4b10      	ldr	r3, [pc, #64]	; (8000d0c <MX_DMA_Init+0x4c>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cce:	4a0f      	ldr	r2, [pc, #60]	; (8000d0c <MX_DMA_Init+0x4c>)
 8000cd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000cd4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cd6:	4b0d      	ldr	r3, [pc, #52]	; (8000d0c <MX_DMA_Init+0x4c>)
 8000cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cde:	607b      	str	r3, [r7, #4]
 8000ce0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2100      	movs	r1, #0
 8000ce6:	200c      	movs	r0, #12
 8000ce8:	f001 fa2d 	bl	8002146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000cec:	200c      	movs	r0, #12
 8000cee:	f001 fa46 	bl	800217e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	2010      	movs	r0, #16
 8000cf8:	f001 fa25 	bl	8002146 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000cfc:	2010      	movs	r0, #16
 8000cfe:	f001 fa3e 	bl	800217e <HAL_NVIC_EnableIRQ>

}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40023800 	.word	0x40023800

08000d10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b08a      	sub	sp, #40	; 0x28
 8000d14:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	601a      	str	r2, [r3, #0]
 8000d1e:	605a      	str	r2, [r3, #4]
 8000d20:	609a      	str	r2, [r3, #8]
 8000d22:	60da      	str	r2, [r3, #12]
 8000d24:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	613b      	str	r3, [r7, #16]
 8000d2a:	4b2d      	ldr	r3, [pc, #180]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a2c      	ldr	r2, [pc, #176]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d30:	f043 0304 	orr.w	r3, r3, #4
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b2a      	ldr	r3, [pc, #168]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0304 	and.w	r3, r3, #4
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b26      	ldr	r3, [pc, #152]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d4a:	4a25      	ldr	r2, [pc, #148]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d50:	6313      	str	r3, [r2, #48]	; 0x30
 8000d52:	4b23      	ldr	r3, [pc, #140]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60bb      	str	r3, [r7, #8]
 8000d62:	4b1f      	ldr	r3, [pc, #124]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d66:	4a1e      	ldr	r2, [pc, #120]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6e:	4b1c      	ldr	r3, [pc, #112]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	60bb      	str	r3, [r7, #8]
 8000d78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	607b      	str	r3, [r7, #4]
 8000d7e:	4b18      	ldr	r3, [pc, #96]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a17      	ldr	r2, [pc, #92]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d84:	f043 0302 	orr.w	r3, r3, #2
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b15      	ldr	r3, [pc, #84]	; (8000de0 <MX_GPIO_Init+0xd0>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0302 	and.w	r3, r3, #2
 8000d92:	607b      	str	r3, [r7, #4]
 8000d94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d96:	2200      	movs	r2, #0
 8000d98:	2120      	movs	r1, #32
 8000d9a:	4812      	ldr	r0, [pc, #72]	; (8000de4 <MX_GPIO_Init+0xd4>)
 8000d9c:	f001 ffa0 	bl	8002ce0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000da0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000da6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000daa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dac:	2300      	movs	r3, #0
 8000dae:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000db0:	f107 0314 	add.w	r3, r7, #20
 8000db4:	4619      	mov	r1, r3
 8000db6:	480c      	ldr	r0, [pc, #48]	; (8000de8 <MX_GPIO_Init+0xd8>)
 8000db8:	f001 fdfe 	bl	80029b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000dbc:	2320      	movs	r3, #32
 8000dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dc0:	2301      	movs	r3, #1
 8000dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000dcc:	f107 0314 	add.w	r3, r7, #20
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	4804      	ldr	r0, [pc, #16]	; (8000de4 <MX_GPIO_Init+0xd4>)
 8000dd4:	f001 fdf0 	bl	80029b8 <HAL_GPIO_Init>

}
 8000dd8:	bf00      	nop
 8000dda:	3728      	adds	r7, #40	; 0x28
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	bd80      	pop	{r7, pc}
 8000de0:	40023800 	.word	0x40023800
 8000de4:	40020000 	.word	0x40020000
 8000de8:	40020800 	.word	0x40020800

08000dec <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000df0:	4b12      	ldr	r3, [pc, #72]	; (8000e3c <MX_I2C1_Init+0x50>)
 8000df2:	4a13      	ldr	r2, [pc, #76]	; (8000e40 <MX_I2C1_Init+0x54>)
 8000df4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000df6:	4b11      	ldr	r3, [pc, #68]	; (8000e3c <MX_I2C1_Init+0x50>)
 8000df8:	4a12      	ldr	r2, [pc, #72]	; (8000e44 <MX_I2C1_Init+0x58>)
 8000dfa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dfc:	4b0f      	ldr	r3, [pc, #60]	; (8000e3c <MX_I2C1_Init+0x50>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <MX_I2C1_Init+0x50>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e08:	4b0c      	ldr	r3, [pc, #48]	; (8000e3c <MX_I2C1_Init+0x50>)
 8000e0a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e0e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e10:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <MX_I2C1_Init+0x50>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000e16:	4b09      	ldr	r3, [pc, #36]	; (8000e3c <MX_I2C1_Init+0x50>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e1c:	4b07      	ldr	r3, [pc, #28]	; (8000e3c <MX_I2C1_Init+0x50>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_ENABLE;
 8000e22:	4b06      	ldr	r3, [pc, #24]	; (8000e3c <MX_I2C1_Init+0x50>)
 8000e24:	2280      	movs	r2, #128	; 0x80
 8000e26:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e28:	4804      	ldr	r0, [pc, #16]	; (8000e3c <MX_I2C1_Init+0x50>)
 8000e2a:	f001 ff73 	bl	8002d14 <HAL_I2C_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e34:	f000 f9c8 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e38:	bf00      	nop
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	200000d0 	.word	0x200000d0
 8000e40:	40005400 	.word	0x40005400
 8000e44:	000186a0 	.word	0x000186a0

08000e48 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b08a      	sub	sp, #40	; 0x28
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e50:	f107 0314 	add.w	r3, r7, #20
 8000e54:	2200      	movs	r2, #0
 8000e56:	601a      	str	r2, [r3, #0]
 8000e58:	605a      	str	r2, [r3, #4]
 8000e5a:	609a      	str	r2, [r3, #8]
 8000e5c:	60da      	str	r2, [r3, #12]
 8000e5e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a19      	ldr	r2, [pc, #100]	; (8000ecc <HAL_I2C_MspInit+0x84>)
 8000e66:	4293      	cmp	r3, r2
 8000e68:	d12b      	bne.n	8000ec2 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	613b      	str	r3, [r7, #16]
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	613b      	str	r3, [r7, #16]
 8000e84:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000e86:	23c0      	movs	r3, #192	; 0xc0
 8000e88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e8a:	2312      	movs	r3, #18
 8000e8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e92:	2303      	movs	r3, #3
 8000e94:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000e96:	2304      	movs	r3, #4
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e9a:	f107 0314 	add.w	r3, r7, #20
 8000e9e:	4619      	mov	r1, r3
 8000ea0:	480c      	ldr	r0, [pc, #48]	; (8000ed4 <HAL_I2C_MspInit+0x8c>)
 8000ea2:	f001 fd89 	bl	80029b8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000eb0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_I2C_MspInit+0x88>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ec2:	bf00      	nop
 8000ec4:	3728      	adds	r7, #40	; 0x28
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	bf00      	nop
 8000ecc:	40005400 	.word	0x40005400
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020400 	.word	0x40020400

08000ed8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000edc:	f000 fda8 	bl	8001a30 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000ee0:	f000 f8c2 	bl	8001068 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000ee4:	f7ff ff14 	bl	8000d10 <MX_GPIO_Init>
	MX_DMA_Init();
 8000ee8:	f7ff feea 	bl	8000cc0 <MX_DMA_Init>
	MX_USART2_UART_Init();
 8000eec:	f000 fc0e 	bl	800170c <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8000ef0:	f7ff ff7c 	bl	8000dec <MX_I2C1_Init>
	MX_USART3_UART_Init();
 8000ef4:	f000 fc34 	bl	8001760 <MX_USART3_UART_Init>
	MX_CAN1_Init();
 8000ef8:	f7ff fe64 	bl	8000bc4 <MX_CAN1_Init>
	MX_TIM7_Init();
 8000efc:	f000 fab6 	bl	800146c <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */

	HAL_CAN_Start(&hcan1);
 8000f00:	4845      	ldr	r0, [pc, #276]	; (8001018 <main+0x140>)
 8000f02:	f000 ff26 	bl	8001d52 <HAL_CAN_Start>
	printf("\r\n can started \r\n");
 8000f06:	4845      	ldr	r0, [pc, #276]	; (800101c <main+0x144>)
 8000f08:	f005 fc88 	bl	800681c <puts>
	aData[0]=0;
 8000f0c:	4b44      	ldr	r3, [pc, #272]	; (8001020 <main+0x148>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	701a      	strb	r2, [r3, #0]
	aData[1]=0;
 8000f12:	4b43      	ldr	r3, [pc, #268]	; (8001020 <main+0x148>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	705a      	strb	r2, [r3, #1]
	pHeader.StdId= 0x61;
 8000f18:	4b42      	ldr	r3, [pc, #264]	; (8001024 <main+0x14c>)
 8000f1a:	2261      	movs	r2, #97	; 0x61
 8000f1c:	601a      	str	r2, [r3, #0]
	pHeader.IDE=CAN_ID_STD;
 8000f1e:	4b41      	ldr	r3, [pc, #260]	; (8001024 <main+0x14c>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	609a      	str	r2, [r3, #8]
	pHeader.RTR=CAN_RTR_DATA;
 8000f24:	4b3f      	ldr	r3, [pc, #252]	; (8001024 <main+0x14c>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	60da      	str	r2, [r3, #12]
	pHeader.DLC=2;
 8000f2a:	4b3e      	ldr	r3, [pc, #248]	; (8001024 <main+0x14c>)
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	611a      	str	r2, [r3, #16]
	pHeader.TransmitGlobalTime=DISABLE;
 8000f30:	4b3c      	ldr	r3, [pc, #240]	; (8001024 <main+0x14c>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	751a      	strb	r2, [r3, #20]
	HAL_CAN_AddTxMessage ( &hcan1, &pHeader,aData,&pTxMailbox);
 8000f36:	4b3c      	ldr	r3, [pc, #240]	; (8001028 <main+0x150>)
 8000f38:	4a39      	ldr	r2, [pc, #228]	; (8001020 <main+0x148>)
 8000f3a:	493a      	ldr	r1, [pc, #232]	; (8001024 <main+0x14c>)
 8000f3c:	4836      	ldr	r0, [pc, #216]	; (8001018 <main+0x140>)
 8000f3e:	f000 ff4c 	bl	8001dda <HAL_CAN_AddTxMessage>
	HAL_TIM_Base_Start_IT(&htim7);
 8000f42:	483a      	ldr	r0, [pc, #232]	; (800102c <main+0x154>)
 8000f44:	f003 fd04 	bl	8004950 <HAL_TIM_Base_Start_IT>

	HAL_UARTEx_ReceiveToIdle_DMA(&huart3, RxBuffer, RX_BUFFER_SIZE);
 8000f48:	220c      	movs	r2, #12
 8000f4a:	4939      	ldr	r1, [pc, #228]	; (8001030 <main+0x158>)
 8000f4c:	4839      	ldr	r0, [pc, #228]	; (8001034 <main+0x15c>)
 8000f4e:	f004 f8ae 	bl	80050ae <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 8000f52:	4b39      	ldr	r3, [pc, #228]	; (8001038 <main+0x160>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	4b37      	ldr	r3, [pc, #220]	; (8001038 <main+0x160>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 0208 	bic.w	r2, r2, #8
 8000f60:	601a      	str	r2, [r3, #0]
	printf("\r\nChecking for BMP280\r\n");
 8000f62:	4836      	ldr	r0, [pc, #216]	; (800103c <main+0x164>)
 8000f64:	f005 fc5a 	bl	800681c <puts>
	BMP280_check();
 8000f68:	f7ff fc12 	bl	8000790 <BMP280_check>
	printf("\r\nConfigure BMP280\r\n");
 8000f6c:	4834      	ldr	r0, [pc, #208]	; (8001040 <main+0x168>)
 8000f6e:	f005 fc55 	bl	800681c <puts>
	BMP280_init();
 8000f72:	f7ff fc59 	bl	8000828 <BMP280_init>
	BMP280_get_trimming(calibration_data);
 8000f76:	4833      	ldr	r0, [pc, #204]	; (8001044 <main+0x16c>)
 8000f78:	f7ff fc7c 	bl	8000874 <BMP280_get_trimming>
			  /*uint8_t reg = 0xD0;
			  HAL_I2C_Master_Transmit(&hi2c1, 0x77<<1 , &reg, 1, 100);
			  HAL_I2C_Master_Receive(&hi2c1, 0x77<<1, &reg, 1, 100);
		       HAL_Delay(1000);*/
		     /*  printf("id : 0x%02X",reg);*/
		      BMP280_get_temperature();
 8000f7c:	f7ff fdb6 	bl	8000aec <BMP280_get_temperature>
		      	  BMP280_get_pressure();
 8000f80:	f7ff fdea 	bl	8000b58 <BMP280_get_pressure>
		      	  HAL_Delay(1000);
 8000f84:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f88:	f000 fdc4 	bl	8001b14 <HAL_Delay>
		      	last_temp=BMP280_get_temperature();
 8000f8c:	f7ff fdae 	bl	8000aec <BMP280_get_temperature>
 8000f90:	4603      	mov	r3, r0
 8000f92:	4a2d      	ldr	r2, [pc, #180]	; (8001048 <main+0x170>)
 8000f94:	6013      	str	r3, [r2, #0]
		      		printf("T=%d\r\n",last_temp);
 8000f96:	4b2c      	ldr	r3, [pc, #176]	; (8001048 <main+0x170>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	482b      	ldr	r0, [pc, #172]	; (800104c <main+0x174>)
 8000f9e:	f005 fbd7 	bl	8006750 <iprintf>
		      		angle=((last_temp-2500))*K/10000;
 8000fa2:	4b29      	ldr	r3, [pc, #164]	; (8001048 <main+0x170>)
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	f6a3 13c4 	subw	r3, r3, #2500	; 0x9c4
 8000faa:	4a29      	ldr	r2, [pc, #164]	; (8001050 <main+0x178>)
 8000fac:	6812      	ldr	r2, [r2, #0]
 8000fae:	fb02 f303 	mul.w	r3, r2, r3
 8000fb2:	4a28      	ldr	r2, [pc, #160]	; (8001054 <main+0x17c>)
 8000fb4:	fb82 1203 	smull	r1, r2, r2, r3
 8000fb8:	1312      	asrs	r2, r2, #12
 8000fba:	17db      	asrs	r3, r3, #31
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	4a26      	ldr	r2, [pc, #152]	; (8001058 <main+0x180>)
 8000fc0:	6013      	str	r3, [r2, #0]
		      		printf("angle=%d\r\n",angle);
 8000fc2:	4b25      	ldr	r3, [pc, #148]	; (8001058 <main+0x180>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4824      	ldr	r0, [pc, #144]	; (800105c <main+0x184>)
 8000fca:	f005 fbc1 	bl	8006750 <iprintf>
		      		if(angle>=0)
 8000fce:	4b22      	ldr	r3, [pc, #136]	; (8001058 <main+0x180>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	db03      	blt.n	8000fde <main+0x106>
		      		{
		      			aData[1]=1;
 8000fd6:	4b12      	ldr	r3, [pc, #72]	; (8001020 <main+0x148>)
 8000fd8:	2201      	movs	r2, #1
 8000fda:	705a      	strb	r2, [r3, #1]
 8000fdc:	e002      	b.n	8000fe4 <main+0x10c>
		      		}
		      		else
		      		{
		      			aData[1]=0;
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <main+0x148>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	705a      	strb	r2, [r3, #1]
		      		}
		      		aData[0]=abs(angle);
 8000fe4:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <main+0x180>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	bfb8      	it	lt
 8000fec:	425b      	neglt	r3, r3
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <main+0x148>)
 8000ff2:	701a      	strb	r2, [r3, #0]
		      		if(HAL_CAN_AddTxMessage( &hcan1, &pHeader,aData,&pTxMailbox)==HAL_OK)
 8000ff4:	4b0c      	ldr	r3, [pc, #48]	; (8001028 <main+0x150>)
 8000ff6:	4a0a      	ldr	r2, [pc, #40]	; (8001020 <main+0x148>)
 8000ff8:	490a      	ldr	r1, [pc, #40]	; (8001024 <main+0x14c>)
 8000ffa:	4807      	ldr	r0, [pc, #28]	; (8001018 <main+0x140>)
 8000ffc:	f000 feed 	bl	8001dda <HAL_CAN_AddTxMessage>
 8001000:	4603      	mov	r3, r0
 8001002:	2b00      	cmp	r3, #0
 8001004:	d103      	bne.n	800100e <main+0x136>
		      		{
		      			printf("Motor transmission succeded\r\n");
 8001006:	4816      	ldr	r0, [pc, #88]	; (8001060 <main+0x188>)
 8001008:	f005 fc08 	bl	800681c <puts>
 800100c:	e7b6      	b.n	8000f7c <main+0xa4>
		      		}
		      		else {
		      			printf("Motor transmission not succeded\r\n");
 800100e:	4815      	ldr	r0, [pc, #84]	; (8001064 <main+0x18c>)
 8001010:	f005 fc04 	bl	800681c <puts>
	{
 8001014:	e7b2      	b.n	8000f7c <main+0xa4>
 8001016:	bf00      	nop
 8001018:	200000a8 	.word	0x200000a8
 800101c:	080074fc 	.word	0x080074fc
 8001020:	20000140 	.word	0x20000140
 8001024:	20000124 	.word	0x20000124
 8001028:	2000013c 	.word	0x2000013c
 800102c:	20000178 	.word	0x20000178
 8001030:	20000148 	.word	0x20000148
 8001034:	2000020c 	.word	0x2000020c
 8001038:	200002b0 	.word	0x200002b0
 800103c:	08007510 	.word	0x08007510
 8001040:	08007528 	.word	0x08007528
 8001044:	20000158 	.word	0x20000158
 8001048:	20000154 	.word	0x20000154
 800104c:	0800753c 	.word	0x0800753c
 8001050:	20000000 	.word	0x20000000
 8001054:	68db8bad 	.word	0x68db8bad
 8001058:	20000144 	.word	0x20000144
 800105c:	08007544 	.word	0x08007544
 8001060:	08007550 	.word	0x08007550
 8001064:	08007570 	.word	0x08007570

08001068 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b094      	sub	sp, #80	; 0x50
 800106c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106e:	f107 031c 	add.w	r3, r7, #28
 8001072:	2234      	movs	r2, #52	; 0x34
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f005 fcb0 	bl	80069dc <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800107c:	f107 0308 	add.w	r3, r7, #8
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	607b      	str	r3, [r7, #4]
 8001090:	4b2c      	ldr	r3, [pc, #176]	; (8001144 <SystemClock_Config+0xdc>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001094:	4a2b      	ldr	r2, [pc, #172]	; (8001144 <SystemClock_Config+0xdc>)
 8001096:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800109a:	6413      	str	r3, [r2, #64]	; 0x40
 800109c:	4b29      	ldr	r3, [pc, #164]	; (8001144 <SystemClock_Config+0xdc>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010a4:	607b      	str	r3, [r7, #4]
 80010a6:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a8:	2300      	movs	r3, #0
 80010aa:	603b      	str	r3, [r7, #0]
 80010ac:	4b26      	ldr	r3, [pc, #152]	; (8001148 <SystemClock_Config+0xe0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a25      	ldr	r2, [pc, #148]	; (8001148 <SystemClock_Config+0xe0>)
 80010b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b23      	ldr	r3, [pc, #140]	; (8001148 <SystemClock_Config+0xe0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010c0:	603b      	str	r3, [r7, #0]
 80010c2:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010c4:	2301      	movs	r3, #1
 80010c6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010cc:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010ce:	2302      	movs	r3, #2
 80010d0:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80010d6:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLM = 4;
 80010d8:	2304      	movs	r3, #4
 80010da:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLN = 180;
 80010dc:	23b4      	movs	r3, #180	; 0xb4
 80010de:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLQ = 2;
 80010e4:	2302      	movs	r3, #2
 80010e6:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLR = 2;
 80010e8:	2302      	movs	r3, #2
 80010ea:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010ec:	f107 031c 	add.w	r3, r7, #28
 80010f0:	4618      	mov	r0, r3
 80010f2:	f003 f93f 	bl	8004374 <HAL_RCC_OscConfig>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <SystemClock_Config+0x98>
	{
		Error_Handler();
 80010fc:	f000 f864 	bl	80011c8 <Error_Handler>
	}

	/** Activate the Over-Drive mode
	 */
	if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001100:	f002 fd9e 	bl	8003c40 <HAL_PWREx_EnableOverDrive>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0xa6>
	{
		Error_Handler();
 800110a:	f000 f85d 	bl	80011c8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110e:	230f      	movs	r3, #15
 8001110:	60bb      	str	r3, [r7, #8]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001112:	2302      	movs	r3, #2
 8001114:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800111a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800111e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001120:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001124:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001126:	f107 0308 	add.w	r3, r7, #8
 800112a:	2105      	movs	r1, #5
 800112c:	4618      	mov	r0, r3
 800112e:	f002 fdd7 	bl	8003ce0 <HAL_RCC_ClockConfig>
 8001132:	4603      	mov	r3, r0
 8001134:	2b00      	cmp	r3, #0
 8001136:	d001      	beq.n	800113c <SystemClock_Config+0xd4>
	{
		Error_Handler();
 8001138:	f000 f846 	bl	80011c8 <Error_Handler>
	}
}
 800113c:	bf00      	nop
 800113e:	3750      	adds	r7, #80	; 0x50
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	40023800 	.word	0x40023800
 8001148:	40007000 	.word	0x40007000

0800114c <HAL_UARTEx_RxEventCallback>:

/* USER CODE BEGIN 4 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	460b      	mov	r3, r1
 8001156:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART3)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a11      	ldr	r2, [pc, #68]	; (80011a4 <HAL_UARTEx_RxEventCallback+0x58>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d11b      	bne.n	800119a <HAL_UARTEx_RxEventCallback+0x4e>
	{
		RxBuffer[Size]='\r';
 8001162:	887b      	ldrh	r3, [r7, #2]
 8001164:	4a10      	ldr	r2, [pc, #64]	; (80011a8 <HAL_UARTEx_RxEventCallback+0x5c>)
 8001166:	210d      	movs	r1, #13
 8001168:	54d1      	strb	r1, [r2, r3]
		RxBuffer[Size+1]='\n';
 800116a:	887b      	ldrh	r3, [r7, #2]
 800116c:	3301      	adds	r3, #1
 800116e:	4a0e      	ldr	r2, [pc, #56]	; (80011a8 <HAL_UARTEx_RxEventCallback+0x5c>)
 8001170:	210a      	movs	r1, #10
 8001172:	54d1      	strb	r1, [r2, r3]
		protocol(RxBuffer,Size+2);
 8001174:	887b      	ldrh	r3, [r7, #2]
 8001176:	3302      	adds	r3, #2
 8001178:	4619      	mov	r1, r3
 800117a:	480b      	ldr	r0, [pc, #44]	; (80011a8 <HAL_UARTEx_RxEventCallback+0x5c>)
 800117c:	f000 f9d4 	bl	8001528 <protocol>
		HAL_UARTEx_ReceiveToIdle_DMA(&huart3, RxBuffer, RX_BUFFER_SIZE);
 8001180:	220c      	movs	r2, #12
 8001182:	4909      	ldr	r1, [pc, #36]	; (80011a8 <HAL_UARTEx_RxEventCallback+0x5c>)
 8001184:	4809      	ldr	r0, [pc, #36]	; (80011ac <HAL_UARTEx_RxEventCallback+0x60>)
 8001186:	f003 ff92 	bl	80050ae <HAL_UARTEx_ReceiveToIdle_DMA>
		__HAL_DMA_DISABLE_IT(&hdma_usart3_rx, DMA_IT_HT);
 800118a:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <HAL_UARTEx_RxEventCallback+0x64>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	4b07      	ldr	r3, [pc, #28]	; (80011b0 <HAL_UARTEx_RxEventCallback+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f022 0208 	bic.w	r2, r2, #8
 8001198:	601a      	str	r2, [r3, #0]
	}
}
 800119a:	bf00      	nop
 800119c:	3708      	adds	r7, #8
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40004800 	.word	0x40004800
 80011a8:	20000148 	.word	0x20000148
 80011ac:	2000020c 	.word	0x2000020c
 80011b0:	200002b0 	.word	0x200002b0

080011b4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
		printf("Motor transmission succeded\r\n");
	}
	else {
		printf("Motor transmission not succeded\r\n");
	}*/
}
 80011bc:	bf00      	nop
 80011be:	370c      	adds	r7, #12
 80011c0:	46bd      	mov	sp, r7
 80011c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c6:	4770      	bx	lr

080011c8 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011cc:	b672      	cpsid	i
}
 80011ce:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80011d0:	e7fe      	b.n	80011d0 <Error_Handler+0x8>
	...

080011d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <HAL_MspInit+0x4c>)
 80011e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e2:	4a0f      	ldr	r2, [pc, #60]	; (8001220 <HAL_MspInit+0x4c>)
 80011e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <HAL_MspInit+0x4c>)
 80011ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011f2:	607b      	str	r3, [r7, #4]
 80011f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f6:	2300      	movs	r3, #0
 80011f8:	603b      	str	r3, [r7, #0]
 80011fa:	4b09      	ldr	r3, [pc, #36]	; (8001220 <HAL_MspInit+0x4c>)
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	4a08      	ldr	r2, [pc, #32]	; (8001220 <HAL_MspInit+0x4c>)
 8001200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001204:	6413      	str	r3, [r2, #64]	; 0x40
 8001206:	4b06      	ldr	r3, [pc, #24]	; (8001220 <HAL_MspInit+0x4c>)
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120e:	603b      	str	r3, [r7, #0]
 8001210:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001212:	2007      	movs	r0, #7
 8001214:	f000 ff8c 	bl	8002130 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001218:	bf00      	nop
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800

08001224 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART2 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 800122c:	1d39      	adds	r1, r7, #4
 800122e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001232:	2201      	movs	r2, #1
 8001234:	4803      	ldr	r0, [pc, #12]	; (8001244 <__io_putchar+0x20>)
 8001236:	f003 fea8 	bl	8004f8a <HAL_UART_Transmit>

  return ch;
 800123a:	687b      	ldr	r3, [r7, #4]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3708      	adds	r7, #8
 8001240:	46bd      	mov	sp, r7
 8001242:	bd80      	pop	{r7, pc}
 8001244:	200001c8 	.word	0x200001c8

08001248 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001248:	b480      	push	{r7}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800124c:	e7fe      	b.n	800124c <NMI_Handler+0x4>

0800124e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800124e:	b480      	push	{r7}
 8001250:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001252:	e7fe      	b.n	8001252 <HardFault_Handler+0x4>

08001254 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001254:	b480      	push	{r7}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001258:	e7fe      	b.n	8001258 <MemManage_Handler+0x4>

0800125a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800125e:	e7fe      	b.n	800125e <BusFault_Handler+0x4>

08001260 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001264:	e7fe      	b.n	8001264 <UsageFault_Handler+0x4>

08001266 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001266:	b480      	push	{r7}
 8001268:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001278:	bf00      	nop
 800127a:	46bd      	mov	sp, r7
 800127c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001280:	4770      	bx	lr

08001282 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr

08001290 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001294:	f000 fc1e 	bl	8001ad4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001298:	bf00      	nop
 800129a:	bd80      	pop	{r7, pc}

0800129c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80012a0:	4802      	ldr	r0, [pc, #8]	; (80012ac <DMA1_Stream1_IRQHandler+0x10>)
 80012a2:	f001 f91f 	bl	80024e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80012a6:	bf00      	nop
 80012a8:	bd80      	pop	{r7, pc}
 80012aa:	bf00      	nop
 80012ac:	200002b0 	.word	0x200002b0

080012b0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80012b4:	4802      	ldr	r0, [pc, #8]	; (80012c0 <DMA1_Stream5_IRQHandler+0x10>)
 80012b6:	f001 f915 	bl	80024e4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000250 	.word	0x20000250

080012c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012c8:	4802      	ldr	r0, [pc, #8]	; (80012d4 <USART2_IRQHandler+0x10>)
 80012ca:	f003 ff55 	bl	8005178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012ce:	bf00      	nop
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	bf00      	nop
 80012d4:	200001c8 	.word	0x200001c8

080012d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012dc:	4802      	ldr	r0, [pc, #8]	; (80012e8 <USART3_IRQHandler+0x10>)
 80012de:	f003 ff4b 	bl	8005178 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012e2:	bf00      	nop
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	2000020c 	.word	0x2000020c

080012ec <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80012f0:	4802      	ldr	r0, [pc, #8]	; (80012fc <TIM7_IRQHandler+0x10>)
 80012f2:	f003 fb9d 	bl	8004a30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000178 	.word	0x20000178

08001300 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
 8001310:	e00a      	b.n	8001328 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001312:	f3af 8000 	nop.w
 8001316:	4601      	mov	r1, r0
 8001318:	68bb      	ldr	r3, [r7, #8]
 800131a:	1c5a      	adds	r2, r3, #1
 800131c:	60ba      	str	r2, [r7, #8]
 800131e:	b2ca      	uxtb	r2, r1
 8001320:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	3301      	adds	r3, #1
 8001326:	617b      	str	r3, [r7, #20]
 8001328:	697a      	ldr	r2, [r7, #20]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	429a      	cmp	r2, r3
 800132e:	dbf0      	blt.n	8001312 <_read+0x12>
  }

  return len;
 8001330:	687b      	ldr	r3, [r7, #4]
}
 8001332:	4618      	mov	r0, r3
 8001334:	3718      	adds	r7, #24
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b086      	sub	sp, #24
 800133e:	af00      	add	r7, sp, #0
 8001340:	60f8      	str	r0, [r7, #12]
 8001342:	60b9      	str	r1, [r7, #8]
 8001344:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001346:	2300      	movs	r3, #0
 8001348:	617b      	str	r3, [r7, #20]
 800134a:	e009      	b.n	8001360 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	60ba      	str	r2, [r7, #8]
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff ff65 	bl	8001224 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	3301      	adds	r3, #1
 800135e:	617b      	str	r3, [r7, #20]
 8001360:	697a      	ldr	r2, [r7, #20]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	429a      	cmp	r2, r3
 8001366:	dbf1      	blt.n	800134c <_write+0x12>
  }
  return len;
 8001368:	687b      	ldr	r3, [r7, #4]
}
 800136a:	4618      	mov	r0, r3
 800136c:	3718      	adds	r7, #24
 800136e:	46bd      	mov	sp, r7
 8001370:	bd80      	pop	{r7, pc}

08001372 <_close>:

int _close(int file)
{
 8001372:	b480      	push	{r7}
 8001374:	b083      	sub	sp, #12
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800137e:	4618      	mov	r0, r3
 8001380:	370c      	adds	r7, #12
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800138a:	b480      	push	{r7}
 800138c:	b083      	sub	sp, #12
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800139a:	605a      	str	r2, [r3, #4]
  return 0;
 800139c:	2300      	movs	r3, #0
}
 800139e:	4618      	mov	r0, r3
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr

080013aa <_isatty>:

int _isatty(int file)
{
 80013aa:	b480      	push	{r7}
 80013ac:	b083      	sub	sp, #12
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013b2:	2301      	movs	r3, #1
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr

080013c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80013c0:	b480      	push	{r7}
 80013c2:	b085      	sub	sp, #20
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	60f8      	str	r0, [r7, #12]
 80013c8:	60b9      	str	r1, [r7, #8]
 80013ca:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3714      	adds	r7, #20
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
	...

080013dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b086      	sub	sp, #24
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80013e4:	4a14      	ldr	r2, [pc, #80]	; (8001438 <_sbrk+0x5c>)
 80013e6:	4b15      	ldr	r3, [pc, #84]	; (800143c <_sbrk+0x60>)
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <_sbrk+0x64>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d102      	bne.n	80013fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80013f8:	4b11      	ldr	r3, [pc, #68]	; (8001440 <_sbrk+0x64>)
 80013fa:	4a12      	ldr	r2, [pc, #72]	; (8001444 <_sbrk+0x68>)
 80013fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <_sbrk+0x64>)
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	4413      	add	r3, r2
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	429a      	cmp	r2, r3
 800140a:	d207      	bcs.n	800141c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800140c:	f005 fb56 	bl	8006abc <__errno>
 8001410:	4603      	mov	r3, r0
 8001412:	220c      	movs	r2, #12
 8001414:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001416:	f04f 33ff 	mov.w	r3, #4294967295
 800141a:	e009      	b.n	8001430 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800141c:	4b08      	ldr	r3, [pc, #32]	; (8001440 <_sbrk+0x64>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001422:	4b07      	ldr	r3, [pc, #28]	; (8001440 <_sbrk+0x64>)
 8001424:	681a      	ldr	r2, [r3, #0]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4413      	add	r3, r2
 800142a:	4a05      	ldr	r2, [pc, #20]	; (8001440 <_sbrk+0x64>)
 800142c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800142e:	68fb      	ldr	r3, [r7, #12]
}
 8001430:	4618      	mov	r0, r3
 8001432:	3718      	adds	r7, #24
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20020000 	.word	0x20020000
 800143c:	00000400 	.word	0x00000400
 8001440:	20000174 	.word	0x20000174
 8001444:	20000460 	.word	0x20000460

08001448 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800144c:	4b06      	ldr	r3, [pc, #24]	; (8001468 <SystemInit+0x20>)
 800144e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001452:	4a05      	ldr	r2, [pc, #20]	; (8001468 <SystemInit+0x20>)
 8001454:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001458:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr
 8001466:	bf00      	nop
 8001468:	e000ed00 	.word	0xe000ed00

0800146c <MX_TIM7_Init>:

TIM_HandleTypeDef htim7;

/* TIM7 init function */
void MX_TIM7_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001472:	463b      	mov	r3, r7
 8001474:	2200      	movs	r2, #0
 8001476:	601a      	str	r2, [r3, #0]
 8001478:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 800147a:	4b15      	ldr	r3, [pc, #84]	; (80014d0 <MX_TIM7_Init+0x64>)
 800147c:	4a15      	ldr	r2, [pc, #84]	; (80014d4 <MX_TIM7_Init+0x68>)
 800147e:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 1800-1;
 8001480:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <MX_TIM7_Init+0x64>)
 8001482:	f240 7207 	movw	r2, #1799	; 0x707
 8001486:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <MX_TIM7_Init+0x64>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 100-1;
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <MX_TIM7_Init+0x64>)
 8001490:	2263      	movs	r2, #99	; 0x63
 8001492:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001494:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <MX_TIM7_Init+0x64>)
 8001496:	2200      	movs	r2, #0
 8001498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800149a:	480d      	ldr	r0, [pc, #52]	; (80014d0 <MX_TIM7_Init+0x64>)
 800149c:	f003 fa08 	bl	80048b0 <HAL_TIM_Base_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 80014a6:	f7ff fe8f 	bl	80011c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80014b2:	463b      	mov	r3, r7
 80014b4:	4619      	mov	r1, r3
 80014b6:	4806      	ldr	r0, [pc, #24]	; (80014d0 <MX_TIM7_Init+0x64>)
 80014b8:	f003 fc8a 	bl	8004dd0 <HAL_TIMEx_MasterConfigSynchronization>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 80014c2:	f7ff fe81 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000178 	.word	0x20000178
 80014d4:	40001400 	.word	0x40001400

080014d8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM7)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <HAL_TIM_Base_MspInit+0x48>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d115      	bne.n	8001516 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* TIM7 clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	60fb      	str	r3, [r7, #12]
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <HAL_TIM_Base_MspInit+0x4c>)
 80014f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f2:	4a0c      	ldr	r2, [pc, #48]	; (8001524 <HAL_TIM_Base_MspInit+0x4c>)
 80014f4:	f043 0320 	orr.w	r3, r3, #32
 80014f8:	6413      	str	r3, [r2, #64]	; 0x40
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_TIM_Base_MspInit+0x4c>)
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	f003 0320 	and.w	r3, r3, #32
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]

    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	2037      	movs	r0, #55	; 0x37
 800150c:	f000 fe1b 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8001510:	2037      	movs	r0, #55	; 0x37
 8001512:	f000 fe34 	bl	800217e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }
}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40001400 	.word	0x40001400
 8001524:	40023800 	.word	0x40023800

08001528 <protocol>:
extern int A;
extern BMP280_S32_t last_temp;


void protocol(char RX_Pi_buffer[RX_BUFFER_SIZE], uint8_t Size)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	70fb      	strb	r3, [r7, #3]

	if (strncmp(RX_Pi_buffer,"GET_T",strlen("GET_T"))==0)
 8001534:	2205      	movs	r2, #5
 8001536:	4962      	ldr	r1, [pc, #392]	; (80016c0 <protocol+0x198>)
 8001538:	6878      	ldr	r0, [r7, #4]
 800153a:	f005 fa57 	bl	80069ec <strncmp>
 800153e:	4603      	mov	r3, r0
 8001540:	2b00      	cmp	r3, #0
 8001542:	d13b      	bne.n	80015bc <protocol+0x94>
	{
		Temperature_value=BMP280_get_temperature();
 8001544:	f7ff fad2 	bl	8000aec <BMP280_get_temperature>
 8001548:	4603      	mov	r3, r0
 800154a:	4a5e      	ldr	r2, [pc, #376]	; (80016c4 <protocol+0x19c>)
 800154c:	6013      	str	r3, [r2, #0]

		if (Temperature_value>=0)
 800154e:	4b5d      	ldr	r3, [pc, #372]	; (80016c4 <protocol+0x19c>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	2b00      	cmp	r3, #0
 8001554:	db18      	blt.n	8001588 <protocol+0x60>
		{
			printf("T=+%d.%d_C\r\n",(int)(Temperature_value/100),Temperature_value%100);
 8001556:	4b5b      	ldr	r3, [pc, #364]	; (80016c4 <protocol+0x19c>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	4a5b      	ldr	r2, [pc, #364]	; (80016c8 <protocol+0x1a0>)
 800155c:	fb82 1203 	smull	r1, r2, r2, r3
 8001560:	1152      	asrs	r2, r2, #5
 8001562:	17db      	asrs	r3, r3, #31
 8001564:	1ad0      	subs	r0, r2, r3
 8001566:	4b57      	ldr	r3, [pc, #348]	; (80016c4 <protocol+0x19c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a57      	ldr	r2, [pc, #348]	; (80016c8 <protocol+0x1a0>)
 800156c:	fb82 1203 	smull	r1, r2, r2, r3
 8001570:	1151      	asrs	r1, r2, #5
 8001572:	17da      	asrs	r2, r3, #31
 8001574:	1a8a      	subs	r2, r1, r2
 8001576:	2164      	movs	r1, #100	; 0x64
 8001578:	fb01 f202 	mul.w	r2, r1, r2
 800157c:	1a9a      	subs	r2, r3, r2
 800157e:	4601      	mov	r1, r0
 8001580:	4852      	ldr	r0, [pc, #328]	; (80016cc <protocol+0x1a4>)
 8001582:	f005 f8e5 	bl	8006750 <iprintf>
 8001586:	e091      	b.n	80016ac <protocol+0x184>
		}
		else
		{
			printf("T=%d.%d_C\r\n",(int)(Temperature_value/100),-Temperature_value%100);
 8001588:	4b4e      	ldr	r3, [pc, #312]	; (80016c4 <protocol+0x19c>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a4e      	ldr	r2, [pc, #312]	; (80016c8 <protocol+0x1a0>)
 800158e:	fb82 1203 	smull	r1, r2, r2, r3
 8001592:	1152      	asrs	r2, r2, #5
 8001594:	17db      	asrs	r3, r3, #31
 8001596:	1ad0      	subs	r0, r2, r3
 8001598:	4b4a      	ldr	r3, [pc, #296]	; (80016c4 <protocol+0x19c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	425b      	negs	r3, r3
 800159e:	4a4a      	ldr	r2, [pc, #296]	; (80016c8 <protocol+0x1a0>)
 80015a0:	fb82 1203 	smull	r1, r2, r2, r3
 80015a4:	1151      	asrs	r1, r2, #5
 80015a6:	17da      	asrs	r2, r3, #31
 80015a8:	1a8a      	subs	r2, r1, r2
 80015aa:	2164      	movs	r1, #100	; 0x64
 80015ac:	fb01 f202 	mul.w	r2, r1, r2
 80015b0:	1a9a      	subs	r2, r3, r2
 80015b2:	4601      	mov	r1, r0
 80015b4:	4846      	ldr	r0, [pc, #280]	; (80016d0 <protocol+0x1a8>)
 80015b6:	f005 f8cb 	bl	8006750 <iprintf>
 80015ba:	e077      	b.n	80016ac <protocol+0x184>
		}
	}
	else if (strncmp(RX_Pi_buffer,"GET_P",strlen("GET_P"))==0)
 80015bc:	2205      	movs	r2, #5
 80015be:	4945      	ldr	r1, [pc, #276]	; (80016d4 <protocol+0x1ac>)
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f005 fa13 	bl	80069ec <strncmp>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10c      	bne.n	80015e6 <protocol+0xbe>
	{
		Pressure_value=BMP280_get_pressure();
 80015cc:	f7ff fac4 	bl	8000b58 <BMP280_get_pressure>
 80015d0:	4603      	mov	r3, r0
 80015d2:	461a      	mov	r2, r3
 80015d4:	4b40      	ldr	r3, [pc, #256]	; (80016d8 <protocol+0x1b0>)
 80015d6:	601a      	str	r2, [r3, #0]
		printf("P=%dPa\r\n",Pressure_value);
 80015d8:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <protocol+0x1b0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4619      	mov	r1, r3
 80015de:	483f      	ldr	r0, [pc, #252]	; (80016dc <protocol+0x1b4>)
 80015e0:	f005 f8b6 	bl	8006750 <iprintf>
 80015e4:	e062      	b.n	80016ac <protocol+0x184>
	}
	else if (strncmp(RX_Pi_buffer,"SET_K",strlen("SET_K"))==0)
 80015e6:	2205      	movs	r2, #5
 80015e8:	493d      	ldr	r1, [pc, #244]	; (80016e0 <protocol+0x1b8>)
 80015ea:	6878      	ldr	r0, [r7, #4]
 80015ec:	f005 f9fe 	bl	80069ec <strncmp>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d114      	bne.n	8001620 <protocol+0xf8>
	{
		//printf("SET_K Received\r\n");
		if (strncmp(RX_Pi_buffer+strlen("SET_K"),"=",strlen("="))==0)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	3305      	adds	r3, #5
 80015fa:	781a      	ldrb	r2, [r3, #0]
 80015fc:	4b39      	ldr	r3, [pc, #228]	; (80016e4 <protocol+0x1bc>)
 80015fe:	781b      	ldrb	r3, [r3, #0]
 8001600:	1ad3      	subs	r3, r2, r3
 8001602:	2b00      	cmp	r3, #0
 8001604:	d108      	bne.n	8001618 <protocol+0xf0>
		{
			K=atoi(RX_Pi_buffer+strlen("SET_K")+strlen("="));
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	3306      	adds	r3, #6
 800160a:	4618      	mov	r0, r3
 800160c:	f004 fea4 	bl	8006358 <atoi>
 8001610:	4603      	mov	r3, r0
 8001612:	4a35      	ldr	r2, [pc, #212]	; (80016e8 <protocol+0x1c0>)
 8001614:	6013      	str	r3, [r2, #0]
 8001616:	e049      	b.n	80016ac <protocol+0x184>
		}
		else
			{
				printf("Command not found\r\n"
 8001618:	4834      	ldr	r0, [pc, #208]	; (80016ec <protocol+0x1c4>)
 800161a:	f005 f8ff 	bl	800681c <puts>
 800161e:	e045      	b.n	80016ac <protocol+0x184>
						"Please try this syntax\r\n"
						"SET_K=xxxx: to set the K coefficient on xxxx value (in 1/100e)\r\n");
			}
	}
	else if (strncmp(RX_Pi_buffer,"GET_K",strlen("GET_K"))==0)
 8001620:	2205      	movs	r2, #5
 8001622:	4933      	ldr	r1, [pc, #204]	; (80016f0 <protocol+0x1c8>)
 8001624:	6878      	ldr	r0, [r7, #4]
 8001626:	f005 f9e1 	bl	80069ec <strncmp>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d118      	bne.n	8001662 <protocol+0x13a>
	{
		//printf("GET_K Received\r\n");
		printf("K=%d.%d000\r\n",(int)(K/100),K%100);
 8001630:	4b2d      	ldr	r3, [pc, #180]	; (80016e8 <protocol+0x1c0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a24      	ldr	r2, [pc, #144]	; (80016c8 <protocol+0x1a0>)
 8001636:	fb82 1203 	smull	r1, r2, r2, r3
 800163a:	1152      	asrs	r2, r2, #5
 800163c:	17db      	asrs	r3, r3, #31
 800163e:	1ad0      	subs	r0, r2, r3
 8001640:	4b29      	ldr	r3, [pc, #164]	; (80016e8 <protocol+0x1c0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a20      	ldr	r2, [pc, #128]	; (80016c8 <protocol+0x1a0>)
 8001646:	fb82 1203 	smull	r1, r2, r2, r3
 800164a:	1151      	asrs	r1, r2, #5
 800164c:	17da      	asrs	r2, r3, #31
 800164e:	1a8a      	subs	r2, r1, r2
 8001650:	2164      	movs	r1, #100	; 0x64
 8001652:	fb01 f202 	mul.w	r2, r1, r2
 8001656:	1a9a      	subs	r2, r3, r2
 8001658:	4601      	mov	r1, r0
 800165a:	4826      	ldr	r0, [pc, #152]	; (80016f4 <protocol+0x1cc>)
 800165c:	f005 f878 	bl	8006750 <iprintf>
 8001660:	e024      	b.n	80016ac <protocol+0x184>
	}
	else if (strncmp(RX_Pi_buffer,"GET_A",strlen("GET_A"))==0)
 8001662:	2205      	movs	r2, #5
 8001664:	4924      	ldr	r1, [pc, #144]	; (80016f8 <protocol+0x1d0>)
 8001666:	6878      	ldr	r0, [r7, #4]
 8001668:	f005 f9c0 	bl	80069ec <strncmp>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d119      	bne.n	80016a6 <protocol+0x17e>
	{
		//printf("GET_A Received\r\n");
		printf("A=%d.%d000\r\n",(int)(A/1000),A%1000);
 8001672:	4b22      	ldr	r3, [pc, #136]	; (80016fc <protocol+0x1d4>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a22      	ldr	r2, [pc, #136]	; (8001700 <protocol+0x1d8>)
 8001678:	fb82 1203 	smull	r1, r2, r2, r3
 800167c:	1192      	asrs	r2, r2, #6
 800167e:	17db      	asrs	r3, r3, #31
 8001680:	1ad0      	subs	r0, r2, r3
 8001682:	4b1e      	ldr	r3, [pc, #120]	; (80016fc <protocol+0x1d4>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a1e      	ldr	r2, [pc, #120]	; (8001700 <protocol+0x1d8>)
 8001688:	fb82 1203 	smull	r1, r2, r2, r3
 800168c:	1191      	asrs	r1, r2, #6
 800168e:	17da      	asrs	r2, r3, #31
 8001690:	1a8a      	subs	r2, r1, r2
 8001692:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001696:	fb01 f202 	mul.w	r2, r1, r2
 800169a:	1a9a      	subs	r2, r3, r2
 800169c:	4601      	mov	r1, r0
 800169e:	4819      	ldr	r0, [pc, #100]	; (8001704 <protocol+0x1dc>)
 80016a0:	f005 f856 	bl	8006750 <iprintf>
 80016a4:	e002      	b.n	80016ac <protocol+0x184>
	}
	else
	{
		printf("Command not found\r\n"
 80016a6:	4818      	ldr	r0, [pc, #96]	; (8001708 <protocol+0x1e0>)
 80016a8:	f005 f8b8 	bl	800681c <puts>
				"GET_P: to get the pressure value compensated\r\n"
				"SET_K=xxxx: to set the K coefficient on xxxx value (in 1/100e)\r\n"
				"GET_K: to get the K coefficient\r\n"
				"GET_A: to get the angle\r\n");
	}
	memset(RX_Pi_buffer,NULL,Size*sizeof(char));
 80016ac:	78fb      	ldrb	r3, [r7, #3]
 80016ae:	461a      	mov	r2, r3
 80016b0:	2100      	movs	r1, #0
 80016b2:	6878      	ldr	r0, [r7, #4]
 80016b4:	f005 f992 	bl	80069dc <memset>
}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	08007594 	.word	0x08007594
 80016c4:	200001c4 	.word	0x200001c4
 80016c8:	51eb851f 	.word	0x51eb851f
 80016cc:	0800759c 	.word	0x0800759c
 80016d0:	080075ac 	.word	0x080075ac
 80016d4:	080075b8 	.word	0x080075b8
 80016d8:	200001c0 	.word	0x200001c0
 80016dc:	080075c0 	.word	0x080075c0
 80016e0:	080075cc 	.word	0x080075cc
 80016e4:	080075d4 	.word	0x080075d4
 80016e8:	20000000 	.word	0x20000000
 80016ec:	080075d8 	.word	0x080075d8
 80016f0:	08007644 	.word	0x08007644
 80016f4:	0800764c 	.word	0x0800764c
 80016f8:	0800765c 	.word	0x0800765c
 80016fc:	20000004 	.word	0x20000004
 8001700:	10624dd3 	.word	0x10624dd3
 8001704:	08007664 	.word	0x08007664
 8001708:	08007674 	.word	0x08007674

0800170c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001710:	4b11      	ldr	r3, [pc, #68]	; (8001758 <MX_USART2_UART_Init+0x4c>)
 8001712:	4a12      	ldr	r2, [pc, #72]	; (800175c <MX_USART2_UART_Init+0x50>)
 8001714:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001716:	4b10      	ldr	r3, [pc, #64]	; (8001758 <MX_USART2_UART_Init+0x4c>)
 8001718:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800171c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800171e:	4b0e      	ldr	r3, [pc, #56]	; (8001758 <MX_USART2_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001724:	4b0c      	ldr	r3, [pc, #48]	; (8001758 <MX_USART2_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800172a:	4b0b      	ldr	r3, [pc, #44]	; (8001758 <MX_USART2_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001730:	4b09      	ldr	r3, [pc, #36]	; (8001758 <MX_USART2_UART_Init+0x4c>)
 8001732:	220c      	movs	r2, #12
 8001734:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001736:	4b08      	ldr	r3, [pc, #32]	; (8001758 <MX_USART2_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800173c:	4b06      	ldr	r3, [pc, #24]	; (8001758 <MX_USART2_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001742:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_USART2_UART_Init+0x4c>)
 8001744:	f003 fbd4 	bl	8004ef0 <HAL_UART_Init>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800174e:	f7ff fd3b 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001752:	bf00      	nop
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	200001c8 	.word	0x200001c8
 800175c:	40004400 	.word	0x40004400

08001760 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001764:	4b11      	ldr	r3, [pc, #68]	; (80017ac <MX_USART3_UART_Init+0x4c>)
 8001766:	4a12      	ldr	r2, [pc, #72]	; (80017b0 <MX_USART3_UART_Init+0x50>)
 8001768:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800176a:	4b10      	ldr	r3, [pc, #64]	; (80017ac <MX_USART3_UART_Init+0x4c>)
 800176c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001770:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001772:	4b0e      	ldr	r3, [pc, #56]	; (80017ac <MX_USART3_UART_Init+0x4c>)
 8001774:	2200      	movs	r2, #0
 8001776:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <MX_USART3_UART_Init+0x4c>)
 800177a:	2200      	movs	r2, #0
 800177c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800177e:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <MX_USART3_UART_Init+0x4c>)
 8001780:	2200      	movs	r2, #0
 8001782:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <MX_USART3_UART_Init+0x4c>)
 8001786:	220c      	movs	r2, #12
 8001788:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800178a:	4b08      	ldr	r3, [pc, #32]	; (80017ac <MX_USART3_UART_Init+0x4c>)
 800178c:	2200      	movs	r2, #0
 800178e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001790:	4b06      	ldr	r3, [pc, #24]	; (80017ac <MX_USART3_UART_Init+0x4c>)
 8001792:	2200      	movs	r2, #0
 8001794:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001796:	4805      	ldr	r0, [pc, #20]	; (80017ac <MX_USART3_UART_Init+0x4c>)
 8001798:	f003 fbaa 	bl	8004ef0 <HAL_UART_Init>
 800179c:	4603      	mov	r3, r0
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d001      	beq.n	80017a6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80017a2:	f7ff fd11 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	2000020c 	.word	0x2000020c
 80017b0:	40004800 	.word	0x40004800

080017b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b08c      	sub	sp, #48	; 0x30
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017bc:	f107 031c 	add.w	r3, r7, #28
 80017c0:	2200      	movs	r2, #0
 80017c2:	601a      	str	r2, [r3, #0]
 80017c4:	605a      	str	r2, [r3, #4]
 80017c6:	609a      	str	r2, [r3, #8]
 80017c8:	60da      	str	r2, [r3, #12]
 80017ca:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a78      	ldr	r2, [pc, #480]	; (80019b4 <HAL_UART_MspInit+0x200>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d162      	bne.n	800189c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	61bb      	str	r3, [r7, #24]
 80017da:	4b77      	ldr	r3, [pc, #476]	; (80019b8 <HAL_UART_MspInit+0x204>)
 80017dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017de:	4a76      	ldr	r2, [pc, #472]	; (80019b8 <HAL_UART_MspInit+0x204>)
 80017e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e4:	6413      	str	r3, [r2, #64]	; 0x40
 80017e6:	4b74      	ldr	r3, [pc, #464]	; (80019b8 <HAL_UART_MspInit+0x204>)
 80017e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ee:	61bb      	str	r3, [r7, #24]
 80017f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	617b      	str	r3, [r7, #20]
 80017f6:	4b70      	ldr	r3, [pc, #448]	; (80019b8 <HAL_UART_MspInit+0x204>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a6f      	ldr	r2, [pc, #444]	; (80019b8 <HAL_UART_MspInit+0x204>)
 80017fc:	f043 0301 	orr.w	r3, r3, #1
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b6d      	ldr	r3, [pc, #436]	; (80019b8 <HAL_UART_MspInit+0x204>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0301 	and.w	r3, r3, #1
 800180a:	617b      	str	r3, [r7, #20]
 800180c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800180e:	230c      	movs	r3, #12
 8001810:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001812:	2302      	movs	r3, #2
 8001814:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181a:	2303      	movs	r3, #3
 800181c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800181e:	2307      	movs	r3, #7
 8001820:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001822:	f107 031c 	add.w	r3, r7, #28
 8001826:	4619      	mov	r1, r3
 8001828:	4864      	ldr	r0, [pc, #400]	; (80019bc <HAL_UART_MspInit+0x208>)
 800182a:	f001 f8c5 	bl	80029b8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800182e:	4b64      	ldr	r3, [pc, #400]	; (80019c0 <HAL_UART_MspInit+0x20c>)
 8001830:	4a64      	ldr	r2, [pc, #400]	; (80019c4 <HAL_UART_MspInit+0x210>)
 8001832:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001834:	4b62      	ldr	r3, [pc, #392]	; (80019c0 <HAL_UART_MspInit+0x20c>)
 8001836:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800183a:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800183c:	4b60      	ldr	r3, [pc, #384]	; (80019c0 <HAL_UART_MspInit+0x20c>)
 800183e:	2200      	movs	r2, #0
 8001840:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001842:	4b5f      	ldr	r3, [pc, #380]	; (80019c0 <HAL_UART_MspInit+0x20c>)
 8001844:	2200      	movs	r2, #0
 8001846:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001848:	4b5d      	ldr	r3, [pc, #372]	; (80019c0 <HAL_UART_MspInit+0x20c>)
 800184a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800184e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001850:	4b5b      	ldr	r3, [pc, #364]	; (80019c0 <HAL_UART_MspInit+0x20c>)
 8001852:	2200      	movs	r2, #0
 8001854:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001856:	4b5a      	ldr	r3, [pc, #360]	; (80019c0 <HAL_UART_MspInit+0x20c>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800185c:	4b58      	ldr	r3, [pc, #352]	; (80019c0 <HAL_UART_MspInit+0x20c>)
 800185e:	2200      	movs	r2, #0
 8001860:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001862:	4b57      	ldr	r3, [pc, #348]	; (80019c0 <HAL_UART_MspInit+0x20c>)
 8001864:	2200      	movs	r2, #0
 8001866:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001868:	4b55      	ldr	r3, [pc, #340]	; (80019c0 <HAL_UART_MspInit+0x20c>)
 800186a:	2200      	movs	r2, #0
 800186c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800186e:	4854      	ldr	r0, [pc, #336]	; (80019c0 <HAL_UART_MspInit+0x20c>)
 8001870:	f000 fca0 	bl	80021b4 <HAL_DMA_Init>
 8001874:	4603      	mov	r3, r0
 8001876:	2b00      	cmp	r3, #0
 8001878:	d001      	beq.n	800187e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800187a:	f7ff fca5 	bl	80011c8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a4f      	ldr	r2, [pc, #316]	; (80019c0 <HAL_UART_MspInit+0x20c>)
 8001882:	639a      	str	r2, [r3, #56]	; 0x38
 8001884:	4a4e      	ldr	r2, [pc, #312]	; (80019c0 <HAL_UART_MspInit+0x20c>)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2100      	movs	r1, #0
 800188e:	2026      	movs	r0, #38	; 0x26
 8001890:	f000 fc59 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001894:	2026      	movs	r0, #38	; 0x26
 8001896:	f000 fc72 	bl	800217e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800189a:	e086      	b.n	80019aa <HAL_UART_MspInit+0x1f6>
  else if(uartHandle->Instance==USART3)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a49      	ldr	r2, [pc, #292]	; (80019c8 <HAL_UART_MspInit+0x214>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	f040 8081 	bne.w	80019aa <HAL_UART_MspInit+0x1f6>
    __HAL_RCC_USART3_CLK_ENABLE();
 80018a8:	2300      	movs	r3, #0
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	4b42      	ldr	r3, [pc, #264]	; (80019b8 <HAL_UART_MspInit+0x204>)
 80018ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b0:	4a41      	ldr	r2, [pc, #260]	; (80019b8 <HAL_UART_MspInit+0x204>)
 80018b2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018b6:	6413      	str	r3, [r2, #64]	; 0x40
 80018b8:	4b3f      	ldr	r3, [pc, #252]	; (80019b8 <HAL_UART_MspInit+0x204>)
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018c0:	613b      	str	r3, [r7, #16]
 80018c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	4b3b      	ldr	r3, [pc, #236]	; (80019b8 <HAL_UART_MspInit+0x204>)
 80018ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018cc:	4a3a      	ldr	r2, [pc, #232]	; (80019b8 <HAL_UART_MspInit+0x204>)
 80018ce:	f043 0304 	orr.w	r3, r3, #4
 80018d2:	6313      	str	r3, [r2, #48]	; 0x30
 80018d4:	4b38      	ldr	r3, [pc, #224]	; (80019b8 <HAL_UART_MspInit+0x204>)
 80018d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018e0:	2300      	movs	r3, #0
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	4b34      	ldr	r3, [pc, #208]	; (80019b8 <HAL_UART_MspInit+0x204>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e8:	4a33      	ldr	r2, [pc, #204]	; (80019b8 <HAL_UART_MspInit+0x204>)
 80018ea:	f043 0302 	orr.w	r3, r3, #2
 80018ee:	6313      	str	r3, [r2, #48]	; 0x30
 80018f0:	4b31      	ldr	r3, [pc, #196]	; (80019b8 <HAL_UART_MspInit+0x204>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018fc:	2320      	movs	r3, #32
 80018fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001900:	2302      	movs	r3, #2
 8001902:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001904:	2300      	movs	r3, #0
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001908:	2303      	movs	r3, #3
 800190a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800190c:	2307      	movs	r3, #7
 800190e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001910:	f107 031c 	add.w	r3, r7, #28
 8001914:	4619      	mov	r1, r3
 8001916:	482d      	ldr	r0, [pc, #180]	; (80019cc <HAL_UART_MspInit+0x218>)
 8001918:	f001 f84e 	bl	80029b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800191c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001920:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001922:	2302      	movs	r3, #2
 8001924:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001926:	2300      	movs	r3, #0
 8001928:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800192a:	2303      	movs	r3, #3
 800192c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800192e:	2307      	movs	r3, #7
 8001930:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001932:	f107 031c 	add.w	r3, r7, #28
 8001936:	4619      	mov	r1, r3
 8001938:	4825      	ldr	r0, [pc, #148]	; (80019d0 <HAL_UART_MspInit+0x21c>)
 800193a:	f001 f83d 	bl	80029b8 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 800193e:	4b25      	ldr	r3, [pc, #148]	; (80019d4 <HAL_UART_MspInit+0x220>)
 8001940:	4a25      	ldr	r2, [pc, #148]	; (80019d8 <HAL_UART_MspInit+0x224>)
 8001942:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8001944:	4b23      	ldr	r3, [pc, #140]	; (80019d4 <HAL_UART_MspInit+0x220>)
 8001946:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800194a:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800194c:	4b21      	ldr	r3, [pc, #132]	; (80019d4 <HAL_UART_MspInit+0x220>)
 800194e:	2200      	movs	r2, #0
 8001950:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001952:	4b20      	ldr	r3, [pc, #128]	; (80019d4 <HAL_UART_MspInit+0x220>)
 8001954:	2200      	movs	r2, #0
 8001956:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001958:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <HAL_UART_MspInit+0x220>)
 800195a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800195e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001960:	4b1c      	ldr	r3, [pc, #112]	; (80019d4 <HAL_UART_MspInit+0x220>)
 8001962:	2200      	movs	r2, #0
 8001964:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001966:	4b1b      	ldr	r3, [pc, #108]	; (80019d4 <HAL_UART_MspInit+0x220>)
 8001968:	2200      	movs	r2, #0
 800196a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 800196c:	4b19      	ldr	r3, [pc, #100]	; (80019d4 <HAL_UART_MspInit+0x220>)
 800196e:	2200      	movs	r2, #0
 8001970:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001972:	4b18      	ldr	r3, [pc, #96]	; (80019d4 <HAL_UART_MspInit+0x220>)
 8001974:	2200      	movs	r2, #0
 8001976:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001978:	4b16      	ldr	r3, [pc, #88]	; (80019d4 <HAL_UART_MspInit+0x220>)
 800197a:	2200      	movs	r2, #0
 800197c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800197e:	4815      	ldr	r0, [pc, #84]	; (80019d4 <HAL_UART_MspInit+0x220>)
 8001980:	f000 fc18 	bl	80021b4 <HAL_DMA_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <HAL_UART_MspInit+0x1da>
      Error_Handler();
 800198a:	f7ff fc1d 	bl	80011c8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a10      	ldr	r2, [pc, #64]	; (80019d4 <HAL_UART_MspInit+0x220>)
 8001992:	639a      	str	r2, [r3, #56]	; 0x38
 8001994:	4a0f      	ldr	r2, [pc, #60]	; (80019d4 <HAL_UART_MspInit+0x220>)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800199a:	2200      	movs	r2, #0
 800199c:	2100      	movs	r1, #0
 800199e:	2027      	movs	r0, #39	; 0x27
 80019a0:	f000 fbd1 	bl	8002146 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019a4:	2027      	movs	r0, #39	; 0x27
 80019a6:	f000 fbea 	bl	800217e <HAL_NVIC_EnableIRQ>
}
 80019aa:	bf00      	nop
 80019ac:	3730      	adds	r7, #48	; 0x30
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40004400 	.word	0x40004400
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40020000 	.word	0x40020000
 80019c0:	20000250 	.word	0x20000250
 80019c4:	40026088 	.word	0x40026088
 80019c8:	40004800 	.word	0x40004800
 80019cc:	40020800 	.word	0x40020800
 80019d0:	40020400 	.word	0x40020400
 80019d4:	200002b0 	.word	0x200002b0
 80019d8:	40026028 	.word	0x40026028

080019dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80019dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001a14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80019e0:	480d      	ldr	r0, [pc, #52]	; (8001a18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80019e2:	490e      	ldr	r1, [pc, #56]	; (8001a1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80019e4:	4a0e      	ldr	r2, [pc, #56]	; (8001a20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019e8:	e002      	b.n	80019f0 <LoopCopyDataInit>

080019ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019ee:	3304      	adds	r3, #4

080019f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019f4:	d3f9      	bcc.n	80019ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019f6:	4a0b      	ldr	r2, [pc, #44]	; (8001a24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80019f8:	4c0b      	ldr	r4, [pc, #44]	; (8001a28 <LoopFillZerobss+0x26>)
  movs r3, #0
 80019fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019fc:	e001      	b.n	8001a02 <LoopFillZerobss>

080019fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a00:	3204      	adds	r2, #4

08001a02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a04:	d3fb      	bcc.n	80019fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001a06:	f7ff fd1f 	bl	8001448 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001a0a:	f005 f85d 	bl	8006ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001a0e:	f7ff fa63 	bl	8000ed8 <main>
  bx  lr    
 8001a12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001a14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001a18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a1c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001a20:	080078e0 	.word	0x080078e0
  ldr r2, =_sbss
 8001a24:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001a28:	20000460 	.word	0x20000460

08001a2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001a2c:	e7fe      	b.n	8001a2c <ADC_IRQHandler>
	...

08001a30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001a34:	4b0e      	ldr	r3, [pc, #56]	; (8001a70 <HAL_Init+0x40>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4a0d      	ldr	r2, [pc, #52]	; (8001a70 <HAL_Init+0x40>)
 8001a3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001a40:	4b0b      	ldr	r3, [pc, #44]	; (8001a70 <HAL_Init+0x40>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <HAL_Init+0x40>)
 8001a46:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <HAL_Init+0x40>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <HAL_Init+0x40>)
 8001a52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a58:	2003      	movs	r0, #3
 8001a5a:	f000 fb69 	bl	8002130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f000 f808 	bl	8001a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a64:	f7ff fbb6 	bl	80011d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40023c00 	.word	0x40023c00

08001a74 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a7c:	4b12      	ldr	r3, [pc, #72]	; (8001ac8 <HAL_InitTick+0x54>)
 8001a7e:	681a      	ldr	r2, [r3, #0]
 8001a80:	4b12      	ldr	r3, [pc, #72]	; (8001acc <HAL_InitTick+0x58>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	4619      	mov	r1, r3
 8001a86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a92:	4618      	mov	r0, r3
 8001a94:	f000 fb81 	bl	800219a <HAL_SYSTICK_Config>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e00e      	b.n	8001ac0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2b0f      	cmp	r3, #15
 8001aa6:	d80a      	bhi.n	8001abe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	6879      	ldr	r1, [r7, #4]
 8001aac:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab0:	f000 fb49 	bl	8002146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ab4:	4a06      	ldr	r2, [pc, #24]	; (8001ad0 <HAL_InitTick+0x5c>)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aba:	2300      	movs	r3, #0
 8001abc:	e000      	b.n	8001ac0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001abe:	2301      	movs	r3, #1
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	3708      	adds	r7, #8
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	bd80      	pop	{r7, pc}
 8001ac8:	20000008 	.word	0x20000008
 8001acc:	20000010 	.word	0x20000010
 8001ad0:	2000000c 	.word	0x2000000c

08001ad4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ad8:	4b06      	ldr	r3, [pc, #24]	; (8001af4 <HAL_IncTick+0x20>)
 8001ada:	781b      	ldrb	r3, [r3, #0]
 8001adc:	461a      	mov	r2, r3
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_IncTick+0x24>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a04      	ldr	r2, [pc, #16]	; (8001af8 <HAL_IncTick+0x24>)
 8001ae6:	6013      	str	r3, [r2, #0]
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	20000010 	.word	0x20000010
 8001af8:	20000310 	.word	0x20000310

08001afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return uwTick;
 8001b00:	4b03      	ldr	r3, [pc, #12]	; (8001b10 <HAL_GetTick+0x14>)
 8001b02:	681b      	ldr	r3, [r3, #0]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20000310 	.word	0x20000310

08001b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001b1c:	f7ff ffee 	bl	8001afc <HAL_GetTick>
 8001b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b2c:	d005      	beq.n	8001b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001b2e:	4b0a      	ldr	r3, [pc, #40]	; (8001b58 <HAL_Delay+0x44>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	461a      	mov	r2, r3
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4413      	add	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001b3a:	bf00      	nop
 8001b3c:	f7ff ffde 	bl	8001afc <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d8f7      	bhi.n	8001b3c <HAL_Delay+0x28>
  {
  }
}
 8001b4c:	bf00      	nop
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000010 	.word	0x20000010

08001b5c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d101      	bne.n	8001b6e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	e0ed      	b.n	8001d4a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d102      	bne.n	8001b80 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff f858 	bl	8000c30 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	681a      	ldr	r2, [r3, #0]
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f042 0201 	orr.w	r2, r2, #1
 8001b8e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b90:	f7ff ffb4 	bl	8001afc <HAL_GetTick>
 8001b94:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b96:	e012      	b.n	8001bbe <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b98:	f7ff ffb0 	bl	8001afc <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b0a      	cmp	r3, #10
 8001ba4:	d90b      	bls.n	8001bbe <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001baa:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2205      	movs	r2, #5
 8001bb6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e0c5      	b.n	8001d4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	f003 0301 	and.w	r3, r3, #1
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d0e5      	beq.n	8001b98 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f022 0202 	bic.w	r2, r2, #2
 8001bda:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bdc:	f7ff ff8e 	bl	8001afc <HAL_GetTick>
 8001be0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001be2:	e012      	b.n	8001c0a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001be4:	f7ff ff8a 	bl	8001afc <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b0a      	cmp	r3, #10
 8001bf0:	d90b      	bls.n	8001c0a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2205      	movs	r2, #5
 8001c02:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001c06:	2301      	movs	r3, #1
 8001c08:	e09f      	b.n	8001d4a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d1e5      	bne.n	8001be4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7e1b      	ldrb	r3, [r3, #24]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d108      	bne.n	8001c32 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	e007      	b.n	8001c42 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c40:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7e5b      	ldrb	r3, [r3, #25]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d108      	bne.n	8001c5c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	e007      	b.n	8001c6c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001c6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	7e9b      	ldrb	r3, [r3, #26]
 8001c70:	2b01      	cmp	r3, #1
 8001c72:	d108      	bne.n	8001c86 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	681a      	ldr	r2, [r3, #0]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f042 0220 	orr.w	r2, r2, #32
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	e007      	b.n	8001c96 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0220 	bic.w	r2, r2, #32
 8001c94:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	7edb      	ldrb	r3, [r3, #27]
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d108      	bne.n	8001cb0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f022 0210 	bic.w	r2, r2, #16
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	e007      	b.n	8001cc0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0210 	orr.w	r2, r2, #16
 8001cbe:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	7f1b      	ldrb	r3, [r3, #28]
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d108      	bne.n	8001cda <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	681a      	ldr	r2, [r3, #0]
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f042 0208 	orr.w	r2, r2, #8
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	e007      	b.n	8001cea <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f022 0208 	bic.w	r2, r2, #8
 8001ce8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	7f5b      	ldrb	r3, [r3, #29]
 8001cee:	2b01      	cmp	r3, #1
 8001cf0:	d108      	bne.n	8001d04 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f042 0204 	orr.w	r2, r2, #4
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	e007      	b.n	8001d14 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f022 0204 	bic.w	r2, r2, #4
 8001d12:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689a      	ldr	r2, [r3, #8]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	68db      	ldr	r3, [r3, #12]
 8001d1c:	431a      	orrs	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	691b      	ldr	r3, [r3, #16]
 8001d22:	431a      	orrs	r2, r3
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	695b      	ldr	r3, [r3, #20]
 8001d28:	ea42 0103 	orr.w	r1, r2, r3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	1e5a      	subs	r2, r3, #1
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	430a      	orrs	r2, r1
 8001d38:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}

08001d52 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001d52:	b580      	push	{r7, lr}
 8001d54:	b084      	sub	sp, #16
 8001d56:	af00      	add	r7, sp, #0
 8001d58:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d12e      	bne.n	8001dc4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2202      	movs	r2, #2
 8001d6a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	681a      	ldr	r2, [r3, #0]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	f022 0201 	bic.w	r2, r2, #1
 8001d7c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001d7e:	f7ff febd 	bl	8001afc <HAL_GetTick>
 8001d82:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001d84:	e012      	b.n	8001dac <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001d86:	f7ff feb9 	bl	8001afc <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b0a      	cmp	r3, #10
 8001d92:	d90b      	bls.n	8001dac <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d98:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2205      	movs	r2, #5
 8001da4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001da8:	2301      	movs	r3, #1
 8001daa:	e012      	b.n	8001dd2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d1e5      	bne.n	8001d86 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	e006      	b.n	8001dd2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
  }
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}

08001dda <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001dda:	b480      	push	{r7}
 8001ddc:	b089      	sub	sp, #36	; 0x24
 8001dde:	af00      	add	r7, sp, #0
 8001de0:	60f8      	str	r0, [r7, #12]
 8001de2:	60b9      	str	r1, [r7, #8]
 8001de4:	607a      	str	r2, [r7, #4]
 8001de6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001dee:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	689b      	ldr	r3, [r3, #8]
 8001df6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001df8:	7ffb      	ldrb	r3, [r7, #31]
 8001dfa:	2b01      	cmp	r3, #1
 8001dfc:	d003      	beq.n	8001e06 <HAL_CAN_AddTxMessage+0x2c>
 8001dfe:	7ffb      	ldrb	r3, [r7, #31]
 8001e00:	2b02      	cmp	r3, #2
 8001e02:	f040 80b8 	bne.w	8001f76 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d10a      	bne.n	8001e26 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e10:	69bb      	ldr	r3, [r7, #24]
 8001e12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d105      	bne.n	8001e26 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 80a0 	beq.w	8001f66 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	0e1b      	lsrs	r3, r3, #24
 8001e2a:	f003 0303 	and.w	r3, r3, #3
 8001e2e:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	2b02      	cmp	r3, #2
 8001e34:	d907      	bls.n	8001e46 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e3a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e09e      	b.n	8001f84 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001e46:	2201      	movs	r2, #1
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	409a      	lsls	r2, r3
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001e50:	68bb      	ldr	r3, [r7, #8]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10d      	bne.n	8001e74 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001e62:	68f9      	ldr	r1, [r7, #12]
 8001e64:	6809      	ldr	r1, [r1, #0]
 8001e66:	431a      	orrs	r2, r3
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	3318      	adds	r3, #24
 8001e6c:	011b      	lsls	r3, r3, #4
 8001e6e:	440b      	add	r3, r1
 8001e70:	601a      	str	r2, [r3, #0]
 8001e72:	e00f      	b.n	8001e94 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e7e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001e80:	68bb      	ldr	r3, [r7, #8]
 8001e82:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e84:	68f9      	ldr	r1, [r7, #12]
 8001e86:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001e88:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	3318      	adds	r3, #24
 8001e8e:	011b      	lsls	r3, r3, #4
 8001e90:	440b      	add	r3, r1
 8001e92:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	6819      	ldr	r1, [r3, #0]
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	691a      	ldr	r2, [r3, #16]
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	3318      	adds	r3, #24
 8001ea0:	011b      	lsls	r3, r3, #4
 8001ea2:	440b      	add	r3, r1
 8001ea4:	3304      	adds	r3, #4
 8001ea6:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	7d1b      	ldrb	r3, [r3, #20]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d111      	bne.n	8001ed4 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	3318      	adds	r3, #24
 8001eb8:	011b      	lsls	r3, r3, #4
 8001eba:	4413      	add	r3, r2
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	68fa      	ldr	r2, [r7, #12]
 8001ec2:	6811      	ldr	r1, [r2, #0]
 8001ec4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	3318      	adds	r3, #24
 8001ecc:	011b      	lsls	r3, r3, #4
 8001ece:	440b      	add	r3, r1
 8001ed0:	3304      	adds	r3, #4
 8001ed2:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	3307      	adds	r3, #7
 8001ed8:	781b      	ldrb	r3, [r3, #0]
 8001eda:	061a      	lsls	r2, r3, #24
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	3306      	adds	r3, #6
 8001ee0:	781b      	ldrb	r3, [r3, #0]
 8001ee2:	041b      	lsls	r3, r3, #16
 8001ee4:	431a      	orrs	r2, r3
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3305      	adds	r3, #5
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	021b      	lsls	r3, r3, #8
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	3204      	adds	r2, #4
 8001ef4:	7812      	ldrb	r2, [r2, #0]
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	68fa      	ldr	r2, [r7, #12]
 8001efa:	6811      	ldr	r1, [r2, #0]
 8001efc:	ea43 0200 	orr.w	r2, r3, r0
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	011b      	lsls	r3, r3, #4
 8001f04:	440b      	add	r3, r1
 8001f06:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8001f0a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	3303      	adds	r3, #3
 8001f10:	781b      	ldrb	r3, [r3, #0]
 8001f12:	061a      	lsls	r2, r3, #24
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	3302      	adds	r3, #2
 8001f18:	781b      	ldrb	r3, [r3, #0]
 8001f1a:	041b      	lsls	r3, r3, #16
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	3301      	adds	r3, #1
 8001f22:	781b      	ldrb	r3, [r3, #0]
 8001f24:	021b      	lsls	r3, r3, #8
 8001f26:	4313      	orrs	r3, r2
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	7812      	ldrb	r2, [r2, #0]
 8001f2c:	4610      	mov	r0, r2
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	6811      	ldr	r1, [r2, #0]
 8001f32:	ea43 0200 	orr.w	r2, r3, r0
 8001f36:	697b      	ldr	r3, [r7, #20]
 8001f38:	011b      	lsls	r3, r3, #4
 8001f3a:	440b      	add	r3, r1
 8001f3c:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8001f40:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	681a      	ldr	r2, [r3, #0]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	3318      	adds	r3, #24
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	4413      	add	r3, r2
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	68fa      	ldr	r2, [r7, #12]
 8001f52:	6811      	ldr	r1, [r2, #0]
 8001f54:	f043 0201 	orr.w	r2, r3, #1
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	3318      	adds	r3, #24
 8001f5c:	011b      	lsls	r3, r3, #4
 8001f5e:	440b      	add	r3, r1
 8001f60:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8001f62:	2300      	movs	r3, #0
 8001f64:	e00e      	b.n	8001f84 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8001f72:	2301      	movs	r3, #1
 8001f74:	e006      	b.n	8001f84 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
  }
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	3724      	adds	r7, #36	; 0x24
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f003 0307 	and.w	r3, r3, #7
 8001f9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fa2:	68db      	ldr	r3, [r3, #12]
 8001fa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001fa6:	68ba      	ldr	r2, [r7, #8]
 8001fa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001fac:	4013      	ands	r3, r2
 8001fae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001fb8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001fbc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001fc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001fc2:	4a04      	ldr	r2, [pc, #16]	; (8001fd4 <__NVIC_SetPriorityGrouping+0x44>)
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	60d3      	str	r3, [r2, #12]
}
 8001fc8:	bf00      	nop
 8001fca:	3714      	adds	r7, #20
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd2:	4770      	bx	lr
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fdc:	4b04      	ldr	r3, [pc, #16]	; (8001ff0 <__NVIC_GetPriorityGrouping+0x18>)
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	0a1b      	lsrs	r3, r3, #8
 8001fe2:	f003 0307 	and.w	r3, r3, #7
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr
 8001ff0:	e000ed00 	.word	0xe000ed00

08001ff4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ffe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002002:	2b00      	cmp	r3, #0
 8002004:	db0b      	blt.n	800201e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	f003 021f 	and.w	r2, r3, #31
 800200c:	4907      	ldr	r1, [pc, #28]	; (800202c <__NVIC_EnableIRQ+0x38>)
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	095b      	lsrs	r3, r3, #5
 8002014:	2001      	movs	r0, #1
 8002016:	fa00 f202 	lsl.w	r2, r0, r2
 800201a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800201e:	bf00      	nop
 8002020:	370c      	adds	r7, #12
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	e000e100 	.word	0xe000e100

08002030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002030:	b480      	push	{r7}
 8002032:	b083      	sub	sp, #12
 8002034:	af00      	add	r7, sp, #0
 8002036:	4603      	mov	r3, r0
 8002038:	6039      	str	r1, [r7, #0]
 800203a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800203c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002040:	2b00      	cmp	r3, #0
 8002042:	db0a      	blt.n	800205a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	b2da      	uxtb	r2, r3
 8002048:	490c      	ldr	r1, [pc, #48]	; (800207c <__NVIC_SetPriority+0x4c>)
 800204a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800204e:	0112      	lsls	r2, r2, #4
 8002050:	b2d2      	uxtb	r2, r2
 8002052:	440b      	add	r3, r1
 8002054:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002058:	e00a      	b.n	8002070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	b2da      	uxtb	r2, r3
 800205e:	4908      	ldr	r1, [pc, #32]	; (8002080 <__NVIC_SetPriority+0x50>)
 8002060:	79fb      	ldrb	r3, [r7, #7]
 8002062:	f003 030f 	and.w	r3, r3, #15
 8002066:	3b04      	subs	r3, #4
 8002068:	0112      	lsls	r2, r2, #4
 800206a:	b2d2      	uxtb	r2, r2
 800206c:	440b      	add	r3, r1
 800206e:	761a      	strb	r2, [r3, #24]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr
 800207c:	e000e100 	.word	0xe000e100
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	; 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f003 0307 	and.w	r3, r3, #7
 8002096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002098:	69fb      	ldr	r3, [r7, #28]
 800209a:	f1c3 0307 	rsb	r3, r3, #7
 800209e:	2b04      	cmp	r3, #4
 80020a0:	bf28      	it	cs
 80020a2:	2304      	movcs	r3, #4
 80020a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	3304      	adds	r3, #4
 80020aa:	2b06      	cmp	r3, #6
 80020ac:	d902      	bls.n	80020b4 <NVIC_EncodePriority+0x30>
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	3b03      	subs	r3, #3
 80020b2:	e000      	b.n	80020b6 <NVIC_EncodePriority+0x32>
 80020b4:	2300      	movs	r3, #0
 80020b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b8:	f04f 32ff 	mov.w	r2, #4294967295
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	fa02 f303 	lsl.w	r3, r2, r3
 80020c2:	43da      	mvns	r2, r3
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	401a      	ands	r2, r3
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020cc:	f04f 31ff 	mov.w	r1, #4294967295
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	fa01 f303 	lsl.w	r3, r1, r3
 80020d6:	43d9      	mvns	r1, r3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020dc:	4313      	orrs	r3, r2
         );
}
 80020de:	4618      	mov	r0, r3
 80020e0:	3724      	adds	r7, #36	; 0x24
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
	...

080020ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b082      	sub	sp, #8
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	3b01      	subs	r3, #1
 80020f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80020fc:	d301      	bcc.n	8002102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020fe:	2301      	movs	r3, #1
 8002100:	e00f      	b.n	8002122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002102:	4a0a      	ldr	r2, [pc, #40]	; (800212c <SysTick_Config+0x40>)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	3b01      	subs	r3, #1
 8002108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800210a:	210f      	movs	r1, #15
 800210c:	f04f 30ff 	mov.w	r0, #4294967295
 8002110:	f7ff ff8e 	bl	8002030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002114:	4b05      	ldr	r3, [pc, #20]	; (800212c <SysTick_Config+0x40>)
 8002116:	2200      	movs	r2, #0
 8002118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800211a:	4b04      	ldr	r3, [pc, #16]	; (800212c <SysTick_Config+0x40>)
 800211c:	2207      	movs	r2, #7
 800211e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002120:	2300      	movs	r3, #0
}
 8002122:	4618      	mov	r0, r3
 8002124:	3708      	adds	r7, #8
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	e000e010 	.word	0xe000e010

08002130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b082      	sub	sp, #8
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff ff29 	bl	8001f90 <__NVIC_SetPriorityGrouping>
}
 800213e:	bf00      	nop
 8002140:	3708      	adds	r7, #8
 8002142:	46bd      	mov	sp, r7
 8002144:	bd80      	pop	{r7, pc}

08002146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002146:	b580      	push	{r7, lr}
 8002148:	b086      	sub	sp, #24
 800214a:	af00      	add	r7, sp, #0
 800214c:	4603      	mov	r3, r0
 800214e:	60b9      	str	r1, [r7, #8]
 8002150:	607a      	str	r2, [r7, #4]
 8002152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002154:	2300      	movs	r3, #0
 8002156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002158:	f7ff ff3e 	bl	8001fd8 <__NVIC_GetPriorityGrouping>
 800215c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	68b9      	ldr	r1, [r7, #8]
 8002162:	6978      	ldr	r0, [r7, #20]
 8002164:	f7ff ff8e 	bl	8002084 <NVIC_EncodePriority>
 8002168:	4602      	mov	r2, r0
 800216a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216e:	4611      	mov	r1, r2
 8002170:	4618      	mov	r0, r3
 8002172:	f7ff ff5d 	bl	8002030 <__NVIC_SetPriority>
}
 8002176:	bf00      	nop
 8002178:	3718      	adds	r7, #24
 800217a:	46bd      	mov	sp, r7
 800217c:	bd80      	pop	{r7, pc}

0800217e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800217e:	b580      	push	{r7, lr}
 8002180:	b082      	sub	sp, #8
 8002182:	af00      	add	r7, sp, #0
 8002184:	4603      	mov	r3, r0
 8002186:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800218c:	4618      	mov	r0, r3
 800218e:	f7ff ff31 	bl	8001ff4 <__NVIC_EnableIRQ>
}
 8002192:	bf00      	nop
 8002194:	3708      	adds	r7, #8
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}

0800219a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800219a:	b580      	push	{r7, lr}
 800219c:	b082      	sub	sp, #8
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021a2:	6878      	ldr	r0, [r7, #4]
 80021a4:	f7ff ffa2 	bl	80020ec <SysTick_Config>
 80021a8:	4603      	mov	r3, r0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
	...

080021b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b086      	sub	sp, #24
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80021c0:	f7ff fc9c 	bl	8001afc <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d101      	bne.n	80021d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	e099      	b.n	8002304 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2202      	movs	r2, #2
 80021d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	681a      	ldr	r2, [r3, #0]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f022 0201 	bic.w	r2, r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80021f0:	e00f      	b.n	8002212 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80021f2:	f7ff fc83 	bl	8001afc <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b05      	cmp	r3, #5
 80021fe:	d908      	bls.n	8002212 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2220      	movs	r2, #32
 8002204:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	2203      	movs	r2, #3
 800220a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e078      	b.n	8002304 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0301 	and.w	r3, r3, #1
 800221c:	2b00      	cmp	r3, #0
 800221e:	d1e8      	bne.n	80021f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002228:	697a      	ldr	r2, [r7, #20]
 800222a:	4b38      	ldr	r3, [pc, #224]	; (800230c <HAL_DMA_Init+0x158>)
 800222c:	4013      	ands	r3, r2
 800222e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800223e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	691b      	ldr	r3, [r3, #16]
 8002244:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800224a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	699b      	ldr	r3, [r3, #24]
 8002250:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002256:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a1b      	ldr	r3, [r3, #32]
 800225c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800225e:	697a      	ldr	r2, [r7, #20]
 8002260:	4313      	orrs	r3, r2
 8002262:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002268:	2b04      	cmp	r3, #4
 800226a:	d107      	bne.n	800227c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002274:	4313      	orrs	r3, r2
 8002276:	697a      	ldr	r2, [r7, #20]
 8002278:	4313      	orrs	r3, r2
 800227a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	697a      	ldr	r2, [r7, #20]
 8002282:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f023 0307 	bic.w	r3, r3, #7
 8002292:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	697a      	ldr	r2, [r7, #20]
 800229a:	4313      	orrs	r3, r2
 800229c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022a2:	2b04      	cmp	r3, #4
 80022a4:	d117      	bne.n	80022d6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00e      	beq.n	80022d6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f000 fb01 	bl	80028c0 <DMA_CheckFifoParam>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d008      	beq.n	80022d6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2240      	movs	r2, #64	; 0x40
 80022c8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2201      	movs	r2, #1
 80022ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80022d2:	2301      	movs	r3, #1
 80022d4:	e016      	b.n	8002304 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80022de:	6878      	ldr	r0, [r7, #4]
 80022e0:	f000 fab8 	bl	8002854 <DMA_CalcBaseAndBitshift>
 80022e4:	4603      	mov	r3, r0
 80022e6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022ec:	223f      	movs	r2, #63	; 0x3f
 80022ee:	409a      	lsls	r2, r3
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2200      	movs	r2, #0
 80022f8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002302:	2300      	movs	r3, #0
}
 8002304:	4618      	mov	r0, r3
 8002306:	3718      	adds	r7, #24
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	f010803f 	.word	0xf010803f

08002310 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b086      	sub	sp, #24
 8002314:	af00      	add	r7, sp, #0
 8002316:	60f8      	str	r0, [r7, #12]
 8002318:	60b9      	str	r1, [r7, #8]
 800231a:	607a      	str	r2, [r7, #4]
 800231c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800231e:	2300      	movs	r3, #0
 8002320:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002326:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800232e:	2b01      	cmp	r3, #1
 8002330:	d101      	bne.n	8002336 <HAL_DMA_Start_IT+0x26>
 8002332:	2302      	movs	r3, #2
 8002334:	e040      	b.n	80023b8 <HAL_DMA_Start_IT+0xa8>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	2201      	movs	r2, #1
 800233a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002344:	b2db      	uxtb	r3, r3
 8002346:	2b01      	cmp	r3, #1
 8002348:	d12f      	bne.n	80023aa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	2202      	movs	r2, #2
 800234e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2200      	movs	r2, #0
 8002356:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	68b9      	ldr	r1, [r7, #8]
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 fa4a 	bl	80027f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002368:	223f      	movs	r2, #63	; 0x3f
 800236a:	409a      	lsls	r2, r3
 800236c:	693b      	ldr	r3, [r7, #16]
 800236e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f042 0216 	orr.w	r2, r2, #22
 800237e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002384:	2b00      	cmp	r3, #0
 8002386:	d007      	beq.n	8002398 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f042 0208 	orr.w	r2, r2, #8
 8002396:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f042 0201 	orr.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]
 80023a8:	e005      	b.n	80023b6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	2200      	movs	r2, #0
 80023ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80023b2:	2302      	movs	r3, #2
 80023b4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80023b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b084      	sub	sp, #16
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023cc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80023ce:	f7ff fb95 	bl	8001afc <HAL_GetTick>
 80023d2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d008      	beq.n	80023f2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	2280      	movs	r2, #128	; 0x80
 80023e4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80023ee:	2301      	movs	r3, #1
 80023f0:	e052      	b.n	8002498 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681a      	ldr	r2, [r3, #0]
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f022 0216 	bic.w	r2, r2, #22
 8002400:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	695a      	ldr	r2, [r3, #20]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002410:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	2b00      	cmp	r3, #0
 8002418:	d103      	bne.n	8002422 <HAL_DMA_Abort+0x62>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800241e:	2b00      	cmp	r3, #0
 8002420:	d007      	beq.n	8002432 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f022 0208 	bic.w	r2, r2, #8
 8002430:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f022 0201 	bic.w	r2, r2, #1
 8002440:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002442:	e013      	b.n	800246c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002444:	f7ff fb5a 	bl	8001afc <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	68bb      	ldr	r3, [r7, #8]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b05      	cmp	r3, #5
 8002450:	d90c      	bls.n	800246c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2220      	movs	r2, #32
 8002456:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2203      	movs	r2, #3
 800245c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002468:	2303      	movs	r3, #3
 800246a:	e015      	b.n	8002498 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0301 	and.w	r3, r3, #1
 8002476:	2b00      	cmp	r3, #0
 8002478:	d1e4      	bne.n	8002444 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800247e:	223f      	movs	r2, #63	; 0x3f
 8002480:	409a      	lsls	r2, r3
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2201      	movs	r2, #1
 800248a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2200      	movs	r2, #0
 8002492:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3710      	adds	r7, #16
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}

080024a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d004      	beq.n	80024be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2280      	movs	r2, #128	; 0x80
 80024b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80024ba:	2301      	movs	r3, #1
 80024bc:	e00c      	b.n	80024d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2205      	movs	r2, #5
 80024c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0201 	bic.w	r2, r2, #1
 80024d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80024d6:	2300      	movs	r3, #0
}
 80024d8:	4618      	mov	r0, r3
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr

080024e4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80024f0:	4b8e      	ldr	r3, [pc, #568]	; (800272c <HAL_DMA_IRQHandler+0x248>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4a8e      	ldr	r2, [pc, #568]	; (8002730 <HAL_DMA_IRQHandler+0x24c>)
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	0a9b      	lsrs	r3, r3, #10
 80024fc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002502:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800250e:	2208      	movs	r2, #8
 8002510:	409a      	lsls	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	4013      	ands	r3, r2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d01a      	beq.n	8002550 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 0304 	and.w	r3, r3, #4
 8002524:	2b00      	cmp	r3, #0
 8002526:	d013      	beq.n	8002550 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f022 0204 	bic.w	r2, r2, #4
 8002536:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800253c:	2208      	movs	r2, #8
 800253e:	409a      	lsls	r2, r3
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002548:	f043 0201 	orr.w	r2, r3, #1
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002554:	2201      	movs	r2, #1
 8002556:	409a      	lsls	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	4013      	ands	r3, r2
 800255c:	2b00      	cmp	r3, #0
 800255e:	d012      	beq.n	8002586 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	695b      	ldr	r3, [r3, #20]
 8002566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256a:	2b00      	cmp	r3, #0
 800256c:	d00b      	beq.n	8002586 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002572:	2201      	movs	r2, #1
 8002574:	409a      	lsls	r2, r3
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800257e:	f043 0202 	orr.w	r2, r3, #2
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800258a:	2204      	movs	r2, #4
 800258c:	409a      	lsls	r2, r3
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	4013      	ands	r3, r2
 8002592:	2b00      	cmp	r3, #0
 8002594:	d012      	beq.n	80025bc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d00b      	beq.n	80025bc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a8:	2204      	movs	r2, #4
 80025aa:	409a      	lsls	r2, r3
 80025ac:	693b      	ldr	r3, [r7, #16]
 80025ae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b4:	f043 0204 	orr.w	r2, r3, #4
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c0:	2210      	movs	r2, #16
 80025c2:	409a      	lsls	r2, r3
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	4013      	ands	r3, r2
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d043      	beq.n	8002654 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0308 	and.w	r3, r3, #8
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d03c      	beq.n	8002654 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025de:	2210      	movs	r2, #16
 80025e0:	409a      	lsls	r2, r3
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d018      	beq.n	8002626 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d108      	bne.n	8002614 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	2b00      	cmp	r3, #0
 8002608:	d024      	beq.n	8002654 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260e:	6878      	ldr	r0, [r7, #4]
 8002610:	4798      	blx	r3
 8002612:	e01f      	b.n	8002654 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002618:	2b00      	cmp	r3, #0
 800261a:	d01b      	beq.n	8002654 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	4798      	blx	r3
 8002624:	e016      	b.n	8002654 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002630:	2b00      	cmp	r3, #0
 8002632:	d107      	bne.n	8002644 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	681a      	ldr	r2, [r3, #0]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f022 0208 	bic.w	r2, r2, #8
 8002642:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002648:	2b00      	cmp	r3, #0
 800264a:	d003      	beq.n	8002654 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002658:	2220      	movs	r2, #32
 800265a:	409a      	lsls	r2, r3
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	4013      	ands	r3, r2
 8002660:	2b00      	cmp	r3, #0
 8002662:	f000 808f 	beq.w	8002784 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	2b00      	cmp	r3, #0
 8002672:	f000 8087 	beq.w	8002784 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267a:	2220      	movs	r2, #32
 800267c:	409a      	lsls	r2, r3
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002688:	b2db      	uxtb	r3, r3
 800268a:	2b05      	cmp	r3, #5
 800268c:	d136      	bne.n	80026fc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 0216 	bic.w	r2, r2, #22
 800269c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	695a      	ldr	r2, [r3, #20]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026ac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d103      	bne.n	80026be <HAL_DMA_IRQHandler+0x1da>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d007      	beq.n	80026ce <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f022 0208 	bic.w	r2, r2, #8
 80026cc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d2:	223f      	movs	r2, #63	; 0x3f
 80026d4:	409a      	lsls	r2, r3
 80026d6:	693b      	ldr	r3, [r7, #16]
 80026d8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d07e      	beq.n	80027f0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	4798      	blx	r3
        }
        return;
 80026fa:	e079      	b.n	80027f0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d01d      	beq.n	8002746 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d10d      	bne.n	8002734 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800271c:	2b00      	cmp	r3, #0
 800271e:	d031      	beq.n	8002784 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	4798      	blx	r3
 8002728:	e02c      	b.n	8002784 <HAL_DMA_IRQHandler+0x2a0>
 800272a:	bf00      	nop
 800272c:	20000008 	.word	0x20000008
 8002730:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002738:	2b00      	cmp	r3, #0
 800273a:	d023      	beq.n	8002784 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	4798      	blx	r3
 8002744:	e01e      	b.n	8002784 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10f      	bne.n	8002774 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f022 0210 	bic.w	r2, r2, #16
 8002762:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2200      	movs	r2, #0
 8002770:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002788:	2b00      	cmp	r3, #0
 800278a:	d032      	beq.n	80027f2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002790:	f003 0301 	and.w	r3, r3, #1
 8002794:	2b00      	cmp	r3, #0
 8002796:	d022      	beq.n	80027de <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2205      	movs	r2, #5
 800279c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681a      	ldr	r2, [r3, #0]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f022 0201 	bic.w	r2, r2, #1
 80027ae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	3301      	adds	r3, #1
 80027b4:	60bb      	str	r3, [r7, #8]
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	429a      	cmp	r2, r3
 80027ba:	d307      	bcc.n	80027cc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f003 0301 	and.w	r3, r3, #1
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f2      	bne.n	80027b0 <HAL_DMA_IRQHandler+0x2cc>
 80027ca:	e000      	b.n	80027ce <HAL_DMA_IRQHandler+0x2ea>
          break;
 80027cc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d005      	beq.n	80027f2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	4798      	blx	r3
 80027ee:	e000      	b.n	80027f2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80027f0:	bf00      	nop
    }
  }
}
 80027f2:	3718      	adds	r7, #24
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80027f8:	b480      	push	{r7}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	60f8      	str	r0, [r7, #12]
 8002800:	60b9      	str	r1, [r7, #8]
 8002802:	607a      	str	r2, [r7, #4]
 8002804:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002814:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	683a      	ldr	r2, [r7, #0]
 800281c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	2b40      	cmp	r3, #64	; 0x40
 8002824:	d108      	bne.n	8002838 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	68ba      	ldr	r2, [r7, #8]
 8002834:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002836:	e007      	b.n	8002848 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68ba      	ldr	r2, [r7, #8]
 800283e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	60da      	str	r2, [r3, #12]
}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002854:	b480      	push	{r7}
 8002856:	b085      	sub	sp, #20
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	b2db      	uxtb	r3, r3
 8002862:	3b10      	subs	r3, #16
 8002864:	4a14      	ldr	r2, [pc, #80]	; (80028b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002866:	fba2 2303 	umull	r2, r3, r2, r3
 800286a:	091b      	lsrs	r3, r3, #4
 800286c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800286e:	4a13      	ldr	r2, [pc, #76]	; (80028bc <DMA_CalcBaseAndBitshift+0x68>)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	4413      	add	r3, r2
 8002874:	781b      	ldrb	r3, [r3, #0]
 8002876:	461a      	mov	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b03      	cmp	r3, #3
 8002880:	d909      	bls.n	8002896 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800288a:	f023 0303 	bic.w	r3, r3, #3
 800288e:	1d1a      	adds	r2, r3, #4
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	659a      	str	r2, [r3, #88]	; 0x58
 8002894:	e007      	b.n	80028a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800289e:	f023 0303 	bic.w	r3, r3, #3
 80028a2:	687a      	ldr	r2, [r7, #4]
 80028a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3714      	adds	r7, #20
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr
 80028b6:	bf00      	nop
 80028b8:	aaaaaaab 	.word	0xaaaaaaab
 80028bc:	08007794 	.word	0x08007794

080028c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b085      	sub	sp, #20
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80028c8:	2300      	movs	r3, #0
 80028ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d11f      	bne.n	800291a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2b03      	cmp	r3, #3
 80028de:	d856      	bhi.n	800298e <DMA_CheckFifoParam+0xce>
 80028e0:	a201      	add	r2, pc, #4	; (adr r2, 80028e8 <DMA_CheckFifoParam+0x28>)
 80028e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028e6:	bf00      	nop
 80028e8:	080028f9 	.word	0x080028f9
 80028ec:	0800290b 	.word	0x0800290b
 80028f0:	080028f9 	.word	0x080028f9
 80028f4:	0800298f 	.word	0x0800298f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d046      	beq.n	8002992 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002908:	e043      	b.n	8002992 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002912:	d140      	bne.n	8002996 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002914:	2301      	movs	r3, #1
 8002916:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002918:	e03d      	b.n	8002996 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	699b      	ldr	r3, [r3, #24]
 800291e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002922:	d121      	bne.n	8002968 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b03      	cmp	r3, #3
 8002928:	d837      	bhi.n	800299a <DMA_CheckFifoParam+0xda>
 800292a:	a201      	add	r2, pc, #4	; (adr r2, 8002930 <DMA_CheckFifoParam+0x70>)
 800292c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002930:	08002941 	.word	0x08002941
 8002934:	08002947 	.word	0x08002947
 8002938:	08002941 	.word	0x08002941
 800293c:	08002959 	.word	0x08002959
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002940:	2301      	movs	r3, #1
 8002942:	73fb      	strb	r3, [r7, #15]
      break;
 8002944:	e030      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800294a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d025      	beq.n	800299e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002956:	e022      	b.n	800299e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002960:	d11f      	bne.n	80029a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002966:	e01c      	b.n	80029a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b02      	cmp	r3, #2
 800296c:	d903      	bls.n	8002976 <DMA_CheckFifoParam+0xb6>
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b03      	cmp	r3, #3
 8002972:	d003      	beq.n	800297c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002974:	e018      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	73fb      	strb	r3, [r7, #15]
      break;
 800297a:	e015      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002980:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00e      	beq.n	80029a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002988:	2301      	movs	r3, #1
 800298a:	73fb      	strb	r3, [r7, #15]
      break;
 800298c:	e00b      	b.n	80029a6 <DMA_CheckFifoParam+0xe6>
      break;
 800298e:	bf00      	nop
 8002990:	e00a      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002992:	bf00      	nop
 8002994:	e008      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002996:	bf00      	nop
 8002998:	e006      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
      break;
 800299a:	bf00      	nop
 800299c:	e004      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
      break;
 800299e:	bf00      	nop
 80029a0:	e002      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80029a2:	bf00      	nop
 80029a4:	e000      	b.n	80029a8 <DMA_CheckFifoParam+0xe8>
      break;
 80029a6:	bf00      	nop
    }
  } 
  
  return status; 
 80029a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3714      	adds	r7, #20
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr
 80029b6:	bf00      	nop

080029b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b089      	sub	sp, #36	; 0x24
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029c2:	2300      	movs	r3, #0
 80029c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029c6:	2300      	movs	r3, #0
 80029c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029ca:	2300      	movs	r3, #0
 80029cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029ce:	2300      	movs	r3, #0
 80029d0:	61fb      	str	r3, [r7, #28]
 80029d2:	e165      	b.n	8002ca0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029d4:	2201      	movs	r2, #1
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	697a      	ldr	r2, [r7, #20]
 80029e4:	4013      	ands	r3, r2
 80029e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	f040 8154 	bne.w	8002c9a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f003 0303 	and.w	r3, r3, #3
 80029fa:	2b01      	cmp	r3, #1
 80029fc:	d005      	beq.n	8002a0a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d130      	bne.n	8002a6c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	005b      	lsls	r3, r3, #1
 8002a14:	2203      	movs	r2, #3
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	68da      	ldr	r2, [r3, #12]
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4313      	orrs	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	69ba      	ldr	r2, [r7, #24]
 8002a38:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a40:	2201      	movs	r2, #1
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 0201 	and.w	r2, r3, #1
 8002a5a:	69fb      	ldr	r3, [r7, #28]
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	69ba      	ldr	r2, [r7, #24]
 8002a62:	4313      	orrs	r3, r2
 8002a64:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	69ba      	ldr	r2, [r7, #24]
 8002a6a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	685b      	ldr	r3, [r3, #4]
 8002a70:	f003 0303 	and.w	r3, r3, #3
 8002a74:	2b03      	cmp	r3, #3
 8002a76:	d017      	beq.n	8002aa8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a7e:	69fb      	ldr	r3, [r7, #28]
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	2203      	movs	r2, #3
 8002a84:	fa02 f303 	lsl.w	r3, r2, r3
 8002a88:	43db      	mvns	r3, r3
 8002a8a:	69ba      	ldr	r2, [r7, #24]
 8002a8c:	4013      	ands	r3, r2
 8002a8e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	689a      	ldr	r2, [r3, #8]
 8002a94:	69fb      	ldr	r3, [r7, #28]
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	fa02 f303 	lsl.w	r3, r2, r3
 8002a9c:	69ba      	ldr	r2, [r7, #24]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	69ba      	ldr	r2, [r7, #24]
 8002aa6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f003 0303 	and.w	r3, r3, #3
 8002ab0:	2b02      	cmp	r3, #2
 8002ab2:	d123      	bne.n	8002afc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	08da      	lsrs	r2, r3, #3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3208      	adds	r2, #8
 8002abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	f003 0307 	and.w	r3, r3, #7
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	220f      	movs	r2, #15
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	43db      	mvns	r3, r3
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	691a      	ldr	r2, [r3, #16]
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	009b      	lsls	r3, r3, #2
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	08da      	lsrs	r2, r3, #3
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	3208      	adds	r2, #8
 8002af6:	69b9      	ldr	r1, [r7, #24]
 8002af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b02:	69fb      	ldr	r3, [r7, #28]
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	2203      	movs	r2, #3
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	43db      	mvns	r3, r3
 8002b0e:	69ba      	ldr	r2, [r7, #24]
 8002b10:	4013      	ands	r3, r2
 8002b12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f003 0203 	and.w	r2, r3, #3
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	005b      	lsls	r3, r3, #1
 8002b20:	fa02 f303 	lsl.w	r3, r2, r3
 8002b24:	69ba      	ldr	r2, [r7, #24]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 80ae 	beq.w	8002c9a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b3e:	2300      	movs	r3, #0
 8002b40:	60fb      	str	r3, [r7, #12]
 8002b42:	4b5d      	ldr	r3, [pc, #372]	; (8002cb8 <HAL_GPIO_Init+0x300>)
 8002b44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b46:	4a5c      	ldr	r2, [pc, #368]	; (8002cb8 <HAL_GPIO_Init+0x300>)
 8002b48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002b4e:	4b5a      	ldr	r3, [pc, #360]	; (8002cb8 <HAL_GPIO_Init+0x300>)
 8002b50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b5a:	4a58      	ldr	r2, [pc, #352]	; (8002cbc <HAL_GPIO_Init+0x304>)
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	089b      	lsrs	r3, r3, #2
 8002b60:	3302      	adds	r3, #2
 8002b62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	f003 0303 	and.w	r3, r3, #3
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	220f      	movs	r2, #15
 8002b72:	fa02 f303 	lsl.w	r3, r2, r3
 8002b76:	43db      	mvns	r3, r3
 8002b78:	69ba      	ldr	r2, [r7, #24]
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a4f      	ldr	r2, [pc, #316]	; (8002cc0 <HAL_GPIO_Init+0x308>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d025      	beq.n	8002bd2 <HAL_GPIO_Init+0x21a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a4e      	ldr	r2, [pc, #312]	; (8002cc4 <HAL_GPIO_Init+0x30c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d01f      	beq.n	8002bce <HAL_GPIO_Init+0x216>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a4d      	ldr	r2, [pc, #308]	; (8002cc8 <HAL_GPIO_Init+0x310>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d019      	beq.n	8002bca <HAL_GPIO_Init+0x212>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a4c      	ldr	r2, [pc, #304]	; (8002ccc <HAL_GPIO_Init+0x314>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d013      	beq.n	8002bc6 <HAL_GPIO_Init+0x20e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a4b      	ldr	r2, [pc, #300]	; (8002cd0 <HAL_GPIO_Init+0x318>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d00d      	beq.n	8002bc2 <HAL_GPIO_Init+0x20a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a4a      	ldr	r2, [pc, #296]	; (8002cd4 <HAL_GPIO_Init+0x31c>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d007      	beq.n	8002bbe <HAL_GPIO_Init+0x206>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a49      	ldr	r2, [pc, #292]	; (8002cd8 <HAL_GPIO_Init+0x320>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d101      	bne.n	8002bba <HAL_GPIO_Init+0x202>
 8002bb6:	2306      	movs	r3, #6
 8002bb8:	e00c      	b.n	8002bd4 <HAL_GPIO_Init+0x21c>
 8002bba:	2307      	movs	r3, #7
 8002bbc:	e00a      	b.n	8002bd4 <HAL_GPIO_Init+0x21c>
 8002bbe:	2305      	movs	r3, #5
 8002bc0:	e008      	b.n	8002bd4 <HAL_GPIO_Init+0x21c>
 8002bc2:	2304      	movs	r3, #4
 8002bc4:	e006      	b.n	8002bd4 <HAL_GPIO_Init+0x21c>
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e004      	b.n	8002bd4 <HAL_GPIO_Init+0x21c>
 8002bca:	2302      	movs	r3, #2
 8002bcc:	e002      	b.n	8002bd4 <HAL_GPIO_Init+0x21c>
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e000      	b.n	8002bd4 <HAL_GPIO_Init+0x21c>
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	69fa      	ldr	r2, [r7, #28]
 8002bd6:	f002 0203 	and.w	r2, r2, #3
 8002bda:	0092      	lsls	r2, r2, #2
 8002bdc:	4093      	lsls	r3, r2
 8002bde:	69ba      	ldr	r2, [r7, #24]
 8002be0:	4313      	orrs	r3, r2
 8002be2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002be4:	4935      	ldr	r1, [pc, #212]	; (8002cbc <HAL_GPIO_Init+0x304>)
 8002be6:	69fb      	ldr	r3, [r7, #28]
 8002be8:	089b      	lsrs	r3, r3, #2
 8002bea:	3302      	adds	r3, #2
 8002bec:	69ba      	ldr	r2, [r7, #24]
 8002bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bf2:	4b3a      	ldr	r3, [pc, #232]	; (8002cdc <HAL_GPIO_Init+0x324>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d003      	beq.n	8002c16 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	693b      	ldr	r3, [r7, #16]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c16:	4a31      	ldr	r2, [pc, #196]	; (8002cdc <HAL_GPIO_Init+0x324>)
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c1c:	4b2f      	ldr	r3, [pc, #188]	; (8002cdc <HAL_GPIO_Init+0x324>)
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	43db      	mvns	r3, r3
 8002c26:	69ba      	ldr	r2, [r7, #24]
 8002c28:	4013      	ands	r3, r2
 8002c2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d003      	beq.n	8002c40 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002c38:	69ba      	ldr	r2, [r7, #24]
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c40:	4a26      	ldr	r2, [pc, #152]	; (8002cdc <HAL_GPIO_Init+0x324>)
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c46:	4b25      	ldr	r3, [pc, #148]	; (8002cdc <HAL_GPIO_Init+0x324>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c4c:	693b      	ldr	r3, [r7, #16]
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	4013      	ands	r3, r2
 8002c54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c56:	683b      	ldr	r3, [r7, #0]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d003      	beq.n	8002c6a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c6a:	4a1c      	ldr	r2, [pc, #112]	; (8002cdc <HAL_GPIO_Init+0x324>)
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c70:	4b1a      	ldr	r3, [pc, #104]	; (8002cdc <HAL_GPIO_Init+0x324>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c76:	693b      	ldr	r3, [r7, #16]
 8002c78:	43db      	mvns	r3, r3
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	4013      	ands	r3, r2
 8002c7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d003      	beq.n	8002c94 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	4313      	orrs	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c94:	4a11      	ldr	r2, [pc, #68]	; (8002cdc <HAL_GPIO_Init+0x324>)
 8002c96:	69bb      	ldr	r3, [r7, #24]
 8002c98:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	61fb      	str	r3, [r7, #28]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	2b0f      	cmp	r3, #15
 8002ca4:	f67f ae96 	bls.w	80029d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002ca8:	bf00      	nop
 8002caa:	bf00      	nop
 8002cac:	3724      	adds	r7, #36	; 0x24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	40013800 	.word	0x40013800
 8002cc0:	40020000 	.word	0x40020000
 8002cc4:	40020400 	.word	0x40020400
 8002cc8:	40020800 	.word	0x40020800
 8002ccc:	40020c00 	.word	0x40020c00
 8002cd0:	40021000 	.word	0x40021000
 8002cd4:	40021400 	.word	0x40021400
 8002cd8:	40021800 	.word	0x40021800
 8002cdc:	40013c00 	.word	0x40013c00

08002ce0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b083      	sub	sp, #12
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	460b      	mov	r3, r1
 8002cea:	807b      	strh	r3, [r7, #2]
 8002cec:	4613      	mov	r3, r2
 8002cee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cf0:	787b      	ldrb	r3, [r7, #1]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d003      	beq.n	8002cfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cf6:	887a      	ldrh	r2, [r7, #2]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cfc:	e003      	b.n	8002d06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cfe:	887b      	ldrh	r3, [r7, #2]
 8002d00:	041a      	lsls	r2, r3, #16
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	619a      	str	r2, [r3, #24]
}
 8002d06:	bf00      	nop
 8002d08:	370c      	adds	r7, #12
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
	...

08002d14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e12b      	b.n	8002f7e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d2c:	b2db      	uxtb	r3, r3
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d106      	bne.n	8002d40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2200      	movs	r2, #0
 8002d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f7fe f884 	bl	8000e48 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2224      	movs	r2, #36	; 0x24
 8002d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	681a      	ldr	r2, [r3, #0]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f022 0201 	bic.w	r2, r2, #1
 8002d56:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d66:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d76:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002d78:	f001 f8a4 	bl	8003ec4 <HAL_RCC_GetPCLK1Freq>
 8002d7c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	4a81      	ldr	r2, [pc, #516]	; (8002f88 <HAL_I2C_Init+0x274>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d807      	bhi.n	8002d98 <HAL_I2C_Init+0x84>
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	4a80      	ldr	r2, [pc, #512]	; (8002f8c <HAL_I2C_Init+0x278>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	bf94      	ite	ls
 8002d90:	2301      	movls	r3, #1
 8002d92:	2300      	movhi	r3, #0
 8002d94:	b2db      	uxtb	r3, r3
 8002d96:	e006      	b.n	8002da6 <HAL_I2C_Init+0x92>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	4a7d      	ldr	r2, [pc, #500]	; (8002f90 <HAL_I2C_Init+0x27c>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	bf94      	ite	ls
 8002da0:	2301      	movls	r3, #1
 8002da2:	2300      	movhi	r3, #0
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e0e7      	b.n	8002f7e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4a78      	ldr	r2, [pc, #480]	; (8002f94 <HAL_I2C_Init+0x280>)
 8002db2:	fba2 2303 	umull	r2, r3, r2, r3
 8002db6:	0c9b      	lsrs	r3, r3, #18
 8002db8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68ba      	ldr	r2, [r7, #8]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	4a6a      	ldr	r2, [pc, #424]	; (8002f88 <HAL_I2C_Init+0x274>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d802      	bhi.n	8002de8 <HAL_I2C_Init+0xd4>
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	3301      	adds	r3, #1
 8002de6:	e009      	b.n	8002dfc <HAL_I2C_Init+0xe8>
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002dee:	fb02 f303 	mul.w	r3, r2, r3
 8002df2:	4a69      	ldr	r2, [pc, #420]	; (8002f98 <HAL_I2C_Init+0x284>)
 8002df4:	fba2 2303 	umull	r2, r3, r2, r3
 8002df8:	099b      	lsrs	r3, r3, #6
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	6812      	ldr	r2, [r2, #0]
 8002e00:	430b      	orrs	r3, r1
 8002e02:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	69db      	ldr	r3, [r3, #28]
 8002e0a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002e0e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	495c      	ldr	r1, [pc, #368]	; (8002f88 <HAL_I2C_Init+0x274>)
 8002e18:	428b      	cmp	r3, r1
 8002e1a:	d819      	bhi.n	8002e50 <HAL_I2C_Init+0x13c>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	1e59      	subs	r1, r3, #1
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e2a:	1c59      	adds	r1, r3, #1
 8002e2c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002e30:	400b      	ands	r3, r1
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d00a      	beq.n	8002e4c <HAL_I2C_Init+0x138>
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	1e59      	subs	r1, r3, #1
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	005b      	lsls	r3, r3, #1
 8002e40:	fbb1 f3f3 	udiv	r3, r1, r3
 8002e44:	3301      	adds	r3, #1
 8002e46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e4a:	e051      	b.n	8002ef0 <HAL_I2C_Init+0x1dc>
 8002e4c:	2304      	movs	r3, #4
 8002e4e:	e04f      	b.n	8002ef0 <HAL_I2C_Init+0x1dc>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d111      	bne.n	8002e7c <HAL_I2C_Init+0x168>
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1e58      	subs	r0, r3, #1
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	6859      	ldr	r1, [r3, #4]
 8002e60:	460b      	mov	r3, r1
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	440b      	add	r3, r1
 8002e66:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e6a:	3301      	adds	r3, #1
 8002e6c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	bf0c      	ite	eq
 8002e74:	2301      	moveq	r3, #1
 8002e76:	2300      	movne	r3, #0
 8002e78:	b2db      	uxtb	r3, r3
 8002e7a:	e012      	b.n	8002ea2 <HAL_I2C_Init+0x18e>
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1e58      	subs	r0, r3, #1
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6859      	ldr	r1, [r3, #4]
 8002e84:	460b      	mov	r3, r1
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	0099      	lsls	r1, r3, #2
 8002e8c:	440b      	add	r3, r1
 8002e8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002e92:	3301      	adds	r3, #1
 8002e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	bf0c      	ite	eq
 8002e9c:	2301      	moveq	r3, #1
 8002e9e:	2300      	movne	r3, #0
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_I2C_Init+0x196>
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e022      	b.n	8002ef0 <HAL_I2C_Init+0x1dc>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d10e      	bne.n	8002ed0 <HAL_I2C_Init+0x1bc>
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	1e58      	subs	r0, r3, #1
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6859      	ldr	r1, [r3, #4]
 8002eba:	460b      	mov	r3, r1
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	440b      	add	r3, r1
 8002ec0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ece:	e00f      	b.n	8002ef0 <HAL_I2C_Init+0x1dc>
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	1e58      	subs	r0, r3, #1
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6859      	ldr	r1, [r3, #4]
 8002ed8:	460b      	mov	r3, r1
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	0099      	lsls	r1, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ee6:	3301      	adds	r3, #1
 8002ee8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eec:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	6809      	ldr	r1, [r1, #0]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	69da      	ldr	r2, [r3, #28]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6a1b      	ldr	r3, [r3, #32]
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	430a      	orrs	r2, r1
 8002f12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002f1e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	6911      	ldr	r1, [r2, #16]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	68d2      	ldr	r2, [r2, #12]
 8002f2a:	4311      	orrs	r1, r2
 8002f2c:	687a      	ldr	r2, [r7, #4]
 8002f2e:	6812      	ldr	r2, [r2, #0]
 8002f30:	430b      	orrs	r3, r1
 8002f32:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	68db      	ldr	r3, [r3, #12]
 8002f3a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	695a      	ldr	r2, [r3, #20]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	699b      	ldr	r3, [r3, #24]
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f042 0201 	orr.w	r2, r2, #1
 8002f5e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2200      	movs	r2, #0
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3710      	adds	r7, #16
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	000186a0 	.word	0x000186a0
 8002f8c:	001e847f 	.word	0x001e847f
 8002f90:	003d08ff 	.word	0x003d08ff
 8002f94:	431bde83 	.word	0x431bde83
 8002f98:	10624dd3 	.word	0x10624dd3

08002f9c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af02      	add	r7, sp, #8
 8002fa2:	60f8      	str	r0, [r7, #12]
 8002fa4:	607a      	str	r2, [r7, #4]
 8002fa6:	461a      	mov	r2, r3
 8002fa8:	460b      	mov	r3, r1
 8002faa:	817b      	strh	r3, [r7, #10]
 8002fac:	4613      	mov	r3, r2
 8002fae:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002fb0:	f7fe fda4 	bl	8001afc <HAL_GetTick>
 8002fb4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fbc:	b2db      	uxtb	r3, r3
 8002fbe:	2b20      	cmp	r3, #32
 8002fc0:	f040 80e0 	bne.w	8003184 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	9300      	str	r3, [sp, #0]
 8002fc8:	2319      	movs	r3, #25
 8002fca:	2201      	movs	r2, #1
 8002fcc:	4970      	ldr	r1, [pc, #448]	; (8003190 <HAL_I2C_Master_Transmit+0x1f4>)
 8002fce:	68f8      	ldr	r0, [r7, #12]
 8002fd0:	f000 fc58 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d001      	beq.n	8002fde <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002fda:	2302      	movs	r3, #2
 8002fdc:	e0d3      	b.n	8003186 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_I2C_Master_Transmit+0x50>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e0cc      	b.n	8003186 <HAL_I2C_Master_Transmit+0x1ea>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0301 	and.w	r3, r3, #1
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d007      	beq.n	8003012 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	681a      	ldr	r2, [r3, #0]
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f042 0201 	orr.w	r2, r2, #1
 8003010:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681a      	ldr	r2, [r3, #0]
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003020:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2221      	movs	r2, #33	; 0x21
 8003026:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	2210      	movs	r2, #16
 800302e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	2200      	movs	r2, #0
 8003036:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	893a      	ldrh	r2, [r7, #8]
 8003042:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003048:	b29a      	uxth	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	4a50      	ldr	r2, [pc, #320]	; (8003194 <HAL_I2C_Master_Transmit+0x1f8>)
 8003052:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003054:	8979      	ldrh	r1, [r7, #10]
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	6a3a      	ldr	r2, [r7, #32]
 800305a:	68f8      	ldr	r0, [r7, #12]
 800305c:	f000 fac2 	bl	80035e4 <I2C_MasterRequestWrite>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e08d      	b.n	8003186 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800306a:	2300      	movs	r3, #0
 800306c:	613b      	str	r3, [r7, #16]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	695b      	ldr	r3, [r3, #20]
 8003074:	613b      	str	r3, [r7, #16]
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	613b      	str	r3, [r7, #16]
 800307e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003080:	e066      	b.n	8003150 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	6a39      	ldr	r1, [r7, #32]
 8003086:	68f8      	ldr	r0, [r7, #12]
 8003088:	f000 fcd2 	bl	8003a30 <I2C_WaitOnTXEFlagUntilTimeout>
 800308c:	4603      	mov	r3, r0
 800308e:	2b00      	cmp	r3, #0
 8003090:	d00d      	beq.n	80030ae <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	2b04      	cmp	r3, #4
 8003098:	d107      	bne.n	80030aa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80030a8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80030aa:	2301      	movs	r3, #1
 80030ac:	e06b      	b.n	8003186 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b2:	781a      	ldrb	r2, [r3, #0]
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030be:	1c5a      	adds	r2, r3, #1
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	3b01      	subs	r3, #1
 80030cc:	b29a      	uxth	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b29a      	uxth	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	695b      	ldr	r3, [r3, #20]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b04      	cmp	r3, #4
 80030ea:	d11b      	bne.n	8003124 <HAL_I2C_Master_Transmit+0x188>
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d017      	beq.n	8003124 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030f8:	781a      	ldrb	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	1c5a      	adds	r2, r3, #1
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800310e:	b29b      	uxth	r3, r3
 8003110:	3b01      	subs	r3, #1
 8003112:	b29a      	uxth	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800311c:	3b01      	subs	r3, #1
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003124:	697a      	ldr	r2, [r7, #20]
 8003126:	6a39      	ldr	r1, [r7, #32]
 8003128:	68f8      	ldr	r0, [r7, #12]
 800312a:	f000 fcc2 	bl	8003ab2 <I2C_WaitOnBTFFlagUntilTimeout>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00d      	beq.n	8003150 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003138:	2b04      	cmp	r3, #4
 800313a:	d107      	bne.n	800314c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800314a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e01a      	b.n	8003186 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003154:	2b00      	cmp	r3, #0
 8003156:	d194      	bne.n	8003082 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003166:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2220      	movs	r2, #32
 800316c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2200      	movs	r2, #0
 8003174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2200      	movs	r2, #0
 800317c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003180:	2300      	movs	r3, #0
 8003182:	e000      	b.n	8003186 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003184:	2302      	movs	r3, #2
  }
}
 8003186:	4618      	mov	r0, r3
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	00100002 	.word	0x00100002
 8003194:	ffff0000 	.word	0xffff0000

08003198 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b08c      	sub	sp, #48	; 0x30
 800319c:	af02      	add	r7, sp, #8
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	607a      	str	r2, [r7, #4]
 80031a2:	461a      	mov	r2, r3
 80031a4:	460b      	mov	r3, r1
 80031a6:	817b      	strh	r3, [r7, #10]
 80031a8:	4613      	mov	r3, r2
 80031aa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80031ac:	f7fe fca6 	bl	8001afc <HAL_GetTick>
 80031b0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b20      	cmp	r3, #32
 80031bc:	f040 820b 	bne.w	80035d6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80031c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c2:	9300      	str	r3, [sp, #0]
 80031c4:	2319      	movs	r3, #25
 80031c6:	2201      	movs	r2, #1
 80031c8:	497c      	ldr	r1, [pc, #496]	; (80033bc <HAL_I2C_Master_Receive+0x224>)
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f000 fb5a 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d001      	beq.n	80031da <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80031d6:	2302      	movs	r3, #2
 80031d8:	e1fe      	b.n	80035d8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_I2C_Master_Receive+0x50>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e1f7      	b.n	80035d8 <HAL_I2C_Master_Receive+0x440>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 0301 	and.w	r3, r3, #1
 80031fa:	2b01      	cmp	r3, #1
 80031fc:	d007      	beq.n	800320e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f042 0201 	orr.w	r2, r2, #1
 800320c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800321c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	2222      	movs	r2, #34	; 0x22
 8003222:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2210      	movs	r2, #16
 800322a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2200      	movs	r2, #0
 8003232:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	893a      	ldrh	r2, [r7, #8]
 800323e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003244:	b29a      	uxth	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	4a5c      	ldr	r2, [pc, #368]	; (80033c0 <HAL_I2C_Master_Receive+0x228>)
 800324e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003250:	8979      	ldrh	r1, [r7, #10]
 8003252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003256:	68f8      	ldr	r0, [r7, #12]
 8003258:	f000 fa46 	bl	80036e8 <I2C_MasterRequestRead>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d001      	beq.n	8003266 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003262:	2301      	movs	r3, #1
 8003264:	e1b8      	b.n	80035d8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326a:	2b00      	cmp	r3, #0
 800326c:	d113      	bne.n	8003296 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800326e:	2300      	movs	r3, #0
 8003270:	623b      	str	r3, [r7, #32]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	695b      	ldr	r3, [r3, #20]
 8003278:	623b      	str	r3, [r7, #32]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	699b      	ldr	r3, [r3, #24]
 8003280:	623b      	str	r3, [r7, #32]
 8003282:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	681a      	ldr	r2, [r3, #0]
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003292:	601a      	str	r2, [r3, #0]
 8003294:	e18c      	b.n	80035b0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800329a:	2b01      	cmp	r3, #1
 800329c:	d11b      	bne.n	80032d6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	681a      	ldr	r2, [r3, #0]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ac:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ae:	2300      	movs	r3, #0
 80032b0:	61fb      	str	r3, [r7, #28]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	695b      	ldr	r3, [r3, #20]
 80032b8:	61fb      	str	r3, [r7, #28]
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	61fb      	str	r3, [r7, #28]
 80032c2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	681a      	ldr	r2, [r3, #0]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80032d2:	601a      	str	r2, [r3, #0]
 80032d4:	e16c      	b.n	80035b0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d11b      	bne.n	8003316 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032ec:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032fe:	2300      	movs	r3, #0
 8003300:	61bb      	str	r3, [r7, #24]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	695b      	ldr	r3, [r3, #20]
 8003308:	61bb      	str	r3, [r7, #24]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699b      	ldr	r3, [r3, #24]
 8003310:	61bb      	str	r3, [r7, #24]
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	e14c      	b.n	80035b0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	681a      	ldr	r2, [r3, #0]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003324:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003326:	2300      	movs	r3, #0
 8003328:	617b      	str	r3, [r7, #20]
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	695b      	ldr	r3, [r3, #20]
 8003330:	617b      	str	r3, [r7, #20]
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	699b      	ldr	r3, [r3, #24]
 8003338:	617b      	str	r3, [r7, #20]
 800333a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800333c:	e138      	b.n	80035b0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003342:	2b03      	cmp	r3, #3
 8003344:	f200 80f1 	bhi.w	800352a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800334c:	2b01      	cmp	r3, #1
 800334e:	d123      	bne.n	8003398 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003350:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003352:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003354:	68f8      	ldr	r0, [r7, #12]
 8003356:	f000 fbed 	bl	8003b34 <I2C_WaitOnRXNEFlagUntilTimeout>
 800335a:	4603      	mov	r3, r0
 800335c:	2b00      	cmp	r3, #0
 800335e:	d001      	beq.n	8003364 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e139      	b.n	80035d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	691a      	ldr	r2, [r3, #16]
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	b2d2      	uxtb	r2, r2
 8003370:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003376:	1c5a      	adds	r2, r3, #1
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003396:	e10b      	b.n	80035b0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800339c:	2b02      	cmp	r3, #2
 800339e:	d14e      	bne.n	800343e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	9300      	str	r3, [sp, #0]
 80033a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033a6:	2200      	movs	r2, #0
 80033a8:	4906      	ldr	r1, [pc, #24]	; (80033c4 <HAL_I2C_Master_Receive+0x22c>)
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 fa6a 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d008      	beq.n	80033c8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e10e      	b.n	80035d8 <HAL_I2C_Master_Receive+0x440>
 80033ba:	bf00      	nop
 80033bc:	00100002 	.word	0x00100002
 80033c0:	ffff0000 	.word	0xffff0000
 80033c4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033d6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	691a      	ldr	r2, [r3, #16]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e2:	b2d2      	uxtb	r2, r2
 80033e4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	1c5a      	adds	r2, r3, #1
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f4:	3b01      	subs	r3, #1
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003400:	b29b      	uxth	r3, r3
 8003402:	3b01      	subs	r3, #1
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	691a      	ldr	r2, [r3, #16]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003414:	b2d2      	uxtb	r2, r2
 8003416:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800341c:	1c5a      	adds	r2, r3, #1
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003432:	b29b      	uxth	r3, r3
 8003434:	3b01      	subs	r3, #1
 8003436:	b29a      	uxth	r2, r3
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800343c:	e0b8      	b.n	80035b0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800343e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003440:	9300      	str	r3, [sp, #0]
 8003442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003444:	2200      	movs	r2, #0
 8003446:	4966      	ldr	r1, [pc, #408]	; (80035e0 <HAL_I2C_Master_Receive+0x448>)
 8003448:	68f8      	ldr	r0, [r7, #12]
 800344a:	f000 fa1b 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 800344e:	4603      	mov	r3, r0
 8003450:	2b00      	cmp	r3, #0
 8003452:	d001      	beq.n	8003458 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e0bf      	b.n	80035d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681a      	ldr	r2, [r3, #0]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003466:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	691a      	ldr	r2, [r3, #16]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003472:	b2d2      	uxtb	r2, r2
 8003474:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347a:	1c5a      	adds	r2, r3, #1
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003484:	3b01      	subs	r3, #1
 8003486:	b29a      	uxth	r2, r3
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003490:	b29b      	uxth	r3, r3
 8003492:	3b01      	subs	r3, #1
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800349a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800349c:	9300      	str	r3, [sp, #0]
 800349e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a0:	2200      	movs	r2, #0
 80034a2:	494f      	ldr	r1, [pc, #316]	; (80035e0 <HAL_I2C_Master_Receive+0x448>)
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 f9ed 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e091      	b.n	80035d8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	681a      	ldr	r2, [r3, #0]
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80034c2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	691a      	ldr	r2, [r3, #16]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ce:	b2d2      	uxtb	r2, r2
 80034d0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d6:	1c5a      	adds	r2, r3, #1
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034e0:	3b01      	subs	r3, #1
 80034e2:	b29a      	uxth	r2, r3
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	3b01      	subs	r3, #1
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	691a      	ldr	r2, [r3, #16]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003500:	b2d2      	uxtb	r2, r2
 8003502:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003508:	1c5a      	adds	r2, r3, #1
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003512:	3b01      	subs	r3, #1
 8003514:	b29a      	uxth	r2, r3
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800351e:	b29b      	uxth	r3, r3
 8003520:	3b01      	subs	r3, #1
 8003522:	b29a      	uxth	r2, r3
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003528:	e042      	b.n	80035b0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800352a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800352c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f000 fb00 	bl	8003b34 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800353a:	2301      	movs	r3, #1
 800353c:	e04c      	b.n	80035d8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	691a      	ldr	r2, [r3, #16]
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	b2d2      	uxtb	r2, r2
 800354a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003550:	1c5a      	adds	r2, r3, #1
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800355a:	3b01      	subs	r3, #1
 800355c:	b29a      	uxth	r2, r3
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003566:	b29b      	uxth	r3, r3
 8003568:	3b01      	subs	r3, #1
 800356a:	b29a      	uxth	r2, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	f003 0304 	and.w	r3, r3, #4
 800357a:	2b04      	cmp	r3, #4
 800357c:	d118      	bne.n	80035b0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	691a      	ldr	r2, [r3, #16]
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003588:	b2d2      	uxtb	r2, r2
 800358a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003590:	1c5a      	adds	r2, r3, #1
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800359a:	3b01      	subs	r3, #1
 800359c:	b29a      	uxth	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	f47f aec2 	bne.w	800333e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2220      	movs	r2, #32
 80035be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80035d2:	2300      	movs	r3, #0
 80035d4:	e000      	b.n	80035d8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80035d6:	2302      	movs	r3, #2
  }
}
 80035d8:	4618      	mov	r0, r3
 80035da:	3728      	adds	r7, #40	; 0x28
 80035dc:	46bd      	mov	sp, r7
 80035de:	bd80      	pop	{r7, pc}
 80035e0:	00010004 	.word	0x00010004

080035e4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b088      	sub	sp, #32
 80035e8:	af02      	add	r7, sp, #8
 80035ea:	60f8      	str	r0, [r7, #12]
 80035ec:	607a      	str	r2, [r7, #4]
 80035ee:	603b      	str	r3, [r7, #0]
 80035f0:	460b      	mov	r3, r1
 80035f2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	2b08      	cmp	r3, #8
 80035fe:	d006      	beq.n	800360e <I2C_MasterRequestWrite+0x2a>
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	2b01      	cmp	r3, #1
 8003604:	d003      	beq.n	800360e <I2C_MasterRequestWrite+0x2a>
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800360c:	d108      	bne.n	8003620 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	e00b      	b.n	8003638 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003624:	2b12      	cmp	r3, #18
 8003626:	d107      	bne.n	8003638 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	681a      	ldr	r2, [r3, #0]
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003636:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2200      	movs	r2, #0
 8003640:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f000 f91d 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 800364a:	4603      	mov	r3, r0
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00d      	beq.n	800366c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800365e:	d103      	bne.n	8003668 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003666:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003668:	2303      	movs	r3, #3
 800366a:	e035      	b.n	80036d8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003674:	d108      	bne.n	8003688 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003676:	897b      	ldrh	r3, [r7, #10]
 8003678:	b2db      	uxtb	r3, r3
 800367a:	461a      	mov	r2, r3
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003684:	611a      	str	r2, [r3, #16]
 8003686:	e01b      	b.n	80036c0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003688:	897b      	ldrh	r3, [r7, #10]
 800368a:	11db      	asrs	r3, r3, #7
 800368c:	b2db      	uxtb	r3, r3
 800368e:	f003 0306 	and.w	r3, r3, #6
 8003692:	b2db      	uxtb	r3, r3
 8003694:	f063 030f 	orn	r3, r3, #15
 8003698:	b2da      	uxtb	r2, r3
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	687a      	ldr	r2, [r7, #4]
 80036a4:	490e      	ldr	r1, [pc, #56]	; (80036e0 <I2C_MasterRequestWrite+0xfc>)
 80036a6:	68f8      	ldr	r0, [r7, #12]
 80036a8:	f000 f943 	bl	8003932 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80036b2:	2301      	movs	r3, #1
 80036b4:	e010      	b.n	80036d8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80036b6:	897b      	ldrh	r3, [r7, #10]
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	687a      	ldr	r2, [r7, #4]
 80036c4:	4907      	ldr	r1, [pc, #28]	; (80036e4 <I2C_MasterRequestWrite+0x100>)
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f000 f933 	bl	8003932 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d001      	beq.n	80036d6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e000      	b.n	80036d8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80036d6:	2300      	movs	r3, #0
}
 80036d8:	4618      	mov	r0, r3
 80036da:	3718      	adds	r7, #24
 80036dc:	46bd      	mov	sp, r7
 80036de:	bd80      	pop	{r7, pc}
 80036e0:	00010008 	.word	0x00010008
 80036e4:	00010002 	.word	0x00010002

080036e8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af02      	add	r7, sp, #8
 80036ee:	60f8      	str	r0, [r7, #12]
 80036f0:	607a      	str	r2, [r7, #4]
 80036f2:	603b      	str	r3, [r7, #0]
 80036f4:	460b      	mov	r3, r1
 80036f6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	681a      	ldr	r2, [r3, #0]
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800370c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	2b08      	cmp	r3, #8
 8003712:	d006      	beq.n	8003722 <I2C_MasterRequestRead+0x3a>
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	2b01      	cmp	r3, #1
 8003718:	d003      	beq.n	8003722 <I2C_MasterRequestRead+0x3a>
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003720:	d108      	bne.n	8003734 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	e00b      	b.n	800374c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003738:	2b11      	cmp	r3, #17
 800373a:	d107      	bne.n	800374c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800374a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	9300      	str	r3, [sp, #0]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003758:	68f8      	ldr	r0, [r7, #12]
 800375a:	f000 f893 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00d      	beq.n	8003780 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800376e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003772:	d103      	bne.n	800377c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	f44f 7200 	mov.w	r2, #512	; 0x200
 800377a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800377c:	2303      	movs	r3, #3
 800377e:	e079      	b.n	8003874 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003788:	d108      	bne.n	800379c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800378a:	897b      	ldrh	r3, [r7, #10]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	f043 0301 	orr.w	r3, r3, #1
 8003792:	b2da      	uxtb	r2, r3
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	611a      	str	r2, [r3, #16]
 800379a:	e05f      	b.n	800385c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800379c:	897b      	ldrh	r3, [r7, #10]
 800379e:	11db      	asrs	r3, r3, #7
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	f003 0306 	and.w	r3, r3, #6
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	f063 030f 	orn	r3, r3, #15
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	4930      	ldr	r1, [pc, #192]	; (800387c <I2C_MasterRequestRead+0x194>)
 80037ba:	68f8      	ldr	r0, [r7, #12]
 80037bc:	f000 f8b9 	bl	8003932 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037c0:	4603      	mov	r3, r0
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d001      	beq.n	80037ca <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e054      	b.n	8003874 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037ca:	897b      	ldrh	r3, [r7, #10]
 80037cc:	b2da      	uxtb	r2, r3
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	687a      	ldr	r2, [r7, #4]
 80037d8:	4929      	ldr	r1, [pc, #164]	; (8003880 <I2C_MasterRequestRead+0x198>)
 80037da:	68f8      	ldr	r0, [r7, #12]
 80037dc:	f000 f8a9 	bl	8003932 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037e0:	4603      	mov	r3, r0
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d001      	beq.n	80037ea <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e044      	b.n	8003874 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037ea:	2300      	movs	r3, #0
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	695b      	ldr	r3, [r3, #20]
 80037f4:	613b      	str	r3, [r7, #16]
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	699b      	ldr	r3, [r3, #24]
 80037fc:	613b      	str	r3, [r7, #16]
 80037fe:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800380e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	9300      	str	r3, [sp, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2200      	movs	r2, #0
 8003818:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f831 	bl	8003884 <I2C_WaitOnFlagUntilTimeout>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d00d      	beq.n	8003844 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003832:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003836:	d103      	bne.n	8003840 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800383e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e017      	b.n	8003874 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003844:	897b      	ldrh	r3, [r7, #10]
 8003846:	11db      	asrs	r3, r3, #7
 8003848:	b2db      	uxtb	r3, r3
 800384a:	f003 0306 	and.w	r3, r3, #6
 800384e:	b2db      	uxtb	r3, r3
 8003850:	f063 030e 	orn	r3, r3, #14
 8003854:	b2da      	uxtb	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	4907      	ldr	r1, [pc, #28]	; (8003880 <I2C_MasterRequestRead+0x198>)
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 f865 	bl	8003932 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003868:	4603      	mov	r3, r0
 800386a:	2b00      	cmp	r3, #0
 800386c:	d001      	beq.n	8003872 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	e000      	b.n	8003874 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003872:	2300      	movs	r3, #0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3718      	adds	r7, #24
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}
 800387c:	00010008 	.word	0x00010008
 8003880:	00010002 	.word	0x00010002

08003884 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	60f8      	str	r0, [r7, #12]
 800388c:	60b9      	str	r1, [r7, #8]
 800388e:	603b      	str	r3, [r7, #0]
 8003890:	4613      	mov	r3, r2
 8003892:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003894:	e025      	b.n	80038e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	f1b3 3fff 	cmp.w	r3, #4294967295
 800389c:	d021      	beq.n	80038e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800389e:	f7fe f92d 	bl	8001afc <HAL_GetTick>
 80038a2:	4602      	mov	r2, r0
 80038a4:	69bb      	ldr	r3, [r7, #24]
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d302      	bcc.n	80038b4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d116      	bne.n	80038e2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2200      	movs	r2, #0
 80038b8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ce:	f043 0220 	orr.w	r2, r3, #32
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80038de:	2301      	movs	r3, #1
 80038e0:	e023      	b.n	800392a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	0c1b      	lsrs	r3, r3, #16
 80038e6:	b2db      	uxtb	r3, r3
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d10d      	bne.n	8003908 <I2C_WaitOnFlagUntilTimeout+0x84>
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	43da      	mvns	r2, r3
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	4013      	ands	r3, r2
 80038f8:	b29b      	uxth	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	bf0c      	ite	eq
 80038fe:	2301      	moveq	r3, #1
 8003900:	2300      	movne	r3, #0
 8003902:	b2db      	uxtb	r3, r3
 8003904:	461a      	mov	r2, r3
 8003906:	e00c      	b.n	8003922 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	43da      	mvns	r2, r3
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	4013      	ands	r3, r2
 8003914:	b29b      	uxth	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	bf0c      	ite	eq
 800391a:	2301      	moveq	r3, #1
 800391c:	2300      	movne	r3, #0
 800391e:	b2db      	uxtb	r3, r3
 8003920:	461a      	mov	r2, r3
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	429a      	cmp	r2, r3
 8003926:	d0b6      	beq.n	8003896 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b084      	sub	sp, #16
 8003936:	af00      	add	r7, sp, #0
 8003938:	60f8      	str	r0, [r7, #12]
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	607a      	str	r2, [r7, #4]
 800393e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003940:	e051      	b.n	80039e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800394c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003950:	d123      	bne.n	800399a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003960:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800396a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	2200      	movs	r2, #0
 8003970:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2220      	movs	r2, #32
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003986:	f043 0204 	orr.w	r2, r3, #4
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2200      	movs	r2, #0
 8003992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003996:	2301      	movs	r3, #1
 8003998:	e046      	b.n	8003a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039a0:	d021      	beq.n	80039e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039a2:	f7fe f8ab 	bl	8001afc <HAL_GetTick>
 80039a6:	4602      	mov	r2, r0
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	1ad3      	subs	r3, r2, r3
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d302      	bcc.n	80039b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d116      	bne.n	80039e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039d2:	f043 0220 	orr.w	r2, r3, #32
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e020      	b.n	8003a28 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	0c1b      	lsrs	r3, r3, #16
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d10c      	bne.n	8003a0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	695b      	ldr	r3, [r3, #20]
 80039f6:	43da      	mvns	r2, r3
 80039f8:	68bb      	ldr	r3, [r7, #8]
 80039fa:	4013      	ands	r3, r2
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	bf14      	ite	ne
 8003a02:	2301      	movne	r3, #1
 8003a04:	2300      	moveq	r3, #0
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	e00b      	b.n	8003a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	43da      	mvns	r2, r3
 8003a12:	68bb      	ldr	r3, [r7, #8]
 8003a14:	4013      	ands	r3, r2
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bf14      	ite	ne
 8003a1c:	2301      	movne	r3, #1
 8003a1e:	2300      	moveq	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d18d      	bne.n	8003942 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	4618      	mov	r0, r3
 8003a2a:	3710      	adds	r7, #16
 8003a2c:	46bd      	mov	sp, r7
 8003a2e:	bd80      	pop	{r7, pc}

08003a30 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a3c:	e02d      	b.n	8003a9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f000 f8ce 	bl	8003be0 <I2C_IsAcknowledgeFailed>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	e02d      	b.n	8003aaa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a54:	d021      	beq.n	8003a9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a56:	f7fe f851 	bl	8001afc <HAL_GetTick>
 8003a5a:	4602      	mov	r2, r0
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	1ad3      	subs	r3, r2, r3
 8003a60:	68ba      	ldr	r2, [r7, #8]
 8003a62:	429a      	cmp	r2, r3
 8003a64:	d302      	bcc.n	8003a6c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003a66:	68bb      	ldr	r3, [r7, #8]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d116      	bne.n	8003a9a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2220      	movs	r2, #32
 8003a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f043 0220 	orr.w	r2, r3, #32
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e007      	b.n	8003aaa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	695b      	ldr	r3, [r3, #20]
 8003aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa4:	2b80      	cmp	r3, #128	; 0x80
 8003aa6:	d1ca      	bne.n	8003a3e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	60f8      	str	r0, [r7, #12]
 8003aba:	60b9      	str	r1, [r7, #8]
 8003abc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003abe:	e02d      	b.n	8003b1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f000 f88d 	bl	8003be0 <I2C_IsAcknowledgeFailed>
 8003ac6:	4603      	mov	r3, r0
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d001      	beq.n	8003ad0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e02d      	b.n	8003b2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ad6:	d021      	beq.n	8003b1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ad8:	f7fe f810 	bl	8001afc <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	68ba      	ldr	r2, [r7, #8]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d302      	bcc.n	8003aee <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ae8:	68bb      	ldr	r3, [r7, #8]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d116      	bne.n	8003b1c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	2200      	movs	r2, #0
 8003af2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2220      	movs	r2, #32
 8003af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b08:	f043 0220 	orr.w	r2, r3, #32
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	e007      	b.n	8003b2c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	695b      	ldr	r3, [r3, #20]
 8003b22:	f003 0304 	and.w	r3, r3, #4
 8003b26:	2b04      	cmp	r3, #4
 8003b28:	d1ca      	bne.n	8003ac0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b084      	sub	sp, #16
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003b40:	e042      	b.n	8003bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	695b      	ldr	r3, [r3, #20]
 8003b48:	f003 0310 	and.w	r3, r3, #16
 8003b4c:	2b10      	cmp	r3, #16
 8003b4e:	d119      	bne.n	8003b84 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f06f 0210 	mvn.w	r2, #16
 8003b58:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2220      	movs	r2, #32
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
 8003b82:	e029      	b.n	8003bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b84:	f7fd ffba 	bl	8001afc <HAL_GetTick>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	1ad3      	subs	r3, r2, r3
 8003b8e:	68ba      	ldr	r2, [r7, #8]
 8003b90:	429a      	cmp	r2, r3
 8003b92:	d302      	bcc.n	8003b9a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d116      	bne.n	8003bc8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2220      	movs	r2, #32
 8003ba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2200      	movs	r2, #0
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bb4:	f043 0220 	orr.w	r2, r3, #32
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003bc4:	2301      	movs	r3, #1
 8003bc6:	e007      	b.n	8003bd8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bd2:	2b40      	cmp	r3, #64	; 0x40
 8003bd4:	d1b5      	bne.n	8003b42 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003bd6:	2300      	movs	r3, #0
}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3710      	adds	r7, #16
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b083      	sub	sp, #12
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	695b      	ldr	r3, [r3, #20]
 8003bee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bf2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bf6:	d11b      	bne.n	8003c30 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003c00:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2220      	movs	r2, #32
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2200      	movs	r2, #0
 8003c14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1c:	f043 0204 	orr.w	r2, r3, #4
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e000      	b.n	8003c32 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003c30:	2300      	movs	r3, #0
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
	...

08003c40 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003c46:	2300      	movs	r3, #0
 8003c48:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	603b      	str	r3, [r7, #0]
 8003c4e:	4b20      	ldr	r3, [pc, #128]	; (8003cd0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	4a1f      	ldr	r2, [pc, #124]	; (8003cd0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c58:	6413      	str	r3, [r2, #64]	; 0x40
 8003c5a:	4b1d      	ldr	r3, [pc, #116]	; (8003cd0 <HAL_PWREx_EnableOverDrive+0x90>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c62:	603b      	str	r3, [r7, #0]
 8003c64:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003c66:	4b1b      	ldr	r3, [pc, #108]	; (8003cd4 <HAL_PWREx_EnableOverDrive+0x94>)
 8003c68:	2201      	movs	r2, #1
 8003c6a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c6c:	f7fd ff46 	bl	8001afc <HAL_GetTick>
 8003c70:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c72:	e009      	b.n	8003c88 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003c74:	f7fd ff42 	bl	8001afc <HAL_GetTick>
 8003c78:	4602      	mov	r2, r0
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	1ad3      	subs	r3, r2, r3
 8003c7e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003c82:	d901      	bls.n	8003c88 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e01f      	b.n	8003cc8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003c88:	4b13      	ldr	r3, [pc, #76]	; (8003cd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c94:	d1ee      	bne.n	8003c74 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003c96:	4b11      	ldr	r3, [pc, #68]	; (8003cdc <HAL_PWREx_EnableOverDrive+0x9c>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c9c:	f7fd ff2e 	bl	8001afc <HAL_GetTick>
 8003ca0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003ca2:	e009      	b.n	8003cb8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003ca4:	f7fd ff2a 	bl	8001afc <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cb2:	d901      	bls.n	8003cb8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003cb4:	2303      	movs	r3, #3
 8003cb6:	e007      	b.n	8003cc8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003cb8:	4b07      	ldr	r3, [pc, #28]	; (8003cd8 <HAL_PWREx_EnableOverDrive+0x98>)
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003cc4:	d1ee      	bne.n	8003ca4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003cc6:	2300      	movs	r3, #0
}
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3708      	adds	r7, #8
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	420e0040 	.word	0x420e0040
 8003cd8:	40007000 	.word	0x40007000
 8003cdc:	420e0044 	.word	0x420e0044

08003ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b084      	sub	sp, #16
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d101      	bne.n	8003cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003cf0:	2301      	movs	r3, #1
 8003cf2:	e0cc      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003cf4:	4b68      	ldr	r3, [pc, #416]	; (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 030f 	and.w	r3, r3, #15
 8003cfc:	683a      	ldr	r2, [r7, #0]
 8003cfe:	429a      	cmp	r2, r3
 8003d00:	d90c      	bls.n	8003d1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d02:	4b65      	ldr	r3, [pc, #404]	; (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003d04:	683a      	ldr	r2, [r7, #0]
 8003d06:	b2d2      	uxtb	r2, r2
 8003d08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d0a:	4b63      	ldr	r3, [pc, #396]	; (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d001      	beq.n	8003d1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003d18:	2301      	movs	r3, #1
 8003d1a:	e0b8      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f003 0302 	and.w	r3, r3, #2
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d020      	beq.n	8003d6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d005      	beq.n	8003d40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003d34:	4b59      	ldr	r3, [pc, #356]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	4a58      	ldr	r2, [pc, #352]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003d3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f003 0308 	and.w	r3, r3, #8
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d005      	beq.n	8003d58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003d4c:	4b53      	ldr	r3, [pc, #332]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	4a52      	ldr	r2, [pc, #328]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003d56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003d58:	4b50      	ldr	r3, [pc, #320]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	494d      	ldr	r1, [pc, #308]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d66:	4313      	orrs	r3, r2
 8003d68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d044      	beq.n	8003e00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	2b01      	cmp	r3, #1
 8003d7c:	d107      	bne.n	8003d8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d7e:	4b47      	ldr	r3, [pc, #284]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d119      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e07f      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	685b      	ldr	r3, [r3, #4]
 8003d92:	2b02      	cmp	r3, #2
 8003d94:	d003      	beq.n	8003d9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003d9a:	2b03      	cmp	r3, #3
 8003d9c:	d107      	bne.n	8003dae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d9e:	4b3f      	ldr	r3, [pc, #252]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d109      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e06f      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dae:	4b3b      	ldr	r3, [pc, #236]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0302 	and.w	r3, r3, #2
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e067      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003dbe:	4b37      	ldr	r3, [pc, #220]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f023 0203 	bic.w	r2, r3, #3
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	4934      	ldr	r1, [pc, #208]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003dd0:	f7fd fe94 	bl	8001afc <HAL_GetTick>
 8003dd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dd6:	e00a      	b.n	8003dee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003dd8:	f7fd fe90 	bl	8001afc <HAL_GetTick>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e04f      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003dee:	4b2b      	ldr	r3, [pc, #172]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	f003 020c 	and.w	r2, r3, #12
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d1eb      	bne.n	8003dd8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003e00:	4b25      	ldr	r3, [pc, #148]	; (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f003 030f 	and.w	r3, r3, #15
 8003e08:	683a      	ldr	r2, [r7, #0]
 8003e0a:	429a      	cmp	r2, r3
 8003e0c:	d20c      	bcs.n	8003e28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e0e:	4b22      	ldr	r3, [pc, #136]	; (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003e10:	683a      	ldr	r2, [r7, #0]
 8003e12:	b2d2      	uxtb	r2, r2
 8003e14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e16:	4b20      	ldr	r3, [pc, #128]	; (8003e98 <HAL_RCC_ClockConfig+0x1b8>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f003 030f 	and.w	r3, r3, #15
 8003e1e:	683a      	ldr	r2, [r7, #0]
 8003e20:	429a      	cmp	r2, r3
 8003e22:	d001      	beq.n	8003e28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e032      	b.n	8003e8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0304 	and.w	r3, r3, #4
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d008      	beq.n	8003e46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e34:	4b19      	ldr	r3, [pc, #100]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	68db      	ldr	r3, [r3, #12]
 8003e40:	4916      	ldr	r1, [pc, #88]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e42:	4313      	orrs	r3, r2
 8003e44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f003 0308 	and.w	r3, r3, #8
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d009      	beq.n	8003e66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e52:	4b12      	ldr	r3, [pc, #72]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	691b      	ldr	r3, [r3, #16]
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	490e      	ldr	r1, [pc, #56]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e62:	4313      	orrs	r3, r2
 8003e64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003e66:	f000 f855 	bl	8003f14 <HAL_RCC_GetSysClockFreq>
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	4b0b      	ldr	r3, [pc, #44]	; (8003e9c <HAL_RCC_ClockConfig+0x1bc>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	091b      	lsrs	r3, r3, #4
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	490a      	ldr	r1, [pc, #40]	; (8003ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8003e78:	5ccb      	ldrb	r3, [r1, r3]
 8003e7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e7e:	4a09      	ldr	r2, [pc, #36]	; (8003ea4 <HAL_RCC_ClockConfig+0x1c4>)
 8003e80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003e82:	4b09      	ldr	r3, [pc, #36]	; (8003ea8 <HAL_RCC_ClockConfig+0x1c8>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fd fdf4 	bl	8001a74 <HAL_InitTick>

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	40023c00 	.word	0x40023c00
 8003e9c:	40023800 	.word	0x40023800
 8003ea0:	0800777c 	.word	0x0800777c
 8003ea4:	20000008 	.word	0x20000008
 8003ea8:	2000000c 	.word	0x2000000c

08003eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003eac:	b480      	push	{r7}
 8003eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003eb0:	4b03      	ldr	r3, [pc, #12]	; (8003ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	20000008 	.word	0x20000008

08003ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003ec8:	f7ff fff0 	bl	8003eac <HAL_RCC_GetHCLKFreq>
 8003ecc:	4602      	mov	r2, r0
 8003ece:	4b05      	ldr	r3, [pc, #20]	; (8003ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	0a9b      	lsrs	r3, r3, #10
 8003ed4:	f003 0307 	and.w	r3, r3, #7
 8003ed8:	4903      	ldr	r1, [pc, #12]	; (8003ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003eda:	5ccb      	ldrb	r3, [r1, r3]
 8003edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	bd80      	pop	{r7, pc}
 8003ee4:	40023800 	.word	0x40023800
 8003ee8:	0800778c 	.word	0x0800778c

08003eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003ef0:	f7ff ffdc 	bl	8003eac <HAL_RCC_GetHCLKFreq>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	0b5b      	lsrs	r3, r3, #13
 8003efc:	f003 0307 	and.w	r3, r3, #7
 8003f00:	4903      	ldr	r1, [pc, #12]	; (8003f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003f02:	5ccb      	ldrb	r3, [r1, r3]
 8003f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f08:	4618      	mov	r0, r3
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	40023800 	.word	0x40023800
 8003f10:	0800778c 	.word	0x0800778c

08003f14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003f18:	b0ae      	sub	sp, #184	; 0xb8
 8003f1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003f1c:	2300      	movs	r3, #0
 8003f1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 8003f22:	2300      	movs	r3, #0
 8003f24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003f28:	2300      	movs	r3, #0
 8003f2a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003f34:	2300      	movs	r3, #0
 8003f36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003f3a:	4bcb      	ldr	r3, [pc, #812]	; (8004268 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	f003 030c 	and.w	r3, r3, #12
 8003f42:	2b0c      	cmp	r3, #12
 8003f44:	f200 8206 	bhi.w	8004354 <HAL_RCC_GetSysClockFreq+0x440>
 8003f48:	a201      	add	r2, pc, #4	; (adr r2, 8003f50 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003f4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f4e:	bf00      	nop
 8003f50:	08003f85 	.word	0x08003f85
 8003f54:	08004355 	.word	0x08004355
 8003f58:	08004355 	.word	0x08004355
 8003f5c:	08004355 	.word	0x08004355
 8003f60:	08003f8d 	.word	0x08003f8d
 8003f64:	08004355 	.word	0x08004355
 8003f68:	08004355 	.word	0x08004355
 8003f6c:	08004355 	.word	0x08004355
 8003f70:	08003f95 	.word	0x08003f95
 8003f74:	08004355 	.word	0x08004355
 8003f78:	08004355 	.word	0x08004355
 8003f7c:	08004355 	.word	0x08004355
 8003f80:	08004185 	.word	0x08004185
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003f84:	4bb9      	ldr	r3, [pc, #740]	; (800426c <HAL_RCC_GetSysClockFreq+0x358>)
 8003f86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003f8a:	e1e7      	b.n	800435c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003f8c:	4bb8      	ldr	r3, [pc, #736]	; (8004270 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003f8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003f92:	e1e3      	b.n	800435c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003f94:	4bb4      	ldr	r3, [pc, #720]	; (8004268 <HAL_RCC_GetSysClockFreq+0x354>)
 8003f96:	685b      	ldr	r3, [r3, #4]
 8003f98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003f9c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003fa0:	4bb1      	ldr	r3, [pc, #708]	; (8004268 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d071      	beq.n	8004090 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003fac:	4bae      	ldr	r3, [pc, #696]	; (8004268 <HAL_RCC_GetSysClockFreq+0x354>)
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	099b      	lsrs	r3, r3, #6
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003fb8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003fbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003fc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003fc8:	2300      	movs	r3, #0
 8003fca:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003fce:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003fd2:	4622      	mov	r2, r4
 8003fd4:	462b      	mov	r3, r5
 8003fd6:	f04f 0000 	mov.w	r0, #0
 8003fda:	f04f 0100 	mov.w	r1, #0
 8003fde:	0159      	lsls	r1, r3, #5
 8003fe0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003fe4:	0150      	lsls	r0, r2, #5
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	460b      	mov	r3, r1
 8003fea:	4621      	mov	r1, r4
 8003fec:	1a51      	subs	r1, r2, r1
 8003fee:	6439      	str	r1, [r7, #64]	; 0x40
 8003ff0:	4629      	mov	r1, r5
 8003ff2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ff6:	647b      	str	r3, [r7, #68]	; 0x44
 8003ff8:	f04f 0200 	mov.w	r2, #0
 8003ffc:	f04f 0300 	mov.w	r3, #0
 8004000:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8004004:	4649      	mov	r1, r9
 8004006:	018b      	lsls	r3, r1, #6
 8004008:	4641      	mov	r1, r8
 800400a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800400e:	4641      	mov	r1, r8
 8004010:	018a      	lsls	r2, r1, #6
 8004012:	4641      	mov	r1, r8
 8004014:	1a51      	subs	r1, r2, r1
 8004016:	63b9      	str	r1, [r7, #56]	; 0x38
 8004018:	4649      	mov	r1, r9
 800401a:	eb63 0301 	sbc.w	r3, r3, r1
 800401e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004020:	f04f 0200 	mov.w	r2, #0
 8004024:	f04f 0300 	mov.w	r3, #0
 8004028:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800402c:	4649      	mov	r1, r9
 800402e:	00cb      	lsls	r3, r1, #3
 8004030:	4641      	mov	r1, r8
 8004032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004036:	4641      	mov	r1, r8
 8004038:	00ca      	lsls	r2, r1, #3
 800403a:	4610      	mov	r0, r2
 800403c:	4619      	mov	r1, r3
 800403e:	4603      	mov	r3, r0
 8004040:	4622      	mov	r2, r4
 8004042:	189b      	adds	r3, r3, r2
 8004044:	633b      	str	r3, [r7, #48]	; 0x30
 8004046:	462b      	mov	r3, r5
 8004048:	460a      	mov	r2, r1
 800404a:	eb42 0303 	adc.w	r3, r2, r3
 800404e:	637b      	str	r3, [r7, #52]	; 0x34
 8004050:	f04f 0200 	mov.w	r2, #0
 8004054:	f04f 0300 	mov.w	r3, #0
 8004058:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800405c:	4629      	mov	r1, r5
 800405e:	024b      	lsls	r3, r1, #9
 8004060:	4621      	mov	r1, r4
 8004062:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004066:	4621      	mov	r1, r4
 8004068:	024a      	lsls	r2, r1, #9
 800406a:	4610      	mov	r0, r2
 800406c:	4619      	mov	r1, r3
 800406e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004072:	2200      	movs	r2, #0
 8004074:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004078:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800407c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8004080:	f7fc f916 	bl	80002b0 <__aeabi_uldivmod>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4613      	mov	r3, r2
 800408a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800408e:	e067      	b.n	8004160 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004090:	4b75      	ldr	r3, [pc, #468]	; (8004268 <HAL_RCC_GetSysClockFreq+0x354>)
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	099b      	lsrs	r3, r3, #6
 8004096:	2200      	movs	r2, #0
 8004098:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800409c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 80040a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80040a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80040aa:	2300      	movs	r3, #0
 80040ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80040ae:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 80040b2:	4622      	mov	r2, r4
 80040b4:	462b      	mov	r3, r5
 80040b6:	f04f 0000 	mov.w	r0, #0
 80040ba:	f04f 0100 	mov.w	r1, #0
 80040be:	0159      	lsls	r1, r3, #5
 80040c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80040c4:	0150      	lsls	r0, r2, #5
 80040c6:	4602      	mov	r2, r0
 80040c8:	460b      	mov	r3, r1
 80040ca:	4621      	mov	r1, r4
 80040cc:	1a51      	subs	r1, r2, r1
 80040ce:	62b9      	str	r1, [r7, #40]	; 0x28
 80040d0:	4629      	mov	r1, r5
 80040d2:	eb63 0301 	sbc.w	r3, r3, r1
 80040d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80040d8:	f04f 0200 	mov.w	r2, #0
 80040dc:	f04f 0300 	mov.w	r3, #0
 80040e0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80040e4:	4649      	mov	r1, r9
 80040e6:	018b      	lsls	r3, r1, #6
 80040e8:	4641      	mov	r1, r8
 80040ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80040ee:	4641      	mov	r1, r8
 80040f0:	018a      	lsls	r2, r1, #6
 80040f2:	4641      	mov	r1, r8
 80040f4:	ebb2 0a01 	subs.w	sl, r2, r1
 80040f8:	4649      	mov	r1, r9
 80040fa:	eb63 0b01 	sbc.w	fp, r3, r1
 80040fe:	f04f 0200 	mov.w	r2, #0
 8004102:	f04f 0300 	mov.w	r3, #0
 8004106:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800410a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800410e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004112:	4692      	mov	sl, r2
 8004114:	469b      	mov	fp, r3
 8004116:	4623      	mov	r3, r4
 8004118:	eb1a 0303 	adds.w	r3, sl, r3
 800411c:	623b      	str	r3, [r7, #32]
 800411e:	462b      	mov	r3, r5
 8004120:	eb4b 0303 	adc.w	r3, fp, r3
 8004124:	627b      	str	r3, [r7, #36]	; 0x24
 8004126:	f04f 0200 	mov.w	r2, #0
 800412a:	f04f 0300 	mov.w	r3, #0
 800412e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8004132:	4629      	mov	r1, r5
 8004134:	028b      	lsls	r3, r1, #10
 8004136:	4621      	mov	r1, r4
 8004138:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800413c:	4621      	mov	r1, r4
 800413e:	028a      	lsls	r2, r1, #10
 8004140:	4610      	mov	r0, r2
 8004142:	4619      	mov	r1, r3
 8004144:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004148:	2200      	movs	r2, #0
 800414a:	673b      	str	r3, [r7, #112]	; 0x70
 800414c:	677a      	str	r2, [r7, #116]	; 0x74
 800414e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004152:	f7fc f8ad 	bl	80002b0 <__aeabi_uldivmod>
 8004156:	4602      	mov	r2, r0
 8004158:	460b      	mov	r3, r1
 800415a:	4613      	mov	r3, r2
 800415c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004160:	4b41      	ldr	r3, [pc, #260]	; (8004268 <HAL_RCC_GetSysClockFreq+0x354>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	0c1b      	lsrs	r3, r3, #16
 8004166:	f003 0303 	and.w	r3, r3, #3
 800416a:	3301      	adds	r3, #1
 800416c:	005b      	lsls	r3, r3, #1
 800416e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8004172:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004176:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800417a:	fbb2 f3f3 	udiv	r3, r2, r3
 800417e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004182:	e0eb      	b.n	800435c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004184:	4b38      	ldr	r3, [pc, #224]	; (8004268 <HAL_RCC_GetSysClockFreq+0x354>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800418c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004190:	4b35      	ldr	r3, [pc, #212]	; (8004268 <HAL_RCC_GetSysClockFreq+0x354>)
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d06b      	beq.n	8004274 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800419c:	4b32      	ldr	r3, [pc, #200]	; (8004268 <HAL_RCC_GetSysClockFreq+0x354>)
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	099b      	lsrs	r3, r3, #6
 80041a2:	2200      	movs	r2, #0
 80041a4:	66bb      	str	r3, [r7, #104]	; 0x68
 80041a6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80041a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80041aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ae:	663b      	str	r3, [r7, #96]	; 0x60
 80041b0:	2300      	movs	r3, #0
 80041b2:	667b      	str	r3, [r7, #100]	; 0x64
 80041b4:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80041b8:	4622      	mov	r2, r4
 80041ba:	462b      	mov	r3, r5
 80041bc:	f04f 0000 	mov.w	r0, #0
 80041c0:	f04f 0100 	mov.w	r1, #0
 80041c4:	0159      	lsls	r1, r3, #5
 80041c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80041ca:	0150      	lsls	r0, r2, #5
 80041cc:	4602      	mov	r2, r0
 80041ce:	460b      	mov	r3, r1
 80041d0:	4621      	mov	r1, r4
 80041d2:	1a51      	subs	r1, r2, r1
 80041d4:	61b9      	str	r1, [r7, #24]
 80041d6:	4629      	mov	r1, r5
 80041d8:	eb63 0301 	sbc.w	r3, r3, r1
 80041dc:	61fb      	str	r3, [r7, #28]
 80041de:	f04f 0200 	mov.w	r2, #0
 80041e2:	f04f 0300 	mov.w	r3, #0
 80041e6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80041ea:	4659      	mov	r1, fp
 80041ec:	018b      	lsls	r3, r1, #6
 80041ee:	4651      	mov	r1, sl
 80041f0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80041f4:	4651      	mov	r1, sl
 80041f6:	018a      	lsls	r2, r1, #6
 80041f8:	4651      	mov	r1, sl
 80041fa:	ebb2 0801 	subs.w	r8, r2, r1
 80041fe:	4659      	mov	r1, fp
 8004200:	eb63 0901 	sbc.w	r9, r3, r1
 8004204:	f04f 0200 	mov.w	r2, #0
 8004208:	f04f 0300 	mov.w	r3, #0
 800420c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004210:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004214:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004218:	4690      	mov	r8, r2
 800421a:	4699      	mov	r9, r3
 800421c:	4623      	mov	r3, r4
 800421e:	eb18 0303 	adds.w	r3, r8, r3
 8004222:	613b      	str	r3, [r7, #16]
 8004224:	462b      	mov	r3, r5
 8004226:	eb49 0303 	adc.w	r3, r9, r3
 800422a:	617b      	str	r3, [r7, #20]
 800422c:	f04f 0200 	mov.w	r2, #0
 8004230:	f04f 0300 	mov.w	r3, #0
 8004234:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8004238:	4629      	mov	r1, r5
 800423a:	024b      	lsls	r3, r1, #9
 800423c:	4621      	mov	r1, r4
 800423e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004242:	4621      	mov	r1, r4
 8004244:	024a      	lsls	r2, r1, #9
 8004246:	4610      	mov	r0, r2
 8004248:	4619      	mov	r1, r3
 800424a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800424e:	2200      	movs	r2, #0
 8004250:	65bb      	str	r3, [r7, #88]	; 0x58
 8004252:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004254:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004258:	f7fc f82a 	bl	80002b0 <__aeabi_uldivmod>
 800425c:	4602      	mov	r2, r0
 800425e:	460b      	mov	r3, r1
 8004260:	4613      	mov	r3, r2
 8004262:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004266:	e065      	b.n	8004334 <HAL_RCC_GetSysClockFreq+0x420>
 8004268:	40023800 	.word	0x40023800
 800426c:	00f42400 	.word	0x00f42400
 8004270:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004274:	4b3d      	ldr	r3, [pc, #244]	; (800436c <HAL_RCC_GetSysClockFreq+0x458>)
 8004276:	685b      	ldr	r3, [r3, #4]
 8004278:	099b      	lsrs	r3, r3, #6
 800427a:	2200      	movs	r2, #0
 800427c:	4618      	mov	r0, r3
 800427e:	4611      	mov	r1, r2
 8004280:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004284:	653b      	str	r3, [r7, #80]	; 0x50
 8004286:	2300      	movs	r3, #0
 8004288:	657b      	str	r3, [r7, #84]	; 0x54
 800428a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800428e:	4642      	mov	r2, r8
 8004290:	464b      	mov	r3, r9
 8004292:	f04f 0000 	mov.w	r0, #0
 8004296:	f04f 0100 	mov.w	r1, #0
 800429a:	0159      	lsls	r1, r3, #5
 800429c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042a0:	0150      	lsls	r0, r2, #5
 80042a2:	4602      	mov	r2, r0
 80042a4:	460b      	mov	r3, r1
 80042a6:	4641      	mov	r1, r8
 80042a8:	1a51      	subs	r1, r2, r1
 80042aa:	60b9      	str	r1, [r7, #8]
 80042ac:	4649      	mov	r1, r9
 80042ae:	eb63 0301 	sbc.w	r3, r3, r1
 80042b2:	60fb      	str	r3, [r7, #12]
 80042b4:	f04f 0200 	mov.w	r2, #0
 80042b8:	f04f 0300 	mov.w	r3, #0
 80042bc:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80042c0:	4659      	mov	r1, fp
 80042c2:	018b      	lsls	r3, r1, #6
 80042c4:	4651      	mov	r1, sl
 80042c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042ca:	4651      	mov	r1, sl
 80042cc:	018a      	lsls	r2, r1, #6
 80042ce:	4651      	mov	r1, sl
 80042d0:	1a54      	subs	r4, r2, r1
 80042d2:	4659      	mov	r1, fp
 80042d4:	eb63 0501 	sbc.w	r5, r3, r1
 80042d8:	f04f 0200 	mov.w	r2, #0
 80042dc:	f04f 0300 	mov.w	r3, #0
 80042e0:	00eb      	lsls	r3, r5, #3
 80042e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80042e6:	00e2      	lsls	r2, r4, #3
 80042e8:	4614      	mov	r4, r2
 80042ea:	461d      	mov	r5, r3
 80042ec:	4643      	mov	r3, r8
 80042ee:	18e3      	adds	r3, r4, r3
 80042f0:	603b      	str	r3, [r7, #0]
 80042f2:	464b      	mov	r3, r9
 80042f4:	eb45 0303 	adc.w	r3, r5, r3
 80042f8:	607b      	str	r3, [r7, #4]
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004306:	4629      	mov	r1, r5
 8004308:	028b      	lsls	r3, r1, #10
 800430a:	4621      	mov	r1, r4
 800430c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004310:	4621      	mov	r1, r4
 8004312:	028a      	lsls	r2, r1, #10
 8004314:	4610      	mov	r0, r2
 8004316:	4619      	mov	r1, r3
 8004318:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800431c:	2200      	movs	r2, #0
 800431e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004320:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004322:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004326:	f7fb ffc3 	bl	80002b0 <__aeabi_uldivmod>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4613      	mov	r3, r2
 8004330:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004334:	4b0d      	ldr	r3, [pc, #52]	; (800436c <HAL_RCC_GetSysClockFreq+0x458>)
 8004336:	685b      	ldr	r3, [r3, #4]
 8004338:	0f1b      	lsrs	r3, r3, #28
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8004342:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004346:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800434a:	fbb2 f3f3 	udiv	r3, r2, r3
 800434e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8004352:	e003      	b.n	800435c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004354:	4b06      	ldr	r3, [pc, #24]	; (8004370 <HAL_RCC_GetSysClockFreq+0x45c>)
 8004356:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800435a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800435c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8004360:	4618      	mov	r0, r3
 8004362:	37b8      	adds	r7, #184	; 0xb8
 8004364:	46bd      	mov	sp, r7
 8004366:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800436a:	bf00      	nop
 800436c:	40023800 	.word	0x40023800
 8004370:	00f42400 	.word	0x00f42400

08004374 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004374:	b580      	push	{r7, lr}
 8004376:	b086      	sub	sp, #24
 8004378:	af00      	add	r7, sp, #0
 800437a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d101      	bne.n	8004386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	e28d      	b.n	80048a2 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	f000 8083 	beq.w	800449a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004394:	4b94      	ldr	r3, [pc, #592]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f003 030c 	and.w	r3, r3, #12
 800439c:	2b04      	cmp	r3, #4
 800439e:	d019      	beq.n	80043d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043a0:	4b91      	ldr	r3, [pc, #580]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80043a8:	2b08      	cmp	r3, #8
 80043aa:	d106      	bne.n	80043ba <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043ac:	4b8e      	ldr	r3, [pc, #568]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043b8:	d00c      	beq.n	80043d4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043ba:	4b8b      	ldr	r3, [pc, #556]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80043c2:	2b0c      	cmp	r3, #12
 80043c4:	d112      	bne.n	80043ec <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80043c6:	4b88      	ldr	r3, [pc, #544]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043d2:	d10b      	bne.n	80043ec <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80043d4:	4b84      	ldr	r3, [pc, #528]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d05b      	beq.n	8004498 <HAL_RCC_OscConfig+0x124>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	685b      	ldr	r3, [r3, #4]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d157      	bne.n	8004498 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e25a      	b.n	80048a2 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	685b      	ldr	r3, [r3, #4]
 80043f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f4:	d106      	bne.n	8004404 <HAL_RCC_OscConfig+0x90>
 80043f6:	4b7c      	ldr	r3, [pc, #496]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a7b      	ldr	r2, [pc, #492]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 80043fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004400:	6013      	str	r3, [r2, #0]
 8004402:	e01d      	b.n	8004440 <HAL_RCC_OscConfig+0xcc>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800440c:	d10c      	bne.n	8004428 <HAL_RCC_OscConfig+0xb4>
 800440e:	4b76      	ldr	r3, [pc, #472]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a75      	ldr	r2, [pc, #468]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 8004414:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004418:	6013      	str	r3, [r2, #0]
 800441a:	4b73      	ldr	r3, [pc, #460]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a72      	ldr	r2, [pc, #456]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 8004420:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004424:	6013      	str	r3, [r2, #0]
 8004426:	e00b      	b.n	8004440 <HAL_RCC_OscConfig+0xcc>
 8004428:	4b6f      	ldr	r3, [pc, #444]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a6e      	ldr	r2, [pc, #440]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 800442e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004432:	6013      	str	r3, [r2, #0]
 8004434:	4b6c      	ldr	r3, [pc, #432]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a6b      	ldr	r2, [pc, #428]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 800443a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800443e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	685b      	ldr	r3, [r3, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d013      	beq.n	8004470 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004448:	f7fd fb58 	bl	8001afc <HAL_GetTick>
 800444c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800444e:	e008      	b.n	8004462 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004450:	f7fd fb54 	bl	8001afc <HAL_GetTick>
 8004454:	4602      	mov	r2, r0
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	1ad3      	subs	r3, r2, r3
 800445a:	2b64      	cmp	r3, #100	; 0x64
 800445c:	d901      	bls.n	8004462 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e21f      	b.n	80048a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004462:	4b61      	ldr	r3, [pc, #388]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800446a:	2b00      	cmp	r3, #0
 800446c:	d0f0      	beq.n	8004450 <HAL_RCC_OscConfig+0xdc>
 800446e:	e014      	b.n	800449a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004470:	f7fd fb44 	bl	8001afc <HAL_GetTick>
 8004474:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004476:	e008      	b.n	800448a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004478:	f7fd fb40 	bl	8001afc <HAL_GetTick>
 800447c:	4602      	mov	r2, r0
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	1ad3      	subs	r3, r2, r3
 8004482:	2b64      	cmp	r3, #100	; 0x64
 8004484:	d901      	bls.n	800448a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8004486:	2303      	movs	r3, #3
 8004488:	e20b      	b.n	80048a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800448a:	4b57      	ldr	r3, [pc, #348]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004492:	2b00      	cmp	r3, #0
 8004494:	d1f0      	bne.n	8004478 <HAL_RCC_OscConfig+0x104>
 8004496:	e000      	b.n	800449a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004498:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0302 	and.w	r3, r3, #2
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d06f      	beq.n	8004586 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044a6:	4b50      	ldr	r3, [pc, #320]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f003 030c 	and.w	r3, r3, #12
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d017      	beq.n	80044e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044b2:	4b4d      	ldr	r3, [pc, #308]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 80044b4:	689b      	ldr	r3, [r3, #8]
 80044b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80044ba:	2b08      	cmp	r3, #8
 80044bc:	d105      	bne.n	80044ca <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044be:	4b4a      	ldr	r3, [pc, #296]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00b      	beq.n	80044e2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044ca:	4b47      	ldr	r3, [pc, #284]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 80044cc:	689b      	ldr	r3, [r3, #8]
 80044ce:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80044d2:	2b0c      	cmp	r3, #12
 80044d4:	d11c      	bne.n	8004510 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80044d6:	4b44      	ldr	r3, [pc, #272]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d116      	bne.n	8004510 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044e2:	4b41      	ldr	r3, [pc, #260]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d005      	beq.n	80044fa <HAL_RCC_OscConfig+0x186>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d001      	beq.n	80044fa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e1d3      	b.n	80048a2 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044fa:	4b3b      	ldr	r3, [pc, #236]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4937      	ldr	r1, [pc, #220]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 800450a:	4313      	orrs	r3, r2
 800450c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800450e:	e03a      	b.n	8004586 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68db      	ldr	r3, [r3, #12]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d020      	beq.n	800455a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004518:	4b34      	ldr	r3, [pc, #208]	; (80045ec <HAL_RCC_OscConfig+0x278>)
 800451a:	2201      	movs	r2, #1
 800451c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800451e:	f7fd faed 	bl	8001afc <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004526:	f7fd fae9 	bl	8001afc <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e1b4      	b.n	80048a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004538:	4b2b      	ldr	r3, [pc, #172]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 0302 	and.w	r3, r3, #2
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0f0      	beq.n	8004526 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004544:	4b28      	ldr	r3, [pc, #160]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	00db      	lsls	r3, r3, #3
 8004552:	4925      	ldr	r1, [pc, #148]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 8004554:	4313      	orrs	r3, r2
 8004556:	600b      	str	r3, [r1, #0]
 8004558:	e015      	b.n	8004586 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800455a:	4b24      	ldr	r3, [pc, #144]	; (80045ec <HAL_RCC_OscConfig+0x278>)
 800455c:	2200      	movs	r2, #0
 800455e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004560:	f7fd facc 	bl	8001afc <HAL_GetTick>
 8004564:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004566:	e008      	b.n	800457a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004568:	f7fd fac8 	bl	8001afc <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	2b02      	cmp	r3, #2
 8004574:	d901      	bls.n	800457a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004576:	2303      	movs	r3, #3
 8004578:	e193      	b.n	80048a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800457a:	4b1b      	ldr	r3, [pc, #108]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0302 	and.w	r3, r3, #2
 8004582:	2b00      	cmp	r3, #0
 8004584:	d1f0      	bne.n	8004568 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 0308 	and.w	r3, r3, #8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d036      	beq.n	8004600 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	695b      	ldr	r3, [r3, #20]
 8004596:	2b00      	cmp	r3, #0
 8004598:	d016      	beq.n	80045c8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800459a:	4b15      	ldr	r3, [pc, #84]	; (80045f0 <HAL_RCC_OscConfig+0x27c>)
 800459c:	2201      	movs	r2, #1
 800459e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045a0:	f7fd faac 	bl	8001afc <HAL_GetTick>
 80045a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045a6:	e008      	b.n	80045ba <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045a8:	f7fd faa8 	bl	8001afc <HAL_GetTick>
 80045ac:	4602      	mov	r2, r0
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	1ad3      	subs	r3, r2, r3
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d901      	bls.n	80045ba <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e173      	b.n	80048a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80045ba:	4b0b      	ldr	r3, [pc, #44]	; (80045e8 <HAL_RCC_OscConfig+0x274>)
 80045bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045be:	f003 0302 	and.w	r3, r3, #2
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d0f0      	beq.n	80045a8 <HAL_RCC_OscConfig+0x234>
 80045c6:	e01b      	b.n	8004600 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80045c8:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <HAL_RCC_OscConfig+0x27c>)
 80045ca:	2200      	movs	r2, #0
 80045cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80045ce:	f7fd fa95 	bl	8001afc <HAL_GetTick>
 80045d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045d4:	e00e      	b.n	80045f4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80045d6:	f7fd fa91 	bl	8001afc <HAL_GetTick>
 80045da:	4602      	mov	r2, r0
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	1ad3      	subs	r3, r2, r3
 80045e0:	2b02      	cmp	r3, #2
 80045e2:	d907      	bls.n	80045f4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80045e4:	2303      	movs	r3, #3
 80045e6:	e15c      	b.n	80048a2 <HAL_RCC_OscConfig+0x52e>
 80045e8:	40023800 	.word	0x40023800
 80045ec:	42470000 	.word	0x42470000
 80045f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80045f4:	4b8a      	ldr	r3, [pc, #552]	; (8004820 <HAL_RCC_OscConfig+0x4ac>)
 80045f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045f8:	f003 0302 	and.w	r3, r3, #2
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1ea      	bne.n	80045d6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f003 0304 	and.w	r3, r3, #4
 8004608:	2b00      	cmp	r3, #0
 800460a:	f000 8097 	beq.w	800473c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800460e:	2300      	movs	r3, #0
 8004610:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004612:	4b83      	ldr	r3, [pc, #524]	; (8004820 <HAL_RCC_OscConfig+0x4ac>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800461a:	2b00      	cmp	r3, #0
 800461c:	d10f      	bne.n	800463e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800461e:	2300      	movs	r3, #0
 8004620:	60bb      	str	r3, [r7, #8]
 8004622:	4b7f      	ldr	r3, [pc, #508]	; (8004820 <HAL_RCC_OscConfig+0x4ac>)
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	4a7e      	ldr	r2, [pc, #504]	; (8004820 <HAL_RCC_OscConfig+0x4ac>)
 8004628:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800462c:	6413      	str	r3, [r2, #64]	; 0x40
 800462e:	4b7c      	ldr	r3, [pc, #496]	; (8004820 <HAL_RCC_OscConfig+0x4ac>)
 8004630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004636:	60bb      	str	r3, [r7, #8]
 8004638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800463a:	2301      	movs	r3, #1
 800463c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800463e:	4b79      	ldr	r3, [pc, #484]	; (8004824 <HAL_RCC_OscConfig+0x4b0>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004646:	2b00      	cmp	r3, #0
 8004648:	d118      	bne.n	800467c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800464a:	4b76      	ldr	r3, [pc, #472]	; (8004824 <HAL_RCC_OscConfig+0x4b0>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	4a75      	ldr	r2, [pc, #468]	; (8004824 <HAL_RCC_OscConfig+0x4b0>)
 8004650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004656:	f7fd fa51 	bl	8001afc <HAL_GetTick>
 800465a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800465c:	e008      	b.n	8004670 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800465e:	f7fd fa4d 	bl	8001afc <HAL_GetTick>
 8004662:	4602      	mov	r2, r0
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d901      	bls.n	8004670 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e118      	b.n	80048a2 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004670:	4b6c      	ldr	r3, [pc, #432]	; (8004824 <HAL_RCC_OscConfig+0x4b0>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004678:	2b00      	cmp	r3, #0
 800467a:	d0f0      	beq.n	800465e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d106      	bne.n	8004692 <HAL_RCC_OscConfig+0x31e>
 8004684:	4b66      	ldr	r3, [pc, #408]	; (8004820 <HAL_RCC_OscConfig+0x4ac>)
 8004686:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004688:	4a65      	ldr	r2, [pc, #404]	; (8004820 <HAL_RCC_OscConfig+0x4ac>)
 800468a:	f043 0301 	orr.w	r3, r3, #1
 800468e:	6713      	str	r3, [r2, #112]	; 0x70
 8004690:	e01c      	b.n	80046cc <HAL_RCC_OscConfig+0x358>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2b05      	cmp	r3, #5
 8004698:	d10c      	bne.n	80046b4 <HAL_RCC_OscConfig+0x340>
 800469a:	4b61      	ldr	r3, [pc, #388]	; (8004820 <HAL_RCC_OscConfig+0x4ac>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469e:	4a60      	ldr	r2, [pc, #384]	; (8004820 <HAL_RCC_OscConfig+0x4ac>)
 80046a0:	f043 0304 	orr.w	r3, r3, #4
 80046a4:	6713      	str	r3, [r2, #112]	; 0x70
 80046a6:	4b5e      	ldr	r3, [pc, #376]	; (8004820 <HAL_RCC_OscConfig+0x4ac>)
 80046a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046aa:	4a5d      	ldr	r2, [pc, #372]	; (8004820 <HAL_RCC_OscConfig+0x4ac>)
 80046ac:	f043 0301 	orr.w	r3, r3, #1
 80046b0:	6713      	str	r3, [r2, #112]	; 0x70
 80046b2:	e00b      	b.n	80046cc <HAL_RCC_OscConfig+0x358>
 80046b4:	4b5a      	ldr	r3, [pc, #360]	; (8004820 <HAL_RCC_OscConfig+0x4ac>)
 80046b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b8:	4a59      	ldr	r2, [pc, #356]	; (8004820 <HAL_RCC_OscConfig+0x4ac>)
 80046ba:	f023 0301 	bic.w	r3, r3, #1
 80046be:	6713      	str	r3, [r2, #112]	; 0x70
 80046c0:	4b57      	ldr	r3, [pc, #348]	; (8004820 <HAL_RCC_OscConfig+0x4ac>)
 80046c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046c4:	4a56      	ldr	r2, [pc, #344]	; (8004820 <HAL_RCC_OscConfig+0x4ac>)
 80046c6:	f023 0304 	bic.w	r3, r3, #4
 80046ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d015      	beq.n	8004700 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046d4:	f7fd fa12 	bl	8001afc <HAL_GetTick>
 80046d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046da:	e00a      	b.n	80046f2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046dc:	f7fd fa0e 	bl	8001afc <HAL_GetTick>
 80046e0:	4602      	mov	r2, r0
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d901      	bls.n	80046f2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80046ee:	2303      	movs	r3, #3
 80046f0:	e0d7      	b.n	80048a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046f2:	4b4b      	ldr	r3, [pc, #300]	; (8004820 <HAL_RCC_OscConfig+0x4ac>)
 80046f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046f6:	f003 0302 	and.w	r3, r3, #2
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d0ee      	beq.n	80046dc <HAL_RCC_OscConfig+0x368>
 80046fe:	e014      	b.n	800472a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004700:	f7fd f9fc 	bl	8001afc <HAL_GetTick>
 8004704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004706:	e00a      	b.n	800471e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004708:	f7fd f9f8 	bl	8001afc <HAL_GetTick>
 800470c:	4602      	mov	r2, r0
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	1ad3      	subs	r3, r2, r3
 8004712:	f241 3288 	movw	r2, #5000	; 0x1388
 8004716:	4293      	cmp	r3, r2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e0c1      	b.n	80048a2 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800471e:	4b40      	ldr	r3, [pc, #256]	; (8004820 <HAL_RCC_OscConfig+0x4ac>)
 8004720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1ee      	bne.n	8004708 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800472a:	7dfb      	ldrb	r3, [r7, #23]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d105      	bne.n	800473c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004730:	4b3b      	ldr	r3, [pc, #236]	; (8004820 <HAL_RCC_OscConfig+0x4ac>)
 8004732:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004734:	4a3a      	ldr	r2, [pc, #232]	; (8004820 <HAL_RCC_OscConfig+0x4ac>)
 8004736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800473a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	2b00      	cmp	r3, #0
 8004742:	f000 80ad 	beq.w	80048a0 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004746:	4b36      	ldr	r3, [pc, #216]	; (8004820 <HAL_RCC_OscConfig+0x4ac>)
 8004748:	689b      	ldr	r3, [r3, #8]
 800474a:	f003 030c 	and.w	r3, r3, #12
 800474e:	2b08      	cmp	r3, #8
 8004750:	d060      	beq.n	8004814 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	699b      	ldr	r3, [r3, #24]
 8004756:	2b02      	cmp	r3, #2
 8004758:	d145      	bne.n	80047e6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800475a:	4b33      	ldr	r3, [pc, #204]	; (8004828 <HAL_RCC_OscConfig+0x4b4>)
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004760:	f7fd f9cc 	bl	8001afc <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004768:	f7fd f9c8 	bl	8001afc <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e093      	b.n	80048a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477a:	4b29      	ldr	r3, [pc, #164]	; (8004820 <HAL_RCC_OscConfig+0x4ac>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1f0      	bne.n	8004768 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69da      	ldr	r2, [r3, #28]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	431a      	orrs	r2, r3
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	019b      	lsls	r3, r3, #6
 8004796:	431a      	orrs	r2, r3
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800479c:	085b      	lsrs	r3, r3, #1
 800479e:	3b01      	subs	r3, #1
 80047a0:	041b      	lsls	r3, r3, #16
 80047a2:	431a      	orrs	r2, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a8:	061b      	lsls	r3, r3, #24
 80047aa:	431a      	orrs	r2, r3
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b0:	071b      	lsls	r3, r3, #28
 80047b2:	491b      	ldr	r1, [pc, #108]	; (8004820 <HAL_RCC_OscConfig+0x4ac>)
 80047b4:	4313      	orrs	r3, r2
 80047b6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80047b8:	4b1b      	ldr	r3, [pc, #108]	; (8004828 <HAL_RCC_OscConfig+0x4b4>)
 80047ba:	2201      	movs	r2, #1
 80047bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047be:	f7fd f99d 	bl	8001afc <HAL_GetTick>
 80047c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047c4:	e008      	b.n	80047d8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047c6:	f7fd f999 	bl	8001afc <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	693b      	ldr	r3, [r7, #16]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b02      	cmp	r3, #2
 80047d2:	d901      	bls.n	80047d8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80047d4:	2303      	movs	r3, #3
 80047d6:	e064      	b.n	80048a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047d8:	4b11      	ldr	r3, [pc, #68]	; (8004820 <HAL_RCC_OscConfig+0x4ac>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d0f0      	beq.n	80047c6 <HAL_RCC_OscConfig+0x452>
 80047e4:	e05c      	b.n	80048a0 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047e6:	4b10      	ldr	r3, [pc, #64]	; (8004828 <HAL_RCC_OscConfig+0x4b4>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047ec:	f7fd f986 	bl	8001afc <HAL_GetTick>
 80047f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047f2:	e008      	b.n	8004806 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80047f4:	f7fd f982 	bl	8001afc <HAL_GetTick>
 80047f8:	4602      	mov	r2, r0
 80047fa:	693b      	ldr	r3, [r7, #16]
 80047fc:	1ad3      	subs	r3, r2, r3
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d901      	bls.n	8004806 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004802:	2303      	movs	r3, #3
 8004804:	e04d      	b.n	80048a2 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004806:	4b06      	ldr	r3, [pc, #24]	; (8004820 <HAL_RCC_OscConfig+0x4ac>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800480e:	2b00      	cmp	r3, #0
 8004810:	d1f0      	bne.n	80047f4 <HAL_RCC_OscConfig+0x480>
 8004812:	e045      	b.n	80048a0 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	699b      	ldr	r3, [r3, #24]
 8004818:	2b01      	cmp	r3, #1
 800481a:	d107      	bne.n	800482c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800481c:	2301      	movs	r3, #1
 800481e:	e040      	b.n	80048a2 <HAL_RCC_OscConfig+0x52e>
 8004820:	40023800 	.word	0x40023800
 8004824:	40007000 	.word	0x40007000
 8004828:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800482c:	4b1f      	ldr	r3, [pc, #124]	; (80048ac <HAL_RCC_OscConfig+0x538>)
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	2b01      	cmp	r3, #1
 8004838:	d030      	beq.n	800489c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004844:	429a      	cmp	r2, r3
 8004846:	d129      	bne.n	800489c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004852:	429a      	cmp	r2, r3
 8004854:	d122      	bne.n	800489c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800485c:	4013      	ands	r3, r2
 800485e:	687a      	ldr	r2, [r7, #4]
 8004860:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004862:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004864:	4293      	cmp	r3, r2
 8004866:	d119      	bne.n	800489c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004872:	085b      	lsrs	r3, r3, #1
 8004874:	3b01      	subs	r3, #1
 8004876:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004878:	429a      	cmp	r2, r3
 800487a:	d10f      	bne.n	800489c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004886:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004888:	429a      	cmp	r2, r3
 800488a:	d107      	bne.n	800489c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004896:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004898:	429a      	cmp	r2, r3
 800489a:	d001      	beq.n	80048a0 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800489c:	2301      	movs	r3, #1
 800489e:	e000      	b.n	80048a2 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80048a0:	2300      	movs	r3, #0
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3718      	adds	r7, #24
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
 80048aa:	bf00      	nop
 80048ac:	40023800 	.word	0x40023800

080048b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e041      	b.n	8004946 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048c8:	b2db      	uxtb	r3, r3
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d106      	bne.n	80048dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2200      	movs	r2, #0
 80048d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80048d6:	6878      	ldr	r0, [r7, #4]
 80048d8:	f7fc fdfe 	bl	80014d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2202      	movs	r2, #2
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681a      	ldr	r2, [r3, #0]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	3304      	adds	r3, #4
 80048ec:	4619      	mov	r1, r3
 80048ee:	4610      	mov	r0, r2
 80048f0:	f000 f9ce 	bl	8004c90 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3708      	adds	r7, #8
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}
	...

08004950 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004950:	b480      	push	{r7}
 8004952:	b085      	sub	sp, #20
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800495e:	b2db      	uxtb	r3, r3
 8004960:	2b01      	cmp	r3, #1
 8004962:	d001      	beq.n	8004968 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004964:	2301      	movs	r3, #1
 8004966:	e04e      	b.n	8004a06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2202      	movs	r2, #2
 800496c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	68da      	ldr	r2, [r3, #12]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f042 0201 	orr.w	r2, r2, #1
 800497e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a23      	ldr	r2, [pc, #140]	; (8004a14 <HAL_TIM_Base_Start_IT+0xc4>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d022      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x80>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004992:	d01d      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x80>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a1f      	ldr	r2, [pc, #124]	; (8004a18 <HAL_TIM_Base_Start_IT+0xc8>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d018      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x80>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	4a1e      	ldr	r2, [pc, #120]	; (8004a1c <HAL_TIM_Base_Start_IT+0xcc>)
 80049a4:	4293      	cmp	r3, r2
 80049a6:	d013      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x80>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	4a1c      	ldr	r2, [pc, #112]	; (8004a20 <HAL_TIM_Base_Start_IT+0xd0>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00e      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x80>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	4a1b      	ldr	r2, [pc, #108]	; (8004a24 <HAL_TIM_Base_Start_IT+0xd4>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d009      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x80>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	4a19      	ldr	r2, [pc, #100]	; (8004a28 <HAL_TIM_Base_Start_IT+0xd8>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d004      	beq.n	80049d0 <HAL_TIM_Base_Start_IT+0x80>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a18      	ldr	r2, [pc, #96]	; (8004a2c <HAL_TIM_Base_Start_IT+0xdc>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d111      	bne.n	80049f4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	f003 0307 	and.w	r3, r3, #7
 80049da:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	2b06      	cmp	r3, #6
 80049e0:	d010      	beq.n	8004a04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	681a      	ldr	r2, [r3, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f042 0201 	orr.w	r2, r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049f2:	e007      	b.n	8004a04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	681a      	ldr	r2, [r3, #0]
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f042 0201 	orr.w	r2, r2, #1
 8004a02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3714      	adds	r7, #20
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a10:	4770      	bx	lr
 8004a12:	bf00      	nop
 8004a14:	40010000 	.word	0x40010000
 8004a18:	40000400 	.word	0x40000400
 8004a1c:	40000800 	.word	0x40000800
 8004a20:	40000c00 	.word	0x40000c00
 8004a24:	40010400 	.word	0x40010400
 8004a28:	40014000 	.word	0x40014000
 8004a2c:	40001800 	.word	0x40001800

08004a30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b082      	sub	sp, #8
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f003 0302 	and.w	r3, r3, #2
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d122      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d11b      	bne.n	8004a8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f06f 0202 	mvn.w	r2, #2
 8004a5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	699b      	ldr	r3, [r3, #24]
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d003      	beq.n	8004a7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f8ee 	bl	8004c54 <HAL_TIM_IC_CaptureCallback>
 8004a78:	e005      	b.n	8004a86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f8e0 	bl	8004c40 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a80:	6878      	ldr	r0, [r7, #4]
 8004a82:	f000 f8f1 	bl	8004c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2200      	movs	r2, #0
 8004a8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	691b      	ldr	r3, [r3, #16]
 8004a92:	f003 0304 	and.w	r3, r3, #4
 8004a96:	2b04      	cmp	r3, #4
 8004a98:	d122      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	f003 0304 	and.w	r3, r3, #4
 8004aa4:	2b04      	cmp	r3, #4
 8004aa6:	d11b      	bne.n	8004ae0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f06f 0204 	mvn.w	r2, #4
 8004ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2202      	movs	r2, #2
 8004ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	699b      	ldr	r3, [r3, #24]
 8004abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d003      	beq.n	8004ace <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 f8c4 	bl	8004c54 <HAL_TIM_IC_CaptureCallback>
 8004acc:	e005      	b.n	8004ada <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ace:	6878      	ldr	r0, [r7, #4]
 8004ad0:	f000 f8b6 	bl	8004c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004ad4:	6878      	ldr	r0, [r7, #4]
 8004ad6:	f000 f8c7 	bl	8004c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	f003 0308 	and.w	r3, r3, #8
 8004aea:	2b08      	cmp	r3, #8
 8004aec:	d122      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	68db      	ldr	r3, [r3, #12]
 8004af4:	f003 0308 	and.w	r3, r3, #8
 8004af8:	2b08      	cmp	r3, #8
 8004afa:	d11b      	bne.n	8004b34 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f06f 0208 	mvn.w	r2, #8
 8004b04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2204      	movs	r2, #4
 8004b0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d003      	beq.n	8004b22 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 f89a 	bl	8004c54 <HAL_TIM_IC_CaptureCallback>
 8004b20:	e005      	b.n	8004b2e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b22:	6878      	ldr	r0, [r7, #4]
 8004b24:	f000 f88c 	bl	8004c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	f000 f89d 	bl	8004c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	f003 0310 	and.w	r3, r3, #16
 8004b3e:	2b10      	cmp	r3, #16
 8004b40:	d122      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f003 0310 	and.w	r3, r3, #16
 8004b4c:	2b10      	cmp	r3, #16
 8004b4e:	d11b      	bne.n	8004b88 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f06f 0210 	mvn.w	r2, #16
 8004b58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2208      	movs	r2, #8
 8004b5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	69db      	ldr	r3, [r3, #28]
 8004b66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d003      	beq.n	8004b76 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 f870 	bl	8004c54 <HAL_TIM_IC_CaptureCallback>
 8004b74:	e005      	b.n	8004b82 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b76:	6878      	ldr	r0, [r7, #4]
 8004b78:	f000 f862 	bl	8004c40 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b7c:	6878      	ldr	r0, [r7, #4]
 8004b7e:	f000 f873 	bl	8004c68 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2200      	movs	r2, #0
 8004b86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	691b      	ldr	r3, [r3, #16]
 8004b8e:	f003 0301 	and.w	r3, r3, #1
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d10e      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	f003 0301 	and.w	r3, r3, #1
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d107      	bne.n	8004bb4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f06f 0201 	mvn.w	r2, #1
 8004bac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7fc fb00 	bl	80011b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bbe:	2b80      	cmp	r3, #128	; 0x80
 8004bc0:	d10e      	bne.n	8004be0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	68db      	ldr	r3, [r3, #12]
 8004bc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bcc:	2b80      	cmp	r3, #128	; 0x80
 8004bce:	d107      	bne.n	8004be0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004bd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f000 f97e 	bl	8004edc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bea:	2b40      	cmp	r3, #64	; 0x40
 8004bec:	d10e      	bne.n	8004c0c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004bf8:	2b40      	cmp	r3, #64	; 0x40
 8004bfa:	d107      	bne.n	8004c0c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f000 f838 	bl	8004c7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	691b      	ldr	r3, [r3, #16]
 8004c12:	f003 0320 	and.w	r3, r3, #32
 8004c16:	2b20      	cmp	r3, #32
 8004c18:	d10e      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f003 0320 	and.w	r3, r3, #32
 8004c24:	2b20      	cmp	r3, #32
 8004c26:	d107      	bne.n	8004c38 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	f06f 0220 	mvn.w	r2, #32
 8004c30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f000 f948 	bl	8004ec8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c38:	bf00      	nop
 8004c3a:	3708      	adds	r7, #8
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}

08004c40 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c40:	b480      	push	{r7}
 8004c42:	b083      	sub	sp, #12
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c48:	bf00      	nop
 8004c4a:	370c      	adds	r7, #12
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c52:	4770      	bx	lr

08004c54 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c5c:	bf00      	nop
 8004c5e:	370c      	adds	r7, #12
 8004c60:	46bd      	mov	sp, r7
 8004c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c66:	4770      	bx	lr

08004c68 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c68:	b480      	push	{r7}
 8004c6a:	b083      	sub	sp, #12
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c70:	bf00      	nop
 8004c72:	370c      	adds	r7, #12
 8004c74:	46bd      	mov	sp, r7
 8004c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7a:	4770      	bx	lr

08004c7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c7c:	b480      	push	{r7}
 8004c7e:	b083      	sub	sp, #12
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr

08004c90 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c90:	b480      	push	{r7}
 8004c92:	b085      	sub	sp, #20
 8004c94:	af00      	add	r7, sp, #0
 8004c96:	6078      	str	r0, [r7, #4]
 8004c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	4a40      	ldr	r2, [pc, #256]	; (8004da4 <TIM_Base_SetConfig+0x114>)
 8004ca4:	4293      	cmp	r3, r2
 8004ca6:	d013      	beq.n	8004cd0 <TIM_Base_SetConfig+0x40>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cae:	d00f      	beq.n	8004cd0 <TIM_Base_SetConfig+0x40>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	4a3d      	ldr	r2, [pc, #244]	; (8004da8 <TIM_Base_SetConfig+0x118>)
 8004cb4:	4293      	cmp	r3, r2
 8004cb6:	d00b      	beq.n	8004cd0 <TIM_Base_SetConfig+0x40>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	4a3c      	ldr	r2, [pc, #240]	; (8004dac <TIM_Base_SetConfig+0x11c>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d007      	beq.n	8004cd0 <TIM_Base_SetConfig+0x40>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	4a3b      	ldr	r2, [pc, #236]	; (8004db0 <TIM_Base_SetConfig+0x120>)
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d003      	beq.n	8004cd0 <TIM_Base_SetConfig+0x40>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	4a3a      	ldr	r2, [pc, #232]	; (8004db4 <TIM_Base_SetConfig+0x124>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d108      	bne.n	8004ce2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004cd6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	4a2f      	ldr	r2, [pc, #188]	; (8004da4 <TIM_Base_SetConfig+0x114>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d02b      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf0:	d027      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	4a2c      	ldr	r2, [pc, #176]	; (8004da8 <TIM_Base_SetConfig+0x118>)
 8004cf6:	4293      	cmp	r3, r2
 8004cf8:	d023      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	4a2b      	ldr	r2, [pc, #172]	; (8004dac <TIM_Base_SetConfig+0x11c>)
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d01f      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	4a2a      	ldr	r2, [pc, #168]	; (8004db0 <TIM_Base_SetConfig+0x120>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d01b      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	4a29      	ldr	r2, [pc, #164]	; (8004db4 <TIM_Base_SetConfig+0x124>)
 8004d0e:	4293      	cmp	r3, r2
 8004d10:	d017      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a28      	ldr	r2, [pc, #160]	; (8004db8 <TIM_Base_SetConfig+0x128>)
 8004d16:	4293      	cmp	r3, r2
 8004d18:	d013      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	4a27      	ldr	r2, [pc, #156]	; (8004dbc <TIM_Base_SetConfig+0x12c>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d00f      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	4a26      	ldr	r2, [pc, #152]	; (8004dc0 <TIM_Base_SetConfig+0x130>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d00b      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	4a25      	ldr	r2, [pc, #148]	; (8004dc4 <TIM_Base_SetConfig+0x134>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d007      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	4a24      	ldr	r2, [pc, #144]	; (8004dc8 <TIM_Base_SetConfig+0x138>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d003      	beq.n	8004d42 <TIM_Base_SetConfig+0xb2>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	4a23      	ldr	r2, [pc, #140]	; (8004dcc <TIM_Base_SetConfig+0x13c>)
 8004d3e:	4293      	cmp	r3, r2
 8004d40:	d108      	bne.n	8004d54 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	68db      	ldr	r3, [r3, #12]
 8004d4e:	68fa      	ldr	r2, [r7, #12]
 8004d50:	4313      	orrs	r3, r2
 8004d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	68fa      	ldr	r2, [r7, #12]
 8004d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	689a      	ldr	r2, [r3, #8]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	4a0a      	ldr	r2, [pc, #40]	; (8004da4 <TIM_Base_SetConfig+0x114>)
 8004d7c:	4293      	cmp	r3, r2
 8004d7e:	d003      	beq.n	8004d88 <TIM_Base_SetConfig+0xf8>
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	4a0c      	ldr	r2, [pc, #48]	; (8004db4 <TIM_Base_SetConfig+0x124>)
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d103      	bne.n	8004d90 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	691a      	ldr	r2, [r3, #16]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	615a      	str	r2, [r3, #20]
}
 8004d96:	bf00      	nop
 8004d98:	3714      	adds	r7, #20
 8004d9a:	46bd      	mov	sp, r7
 8004d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da0:	4770      	bx	lr
 8004da2:	bf00      	nop
 8004da4:	40010000 	.word	0x40010000
 8004da8:	40000400 	.word	0x40000400
 8004dac:	40000800 	.word	0x40000800
 8004db0:	40000c00 	.word	0x40000c00
 8004db4:	40010400 	.word	0x40010400
 8004db8:	40014000 	.word	0x40014000
 8004dbc:	40014400 	.word	0x40014400
 8004dc0:	40014800 	.word	0x40014800
 8004dc4:	40001800 	.word	0x40001800
 8004dc8:	40001c00 	.word	0x40001c00
 8004dcc:	40002000 	.word	0x40002000

08004dd0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b085      	sub	sp, #20
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d101      	bne.n	8004de8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004de4:	2302      	movs	r3, #2
 8004de6:	e05a      	b.n	8004e9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2202      	movs	r2, #2
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	689b      	ldr	r3, [r3, #8]
 8004e06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e10:	683b      	ldr	r3, [r7, #0]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	68fa      	ldr	r2, [r7, #12]
 8004e20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a21      	ldr	r2, [pc, #132]	; (8004eac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e28:	4293      	cmp	r3, r2
 8004e2a:	d022      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e34:	d01d      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	4a1d      	ldr	r2, [pc, #116]	; (8004eb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e3c:	4293      	cmp	r3, r2
 8004e3e:	d018      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	4a1b      	ldr	r2, [pc, #108]	; (8004eb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d013      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	4a1a      	ldr	r2, [pc, #104]	; (8004eb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e50:	4293      	cmp	r3, r2
 8004e52:	d00e      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	4a18      	ldr	r2, [pc, #96]	; (8004ebc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e5a:	4293      	cmp	r3, r2
 8004e5c:	d009      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	4a17      	ldr	r2, [pc, #92]	; (8004ec0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e64:	4293      	cmp	r3, r2
 8004e66:	d004      	beq.n	8004e72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4a15      	ldr	r2, [pc, #84]	; (8004ec4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e6e:	4293      	cmp	r3, r2
 8004e70:	d10c      	bne.n	8004e8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	685b      	ldr	r3, [r3, #4]
 8004e7e:	68ba      	ldr	r2, [r7, #8]
 8004e80:	4313      	orrs	r3, r2
 8004e82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	68ba      	ldr	r2, [r7, #8]
 8004e8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004e9c:	2300      	movs	r3, #0
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3714      	adds	r7, #20
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea8:	4770      	bx	lr
 8004eaa:	bf00      	nop
 8004eac:	40010000 	.word	0x40010000
 8004eb0:	40000400 	.word	0x40000400
 8004eb4:	40000800 	.word	0x40000800
 8004eb8:	40000c00 	.word	0x40000c00
 8004ebc:	40010400 	.word	0x40010400
 8004ec0:	40014000 	.word	0x40014000
 8004ec4:	40001800 	.word	0x40001800

08004ec8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b083      	sub	sp, #12
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ed0:	bf00      	nop
 8004ed2:	370c      	adds	r7, #12
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eda:	4770      	bx	lr

08004edc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004edc:	b480      	push	{r7}
 8004ede:	b083      	sub	sp, #12
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ee4:	bf00      	nop
 8004ee6:	370c      	adds	r7, #12
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr

08004ef0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b082      	sub	sp, #8
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e03f      	b.n	8004f82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d106      	bne.n	8004f1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2200      	movs	r2, #0
 8004f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f7fc fc4c 	bl	80017b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2224      	movs	r2, #36	; 0x24
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004f32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 ff9b 	bl	8005e70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	691a      	ldr	r2, [r3, #16]
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004f48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695a      	ldr	r2, [r3, #20]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004f58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68da      	ldr	r2, [r3, #12]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004f68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2220      	movs	r2, #32
 8004f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2220      	movs	r2, #32
 8004f7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004f80:	2300      	movs	r3, #0
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3708      	adds	r7, #8
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}

08004f8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004f8a:	b580      	push	{r7, lr}
 8004f8c:	b08a      	sub	sp, #40	; 0x28
 8004f8e:	af02      	add	r7, sp, #8
 8004f90:	60f8      	str	r0, [r7, #12]
 8004f92:	60b9      	str	r1, [r7, #8]
 8004f94:	603b      	str	r3, [r7, #0]
 8004f96:	4613      	mov	r3, r2
 8004f98:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	2b20      	cmp	r3, #32
 8004fa8:	d17c      	bne.n	80050a4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d002      	beq.n	8004fb6 <HAL_UART_Transmit+0x2c>
 8004fb0:	88fb      	ldrh	r3, [r7, #6]
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d101      	bne.n	8004fba <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e075      	b.n	80050a6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fc0:	2b01      	cmp	r3, #1
 8004fc2:	d101      	bne.n	8004fc8 <HAL_UART_Transmit+0x3e>
 8004fc4:	2302      	movs	r3, #2
 8004fc6:	e06e      	b.n	80050a6 <HAL_UART_Transmit+0x11c>
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	2221      	movs	r2, #33	; 0x21
 8004fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004fde:	f7fc fd8d 	bl	8001afc <HAL_GetTick>
 8004fe2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004fe4:	68fb      	ldr	r3, [r7, #12]
 8004fe6:	88fa      	ldrh	r2, [r7, #6]
 8004fe8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	88fa      	ldrh	r2, [r7, #6]
 8004fee:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ff8:	d108      	bne.n	800500c <HAL_UART_Transmit+0x82>
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d104      	bne.n	800500c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005002:	2300      	movs	r3, #0
 8005004:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	61bb      	str	r3, [r7, #24]
 800500a:	e003      	b.n	8005014 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005010:	2300      	movs	r3, #0
 8005012:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800501c:	e02a      	b.n	8005074 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	9300      	str	r3, [sp, #0]
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2200      	movs	r2, #0
 8005026:	2180      	movs	r1, #128	; 0x80
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f000 fc53 	bl	80058d4 <UART_WaitOnFlagUntilTimeout>
 800502e:	4603      	mov	r3, r0
 8005030:	2b00      	cmp	r3, #0
 8005032:	d001      	beq.n	8005038 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e036      	b.n	80050a6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005038:	69fb      	ldr	r3, [r7, #28]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10b      	bne.n	8005056 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	881b      	ldrh	r3, [r3, #0]
 8005042:	461a      	mov	r2, r3
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800504c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	3302      	adds	r3, #2
 8005052:	61bb      	str	r3, [r7, #24]
 8005054:	e007      	b.n	8005066 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005056:	69fb      	ldr	r3, [r7, #28]
 8005058:	781a      	ldrb	r2, [r3, #0]
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005060:	69fb      	ldr	r3, [r7, #28]
 8005062:	3301      	adds	r3, #1
 8005064:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800506a:	b29b      	uxth	r3, r3
 800506c:	3b01      	subs	r3, #1
 800506e:	b29a      	uxth	r2, r3
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005078:	b29b      	uxth	r3, r3
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1cf      	bne.n	800501e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	9300      	str	r3, [sp, #0]
 8005082:	697b      	ldr	r3, [r7, #20]
 8005084:	2200      	movs	r2, #0
 8005086:	2140      	movs	r1, #64	; 0x40
 8005088:	68f8      	ldr	r0, [r7, #12]
 800508a:	f000 fc23 	bl	80058d4 <UART_WaitOnFlagUntilTimeout>
 800508e:	4603      	mov	r3, r0
 8005090:	2b00      	cmp	r3, #0
 8005092:	d001      	beq.n	8005098 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e006      	b.n	80050a6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80050a0:	2300      	movs	r3, #0
 80050a2:	e000      	b.n	80050a6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80050a4:	2302      	movs	r3, #2
  }
}
 80050a6:	4618      	mov	r0, r3
 80050a8:	3720      	adds	r7, #32
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}

080050ae <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050ae:	b580      	push	{r7, lr}
 80050b0:	b08c      	sub	sp, #48	; 0x30
 80050b2:	af00      	add	r7, sp, #0
 80050b4:	60f8      	str	r0, [r7, #12]
 80050b6:	60b9      	str	r1, [r7, #8]
 80050b8:	4613      	mov	r3, r2
 80050ba:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80050c2:	b2db      	uxtb	r3, r3
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d152      	bne.n	800516e <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 80050c8:	68bb      	ldr	r3, [r7, #8]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d002      	beq.n	80050d4 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80050ce:	88fb      	ldrh	r3, [r7, #6]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e04b      	b.n	8005170 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d101      	bne.n	80050e6 <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 80050e2:	2302      	movs	r3, #2
 80050e4:	e044      	b.n	8005170 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2201      	movs	r2, #1
 80050f2:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80050f4:	88fb      	ldrh	r3, [r7, #6]
 80050f6:	461a      	mov	r2, r3
 80050f8:	68b9      	ldr	r1, [r7, #8]
 80050fa:	68f8      	ldr	r0, [r7, #12]
 80050fc:	f000 fc58 	bl	80059b0 <UART_Start_Receive_DMA>
 8005100:	4603      	mov	r3, r0
 8005102:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8005106:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800510a:	2b00      	cmp	r3, #0
 800510c:	d12c      	bne.n	8005168 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005112:	2b01      	cmp	r3, #1
 8005114:	d125      	bne.n	8005162 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005116:	2300      	movs	r3, #0
 8005118:	613b      	str	r3, [r7, #16]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	613b      	str	r3, [r7, #16]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	613b      	str	r3, [r7, #16]
 800512a:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	330c      	adds	r3, #12
 8005132:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	69bb      	ldr	r3, [r7, #24]
 8005136:	e853 3f00 	ldrex	r3, [r3]
 800513a:	617b      	str	r3, [r7, #20]
   return(result);
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	f043 0310 	orr.w	r3, r3, #16
 8005142:	62bb      	str	r3, [r7, #40]	; 0x28
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	330c      	adds	r3, #12
 800514a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800514c:	627a      	str	r2, [r7, #36]	; 0x24
 800514e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005150:	6a39      	ldr	r1, [r7, #32]
 8005152:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005154:	e841 2300 	strex	r3, r2, [r1]
 8005158:	61fb      	str	r3, [r7, #28]
   return(result);
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d1e5      	bne.n	800512c <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8005160:	e002      	b.n	8005168 <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 8005168:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800516c:	e000      	b.n	8005170 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 800516e:	2302      	movs	r3, #2
  }
}
 8005170:	4618      	mov	r0, r3
 8005172:	3730      	adds	r7, #48	; 0x30
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005178:	b580      	push	{r7, lr}
 800517a:	b0ba      	sub	sp, #232	; 0xe8
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	695b      	ldr	r3, [r3, #20]
 800519a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800519e:	2300      	movs	r3, #0
 80051a0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80051aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ae:	f003 030f 	and.w	r3, r3, #15
 80051b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80051b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d10f      	bne.n	80051de <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80051be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051c2:	f003 0320 	and.w	r3, r3, #32
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d009      	beq.n	80051de <HAL_UART_IRQHandler+0x66>
 80051ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051ce:	f003 0320 	and.w	r3, r3, #32
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d003      	beq.n	80051de <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fd8f 	bl	8005cfa <UART_Receive_IT>
      return;
 80051dc:	e256      	b.n	800568c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80051de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	f000 80de 	beq.w	80053a4 <HAL_UART_IRQHandler+0x22c>
 80051e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80051ec:	f003 0301 	and.w	r3, r3, #1
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d106      	bne.n	8005202 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80051f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051f8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	f000 80d1 	beq.w	80053a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005202:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005206:	f003 0301 	and.w	r3, r3, #1
 800520a:	2b00      	cmp	r3, #0
 800520c:	d00b      	beq.n	8005226 <HAL_UART_IRQHandler+0xae>
 800520e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005212:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005216:	2b00      	cmp	r3, #0
 8005218:	d005      	beq.n	8005226 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800521e:	f043 0201 	orr.w	r2, r3, #1
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005226:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800522a:	f003 0304 	and.w	r3, r3, #4
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00b      	beq.n	800524a <HAL_UART_IRQHandler+0xd2>
 8005232:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005236:	f003 0301 	and.w	r3, r3, #1
 800523a:	2b00      	cmp	r3, #0
 800523c:	d005      	beq.n	800524a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005242:	f043 0202 	orr.w	r2, r3, #2
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800524a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d00b      	beq.n	800526e <HAL_UART_IRQHandler+0xf6>
 8005256:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d005      	beq.n	800526e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005266:	f043 0204 	orr.w	r2, r3, #4
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800526e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005272:	f003 0308 	and.w	r3, r3, #8
 8005276:	2b00      	cmp	r3, #0
 8005278:	d011      	beq.n	800529e <HAL_UART_IRQHandler+0x126>
 800527a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800527e:	f003 0320 	and.w	r3, r3, #32
 8005282:	2b00      	cmp	r3, #0
 8005284:	d105      	bne.n	8005292 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005286:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d005      	beq.n	800529e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005296:	f043 0208 	orr.w	r2, r3, #8
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	f000 81ed 	beq.w	8005682 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80052a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80052ac:	f003 0320 	and.w	r3, r3, #32
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d008      	beq.n	80052c6 <HAL_UART_IRQHandler+0x14e>
 80052b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80052b8:	f003 0320 	and.w	r3, r3, #32
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d002      	beq.n	80052c6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fd1a 	bl	8005cfa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	695b      	ldr	r3, [r3, #20]
 80052cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d0:	2b40      	cmp	r3, #64	; 0x40
 80052d2:	bf0c      	ite	eq
 80052d4:	2301      	moveq	r3, #1
 80052d6:	2300      	movne	r3, #0
 80052d8:	b2db      	uxtb	r3, r3
 80052da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e2:	f003 0308 	and.w	r3, r3, #8
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d103      	bne.n	80052f2 <HAL_UART_IRQHandler+0x17a>
 80052ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d04f      	beq.n	8005392 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 fc22 	bl	8005b3c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005302:	2b40      	cmp	r3, #64	; 0x40
 8005304:	d141      	bne.n	800538a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3314      	adds	r3, #20
 800530c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005314:	e853 3f00 	ldrex	r3, [r3]
 8005318:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800531c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005324:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	3314      	adds	r3, #20
 800532e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005332:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005336:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800533e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005342:	e841 2300 	strex	r3, r2, [r1]
 8005346:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800534a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800534e:	2b00      	cmp	r3, #0
 8005350:	d1d9      	bne.n	8005306 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005356:	2b00      	cmp	r3, #0
 8005358:	d013      	beq.n	8005382 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800535e:	4a7d      	ldr	r2, [pc, #500]	; (8005554 <HAL_UART_IRQHandler+0x3dc>)
 8005360:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005366:	4618      	mov	r0, r3
 8005368:	f7fd f89a 	bl	80024a0 <HAL_DMA_Abort_IT>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d016      	beq.n	80053a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800537c:	4610      	mov	r0, r2
 800537e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005380:	e00e      	b.n	80053a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f000 f9a4 	bl	80056d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005388:	e00a      	b.n	80053a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f9a0 	bl	80056d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005390:	e006      	b.n	80053a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f99c 	bl	80056d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800539e:	e170      	b.n	8005682 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053a0:	bf00      	nop
    return;
 80053a2:	e16e      	b.n	8005682 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	f040 814a 	bne.w	8005642 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80053ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053b2:	f003 0310 	and.w	r3, r3, #16
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	f000 8143 	beq.w	8005642 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80053bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053c0:	f003 0310 	and.w	r3, r3, #16
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	f000 813c 	beq.w	8005642 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053ca:	2300      	movs	r3, #0
 80053cc:	60bb      	str	r3, [r7, #8]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	60bb      	str	r3, [r7, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	60bb      	str	r3, [r7, #8]
 80053de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695b      	ldr	r3, [r3, #20]
 80053e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053ea:	2b40      	cmp	r3, #64	; 0x40
 80053ec:	f040 80b4 	bne.w	8005558 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80053fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 8140 	beq.w	8005686 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800540a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800540e:	429a      	cmp	r2, r3
 8005410:	f080 8139 	bcs.w	8005686 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800541a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005420:	69db      	ldr	r3, [r3, #28]
 8005422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005426:	f000 8088 	beq.w	800553a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	330c      	adds	r3, #12
 8005430:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005434:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005438:	e853 3f00 	ldrex	r3, [r3]
 800543c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005440:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005444:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005448:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	330c      	adds	r3, #12
 8005452:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005456:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800545a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800545e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005462:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005466:	e841 2300 	strex	r3, r2, [r1]
 800546a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800546e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1d9      	bne.n	800542a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	3314      	adds	r3, #20
 800547c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800547e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005480:	e853 3f00 	ldrex	r3, [r3]
 8005484:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005486:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005488:	f023 0301 	bic.w	r3, r3, #1
 800548c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	3314      	adds	r3, #20
 8005496:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800549a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800549e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80054a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80054a6:	e841 2300 	strex	r3, r2, [r1]
 80054aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80054ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1e1      	bne.n	8005476 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	3314      	adds	r3, #20
 80054b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80054bc:	e853 3f00 	ldrex	r3, [r3]
 80054c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80054c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	3314      	adds	r3, #20
 80054d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80054d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80054d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80054dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80054de:	e841 2300 	strex	r3, r2, [r1]
 80054e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80054e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d1e3      	bne.n	80054b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	330c      	adds	r3, #12
 80054fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005500:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005502:	e853 3f00 	ldrex	r3, [r3]
 8005506:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005508:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800550a:	f023 0310 	bic.w	r3, r3, #16
 800550e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	330c      	adds	r3, #12
 8005518:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800551c:	65ba      	str	r2, [r7, #88]	; 0x58
 800551e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005520:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005522:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005524:	e841 2300 	strex	r3, r2, [r1]
 8005528:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800552a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800552c:	2b00      	cmp	r3, #0
 800552e:	d1e3      	bne.n	80054f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005534:	4618      	mov	r0, r3
 8005536:	f7fc ff43 	bl	80023c0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005542:	b29b      	uxth	r3, r3
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	b29b      	uxth	r3, r3
 8005548:	4619      	mov	r1, r3
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f7fb fdfe 	bl	800114c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005550:	e099      	b.n	8005686 <HAL_UART_IRQHandler+0x50e>
 8005552:	bf00      	nop
 8005554:	08005c03 	.word	0x08005c03
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005560:	b29b      	uxth	r3, r3
 8005562:	1ad3      	subs	r3, r2, r3
 8005564:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800556c:	b29b      	uxth	r3, r3
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 808b 	beq.w	800568a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005574:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005578:	2b00      	cmp	r3, #0
 800557a:	f000 8086 	beq.w	800568a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	330c      	adds	r3, #12
 8005584:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005588:	e853 3f00 	ldrex	r3, [r3]
 800558c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800558e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005590:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005594:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	330c      	adds	r3, #12
 800559e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80055a2:	647a      	str	r2, [r7, #68]	; 0x44
 80055a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80055a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80055aa:	e841 2300 	strex	r3, r2, [r1]
 80055ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80055b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1e3      	bne.n	800557e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	3314      	adds	r3, #20
 80055bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c0:	e853 3f00 	ldrex	r3, [r3]
 80055c4:	623b      	str	r3, [r7, #32]
   return(result);
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	f023 0301 	bic.w	r3, r3, #1
 80055cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	3314      	adds	r3, #20
 80055d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80055da:	633a      	str	r2, [r7, #48]	; 0x30
 80055dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80055e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055e2:	e841 2300 	strex	r3, r2, [r1]
 80055e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80055e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1e3      	bne.n	80055b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	2220      	movs	r2, #32
 80055f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2200      	movs	r2, #0
 80055fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	330c      	adds	r3, #12
 8005602:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	e853 3f00 	ldrex	r3, [r3]
 800560a:	60fb      	str	r3, [r7, #12]
   return(result);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f023 0310 	bic.w	r3, r3, #16
 8005612:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	330c      	adds	r3, #12
 800561c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005620:	61fa      	str	r2, [r7, #28]
 8005622:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005624:	69b9      	ldr	r1, [r7, #24]
 8005626:	69fa      	ldr	r2, [r7, #28]
 8005628:	e841 2300 	strex	r3, r2, [r1]
 800562c:	617b      	str	r3, [r7, #20]
   return(result);
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1e3      	bne.n	80055fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005634:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005638:	4619      	mov	r1, r3
 800563a:	6878      	ldr	r0, [r7, #4]
 800563c:	f7fb fd86 	bl	800114c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005640:	e023      	b.n	800568a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800564a:	2b00      	cmp	r3, #0
 800564c:	d009      	beq.n	8005662 <HAL_UART_IRQHandler+0x4ea>
 800564e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005656:	2b00      	cmp	r3, #0
 8005658:	d003      	beq.n	8005662 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f000 fae5 	bl	8005c2a <UART_Transmit_IT>
    return;
 8005660:	e014      	b.n	800568c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00e      	beq.n	800568c <HAL_UART_IRQHandler+0x514>
 800566e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005672:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005676:	2b00      	cmp	r3, #0
 8005678:	d008      	beq.n	800568c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800567a:	6878      	ldr	r0, [r7, #4]
 800567c:	f000 fb25 	bl	8005cca <UART_EndTransmit_IT>
    return;
 8005680:	e004      	b.n	800568c <HAL_UART_IRQHandler+0x514>
    return;
 8005682:	bf00      	nop
 8005684:	e002      	b.n	800568c <HAL_UART_IRQHandler+0x514>
      return;
 8005686:	bf00      	nop
 8005688:	e000      	b.n	800568c <HAL_UART_IRQHandler+0x514>
      return;
 800568a:	bf00      	nop
  }
}
 800568c:	37e8      	adds	r7, #232	; 0xe8
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop

08005694 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005694:	b480      	push	{r7}
 8005696:	b083      	sub	sp, #12
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800569c:	bf00      	nop
 800569e:	370c      	adds	r7, #12
 80056a0:	46bd      	mov	sp, r7
 80056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a6:	4770      	bx	lr

080056a8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80056a8:	b480      	push	{r7}
 80056aa:	b083      	sub	sp, #12
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr

080056bc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80056bc:	b480      	push	{r7}
 80056be:	b083      	sub	sp, #12
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80056c4:	bf00      	nop
 80056c6:	370c      	adds	r7, #12
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b083      	sub	sp, #12
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b09c      	sub	sp, #112	; 0x70
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056f0:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d172      	bne.n	80057e6 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005700:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005702:	2200      	movs	r2, #0
 8005704:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	330c      	adds	r3, #12
 800570c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005710:	e853 3f00 	ldrex	r3, [r3]
 8005714:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005716:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005718:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800571c:	66bb      	str	r3, [r7, #104]	; 0x68
 800571e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	330c      	adds	r3, #12
 8005724:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005726:	65ba      	str	r2, [r7, #88]	; 0x58
 8005728:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800572c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800572e:	e841 2300 	strex	r3, r2, [r1]
 8005732:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005734:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1e5      	bne.n	8005706 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800573a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	3314      	adds	r3, #20
 8005740:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005744:	e853 3f00 	ldrex	r3, [r3]
 8005748:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800574a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800574c:	f023 0301 	bic.w	r3, r3, #1
 8005750:	667b      	str	r3, [r7, #100]	; 0x64
 8005752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	3314      	adds	r3, #20
 8005758:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800575a:	647a      	str	r2, [r7, #68]	; 0x44
 800575c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800575e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005760:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005762:	e841 2300 	strex	r3, r2, [r1]
 8005766:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005768:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1e5      	bne.n	800573a <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800576e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3314      	adds	r3, #20
 8005774:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005778:	e853 3f00 	ldrex	r3, [r3]
 800577c:	623b      	str	r3, [r7, #32]
   return(result);
 800577e:	6a3b      	ldr	r3, [r7, #32]
 8005780:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005784:	663b      	str	r3, [r7, #96]	; 0x60
 8005786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	3314      	adds	r3, #20
 800578c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800578e:	633a      	str	r2, [r7, #48]	; 0x30
 8005790:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005792:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005796:	e841 2300 	strex	r3, r2, [r1]
 800579a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1e5      	bne.n	800576e <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80057a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057a4:	2220      	movs	r2, #32
 80057a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ae:	2b01      	cmp	r3, #1
 80057b0:	d119      	bne.n	80057e6 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	330c      	adds	r3, #12
 80057b8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ba:	693b      	ldr	r3, [r7, #16]
 80057bc:	e853 3f00 	ldrex	r3, [r3]
 80057c0:	60fb      	str	r3, [r7, #12]
   return(result);
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	f023 0310 	bic.w	r3, r3, #16
 80057c8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80057ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	330c      	adds	r3, #12
 80057d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80057d2:	61fa      	str	r2, [r7, #28]
 80057d4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057d6:	69b9      	ldr	r1, [r7, #24]
 80057d8:	69fa      	ldr	r2, [r7, #28]
 80057da:	e841 2300 	strex	r3, r2, [r1]
 80057de:	617b      	str	r3, [r7, #20]
   return(result);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d1e5      	bne.n	80057b2 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057ea:	2b01      	cmp	r3, #1
 80057ec:	d106      	bne.n	80057fc <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057f0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80057f2:	4619      	mov	r1, r3
 80057f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80057f6:	f7fb fca9 	bl	800114c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80057fa:	e002      	b.n	8005802 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 80057fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80057fe:	f7ff ff53 	bl	80056a8 <HAL_UART_RxCpltCallback>
}
 8005802:	bf00      	nop
 8005804:	3770      	adds	r7, #112	; 0x70
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}

0800580a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800580a:	b580      	push	{r7, lr}
 800580c:	b084      	sub	sp, #16
 800580e:	af00      	add	r7, sp, #0
 8005810:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005816:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800581c:	2b01      	cmp	r3, #1
 800581e:	d108      	bne.n	8005832 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005824:	085b      	lsrs	r3, r3, #1
 8005826:	b29b      	uxth	r3, r3
 8005828:	4619      	mov	r1, r3
 800582a:	68f8      	ldr	r0, [r7, #12]
 800582c:	f7fb fc8e 	bl	800114c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005830:	e002      	b.n	8005838 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f7ff ff42 	bl	80056bc <HAL_UART_RxHalfCpltCallback>
}
 8005838:	bf00      	nop
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005848:	2300      	movs	r3, #0
 800584a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005850:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	695b      	ldr	r3, [r3, #20]
 8005858:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585c:	2b80      	cmp	r3, #128	; 0x80
 800585e:	bf0c      	ite	eq
 8005860:	2301      	moveq	r3, #1
 8005862:	2300      	movne	r3, #0
 8005864:	b2db      	uxtb	r3, r3
 8005866:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b21      	cmp	r3, #33	; 0x21
 8005872:	d108      	bne.n	8005886 <UART_DMAError+0x46>
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d005      	beq.n	8005886 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	2200      	movs	r2, #0
 800587e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005880:	68b8      	ldr	r0, [r7, #8]
 8005882:	f000 f933 	bl	8005aec <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005886:	68bb      	ldr	r3, [r7, #8]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	695b      	ldr	r3, [r3, #20]
 800588c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005890:	2b40      	cmp	r3, #64	; 0x40
 8005892:	bf0c      	ite	eq
 8005894:	2301      	moveq	r3, #1
 8005896:	2300      	movne	r3, #0
 8005898:	b2db      	uxtb	r3, r3
 800589a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	2b22      	cmp	r3, #34	; 0x22
 80058a6:	d108      	bne.n	80058ba <UART_DMAError+0x7a>
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d005      	beq.n	80058ba <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	2200      	movs	r2, #0
 80058b2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80058b4:	68b8      	ldr	r0, [r7, #8]
 80058b6:	f000 f941 	bl	8005b3c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058be:	f043 0210 	orr.w	r2, r3, #16
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80058c6:	68b8      	ldr	r0, [r7, #8]
 80058c8:	f7ff ff02 	bl	80056d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058cc:	bf00      	nop
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b090      	sub	sp, #64	; 0x40
 80058d8:	af00      	add	r7, sp, #0
 80058da:	60f8      	str	r0, [r7, #12]
 80058dc:	60b9      	str	r1, [r7, #8]
 80058de:	603b      	str	r3, [r7, #0]
 80058e0:	4613      	mov	r3, r2
 80058e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058e4:	e050      	b.n	8005988 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80058e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058ec:	d04c      	beq.n	8005988 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80058ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d007      	beq.n	8005904 <UART_WaitOnFlagUntilTimeout+0x30>
 80058f4:	f7fc f902 	bl	8001afc <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005900:	429a      	cmp	r2, r3
 8005902:	d241      	bcs.n	8005988 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	330c      	adds	r3, #12
 800590a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800590c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590e:	e853 3f00 	ldrex	r3, [r3]
 8005912:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005916:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800591a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	330c      	adds	r3, #12
 8005922:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005924:	637a      	str	r2, [r7, #52]	; 0x34
 8005926:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005928:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800592a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800592c:	e841 2300 	strex	r3, r2, [r1]
 8005930:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1e5      	bne.n	8005904 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	3314      	adds	r3, #20
 800593e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	e853 3f00 	ldrex	r3, [r3]
 8005946:	613b      	str	r3, [r7, #16]
   return(result);
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	f023 0301 	bic.w	r3, r3, #1
 800594e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	3314      	adds	r3, #20
 8005956:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005958:	623a      	str	r2, [r7, #32]
 800595a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800595c:	69f9      	ldr	r1, [r7, #28]
 800595e:	6a3a      	ldr	r2, [r7, #32]
 8005960:	e841 2300 	strex	r3, r2, [r1]
 8005964:	61bb      	str	r3, [r7, #24]
   return(result);
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d1e5      	bne.n	8005938 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2220      	movs	r2, #32
 8005970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	2220      	movs	r2, #32
 8005978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	2200      	movs	r2, #0
 8005980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005984:	2303      	movs	r3, #3
 8005986:	e00f      	b.n	80059a8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	681a      	ldr	r2, [r3, #0]
 800598e:	68bb      	ldr	r3, [r7, #8]
 8005990:	4013      	ands	r3, r2
 8005992:	68ba      	ldr	r2, [r7, #8]
 8005994:	429a      	cmp	r2, r3
 8005996:	bf0c      	ite	eq
 8005998:	2301      	moveq	r3, #1
 800599a:	2300      	movne	r3, #0
 800599c:	b2db      	uxtb	r3, r3
 800599e:	461a      	mov	r2, r3
 80059a0:	79fb      	ldrb	r3, [r7, #7]
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d09f      	beq.n	80058e6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059a6:	2300      	movs	r3, #0
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3740      	adds	r7, #64	; 0x40
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}

080059b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b098      	sub	sp, #96	; 0x60
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	60f8      	str	r0, [r7, #12]
 80059b8:	60b9      	str	r1, [r7, #8]
 80059ba:	4613      	mov	r3, r2
 80059bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80059be:	68ba      	ldr	r2, [r7, #8]
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	88fa      	ldrh	r2, [r7, #6]
 80059c8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2222      	movs	r2, #34	; 0x22
 80059d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059dc:	4a40      	ldr	r2, [pc, #256]	; (8005ae0 <UART_Start_Receive_DMA+0x130>)
 80059de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e4:	4a3f      	ldr	r2, [pc, #252]	; (8005ae4 <UART_Start_Receive_DMA+0x134>)
 80059e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ec:	4a3e      	ldr	r2, [pc, #248]	; (8005ae8 <UART_Start_Receive_DMA+0x138>)
 80059ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f4:	2200      	movs	r2, #0
 80059f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80059f8:	f107 0308 	add.w	r3, r7, #8
 80059fc:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3304      	adds	r3, #4
 8005a08:	4619      	mov	r1, r3
 8005a0a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a0c:	681a      	ldr	r2, [r3, #0]
 8005a0e:	88fb      	ldrh	r3, [r7, #6]
 8005a10:	f7fc fc7e 	bl	8002310 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005a14:	2300      	movs	r3, #0
 8005a16:	613b      	str	r3, [r7, #16]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	613b      	str	r3, [r7, #16]
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	685b      	ldr	r3, [r3, #4]
 8005a26:	613b      	str	r3, [r7, #16]
 8005a28:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	691b      	ldr	r3, [r3, #16]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d019      	beq.n	8005a6e <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	330c      	adds	r3, #12
 8005a40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a44:	e853 3f00 	ldrex	r3, [r3]
 8005a48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a50:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	330c      	adds	r3, #12
 8005a58:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a5a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005a5c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a5e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005a60:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a62:	e841 2300 	strex	r3, r2, [r1]
 8005a66:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005a68:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1e5      	bne.n	8005a3a <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	3314      	adds	r3, #20
 8005a74:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a78:	e853 3f00 	ldrex	r3, [r3]
 8005a7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a80:	f043 0301 	orr.w	r3, r3, #1
 8005a84:	657b      	str	r3, [r7, #84]	; 0x54
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	3314      	adds	r3, #20
 8005a8c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a8e:	63ba      	str	r2, [r7, #56]	; 0x38
 8005a90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005a94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005a96:	e841 2300 	strex	r3, r2, [r1]
 8005a9a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d1e5      	bne.n	8005a6e <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	3314      	adds	r3, #20
 8005aa8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	e853 3f00 	ldrex	r3, [r3]
 8005ab0:	617b      	str	r3, [r7, #20]
   return(result);
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005ab8:	653b      	str	r3, [r7, #80]	; 0x50
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	3314      	adds	r3, #20
 8005ac0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ac2:	627a      	str	r2, [r7, #36]	; 0x24
 8005ac4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ac6:	6a39      	ldr	r1, [r7, #32]
 8005ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005aca:	e841 2300 	strex	r3, r2, [r1]
 8005ace:	61fb      	str	r3, [r7, #28]
   return(result);
 8005ad0:	69fb      	ldr	r3, [r7, #28]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d1e5      	bne.n	8005aa2 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3760      	adds	r7, #96	; 0x60
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	080056e5 	.word	0x080056e5
 8005ae4:	0800580b 	.word	0x0800580b
 8005ae8:	08005841 	.word	0x08005841

08005aec <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b089      	sub	sp, #36	; 0x24
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	330c      	adds	r3, #12
 8005afa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	e853 3f00 	ldrex	r3, [r3]
 8005b02:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005b0a:	61fb      	str	r3, [r7, #28]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	330c      	adds	r3, #12
 8005b12:	69fa      	ldr	r2, [r7, #28]
 8005b14:	61ba      	str	r2, [r7, #24]
 8005b16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b18:	6979      	ldr	r1, [r7, #20]
 8005b1a:	69ba      	ldr	r2, [r7, #24]
 8005b1c:	e841 2300 	strex	r3, r2, [r1]
 8005b20:	613b      	str	r3, [r7, #16]
   return(result);
 8005b22:	693b      	ldr	r3, [r7, #16]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d1e5      	bne.n	8005af4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2220      	movs	r2, #32
 8005b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005b30:	bf00      	nop
 8005b32:	3724      	adds	r7, #36	; 0x24
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr

08005b3c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b095      	sub	sp, #84	; 0x54
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	330c      	adds	r3, #12
 8005b4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b4e:	e853 3f00 	ldrex	r3, [r3]
 8005b52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	330c      	adds	r3, #12
 8005b62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b64:	643a      	str	r2, [r7, #64]	; 0x40
 8005b66:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005b6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005b6c:	e841 2300 	strex	r3, r2, [r1]
 8005b70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d1e5      	bne.n	8005b44 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3314      	adds	r3, #20
 8005b7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	e853 3f00 	ldrex	r3, [r3]
 8005b86:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	f023 0301 	bic.w	r3, r3, #1
 8005b8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	3314      	adds	r3, #20
 8005b96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005b9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ba0:	e841 2300 	strex	r3, r2, [r1]
 8005ba4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1e5      	bne.n	8005b78 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bb0:	2b01      	cmp	r3, #1
 8005bb2:	d119      	bne.n	8005be8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	330c      	adds	r3, #12
 8005bba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	e853 3f00 	ldrex	r3, [r3]
 8005bc2:	60bb      	str	r3, [r7, #8]
   return(result);
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	f023 0310 	bic.w	r3, r3, #16
 8005bca:	647b      	str	r3, [r7, #68]	; 0x44
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	330c      	adds	r3, #12
 8005bd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bd4:	61ba      	str	r2, [r7, #24]
 8005bd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bd8:	6979      	ldr	r1, [r7, #20]
 8005bda:	69ba      	ldr	r2, [r7, #24]
 8005bdc:	e841 2300 	strex	r3, r2, [r1]
 8005be0:	613b      	str	r3, [r7, #16]
   return(result);
 8005be2:	693b      	ldr	r3, [r7, #16]
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d1e5      	bne.n	8005bb4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2220      	movs	r2, #32
 8005bec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005bf6:	bf00      	nop
 8005bf8:	3754      	adds	r7, #84	; 0x54
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr

08005c02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b084      	sub	sp, #16
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2200      	movs	r2, #0
 8005c1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c1c:	68f8      	ldr	r0, [r7, #12]
 8005c1e:	f7ff fd57 	bl	80056d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c22:	bf00      	nop
 8005c24:	3710      	adds	r7, #16
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c2a:	b480      	push	{r7}
 8005c2c:	b085      	sub	sp, #20
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b21      	cmp	r3, #33	; 0x21
 8005c3c:	d13e      	bne.n	8005cbc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c46:	d114      	bne.n	8005c72 <UART_Transmit_IT+0x48>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	691b      	ldr	r3, [r3, #16]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d110      	bne.n	8005c72 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6a1b      	ldr	r3, [r3, #32]
 8005c54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	881b      	ldrh	r3, [r3, #0]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	1c9a      	adds	r2, r3, #2
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	621a      	str	r2, [r3, #32]
 8005c70:	e008      	b.n	8005c84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6a1b      	ldr	r3, [r3, #32]
 8005c76:	1c59      	adds	r1, r3, #1
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	6211      	str	r1, [r2, #32]
 8005c7c:	781a      	ldrb	r2, [r3, #0]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005c88:	b29b      	uxth	r3, r3
 8005c8a:	3b01      	subs	r3, #1
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	4619      	mov	r1, r3
 8005c92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d10f      	bne.n	8005cb8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68da      	ldr	r2, [r3, #12]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ca6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005cb6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
 8005cba:	e000      	b.n	8005cbe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005cbc:	2302      	movs	r3, #2
  }
}
 8005cbe:	4618      	mov	r0, r3
 8005cc0:	3714      	adds	r7, #20
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr

08005cca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005cca:	b580      	push	{r7, lr}
 8005ccc:	b082      	sub	sp, #8
 8005cce:	af00      	add	r7, sp, #0
 8005cd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	68da      	ldr	r2, [r3, #12]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ce0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005cea:	6878      	ldr	r0, [r7, #4]
 8005cec:	f7ff fcd2 	bl	8005694 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
}
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	3708      	adds	r7, #8
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	bd80      	pop	{r7, pc}

08005cfa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005cfa:	b580      	push	{r7, lr}
 8005cfc:	b08c      	sub	sp, #48	; 0x30
 8005cfe:	af00      	add	r7, sp, #0
 8005d00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b22      	cmp	r3, #34	; 0x22
 8005d0c:	f040 80ab 	bne.w	8005e66 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d18:	d117      	bne.n	8005d4a <UART_Receive_IT+0x50>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	691b      	ldr	r3, [r3, #16]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d113      	bne.n	8005d4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d22:	2300      	movs	r3, #0
 8005d24:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	685b      	ldr	r3, [r3, #4]
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d38:	b29a      	uxth	r2, r3
 8005d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d42:	1c9a      	adds	r2, r3, #2
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	629a      	str	r2, [r3, #40]	; 0x28
 8005d48:	e026      	b.n	8005d98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005d50:	2300      	movs	r3, #0
 8005d52:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	689b      	ldr	r3, [r3, #8]
 8005d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d5c:	d007      	beq.n	8005d6e <UART_Receive_IT+0x74>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10a      	bne.n	8005d7c <UART_Receive_IT+0x82>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d106      	bne.n	8005d7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	685b      	ldr	r3, [r3, #4]
 8005d74:	b2da      	uxtb	r2, r3
 8005d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d78:	701a      	strb	r2, [r3, #0]
 8005d7a:	e008      	b.n	8005d8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	b2db      	uxtb	r3, r3
 8005d84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005d88:	b2da      	uxtb	r2, r3
 8005d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d92:	1c5a      	adds	r2, r3, #1
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	b29b      	uxth	r3, r3
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	4619      	mov	r1, r3
 8005da6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d15a      	bne.n	8005e62 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	68da      	ldr	r2, [r3, #12]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f022 0220 	bic.w	r2, r2, #32
 8005dba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	68da      	ldr	r2, [r3, #12]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005dca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	695a      	ldr	r2, [r3, #20]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0201 	bic.w	r2, r2, #1
 8005dda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d135      	bne.n	8005e58 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2200      	movs	r2, #0
 8005df0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	330c      	adds	r3, #12
 8005df8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	e853 3f00 	ldrex	r3, [r3]
 8005e00:	613b      	str	r3, [r7, #16]
   return(result);
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	f023 0310 	bic.w	r3, r3, #16
 8005e08:	627b      	str	r3, [r7, #36]	; 0x24
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	330c      	adds	r3, #12
 8005e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e12:	623a      	str	r2, [r7, #32]
 8005e14:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e16:	69f9      	ldr	r1, [r7, #28]
 8005e18:	6a3a      	ldr	r2, [r7, #32]
 8005e1a:	e841 2300 	strex	r3, r2, [r1]
 8005e1e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e20:	69bb      	ldr	r3, [r7, #24]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d1e5      	bne.n	8005df2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0310 	and.w	r3, r3, #16
 8005e30:	2b10      	cmp	r3, #16
 8005e32:	d10a      	bne.n	8005e4a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e34:	2300      	movs	r3, #0
 8005e36:	60fb      	str	r3, [r7, #12]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	60fb      	str	r3, [r7, #12]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	60fb      	str	r3, [r7, #12]
 8005e48:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e4e:	4619      	mov	r1, r3
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7fb f97b 	bl	800114c <HAL_UARTEx_RxEventCallback>
 8005e56:	e002      	b.n	8005e5e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f7ff fc25 	bl	80056a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	e002      	b.n	8005e68 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005e62:	2300      	movs	r3, #0
 8005e64:	e000      	b.n	8005e68 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005e66:	2302      	movs	r3, #2
  }
}
 8005e68:	4618      	mov	r0, r3
 8005e6a:	3730      	adds	r7, #48	; 0x30
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005e74:	b0c0      	sub	sp, #256	; 0x100
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005e88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e8c:	68d9      	ldr	r1, [r3, #12]
 8005e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e92:	681a      	ldr	r2, [r3, #0]
 8005e94:	ea40 0301 	orr.w	r3, r0, r1
 8005e98:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e9e:	689a      	ldr	r2, [r3, #8]
 8005ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	431a      	orrs	r2, r3
 8005ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	431a      	orrs	r2, r3
 8005eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eb4:	69db      	ldr	r3, [r3, #28]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68db      	ldr	r3, [r3, #12]
 8005ec4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005ec8:	f021 010c 	bic.w	r1, r1, #12
 8005ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed0:	681a      	ldr	r2, [r3, #0]
 8005ed2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ed6:	430b      	orrs	r3, r1
 8005ed8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	695b      	ldr	r3, [r3, #20]
 8005ee2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eea:	6999      	ldr	r1, [r3, #24]
 8005eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	ea40 0301 	orr.w	r3, r0, r1
 8005ef6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005efc:	681a      	ldr	r2, [r3, #0]
 8005efe:	4b8f      	ldr	r3, [pc, #572]	; (800613c <UART_SetConfig+0x2cc>)
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d005      	beq.n	8005f10 <UART_SetConfig+0xa0>
 8005f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	4b8d      	ldr	r3, [pc, #564]	; (8006140 <UART_SetConfig+0x2d0>)
 8005f0c:	429a      	cmp	r2, r3
 8005f0e:	d104      	bne.n	8005f1a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f10:	f7fd ffec 	bl	8003eec <HAL_RCC_GetPCLK2Freq>
 8005f14:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005f18:	e003      	b.n	8005f22 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f1a:	f7fd ffd3 	bl	8003ec4 <HAL_RCC_GetPCLK1Freq>
 8005f1e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f26:	69db      	ldr	r3, [r3, #28]
 8005f28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f2c:	f040 810c 	bne.w	8006148 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f34:	2200      	movs	r2, #0
 8005f36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f3a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f3e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f42:	4622      	mov	r2, r4
 8005f44:	462b      	mov	r3, r5
 8005f46:	1891      	adds	r1, r2, r2
 8005f48:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f4a:	415b      	adcs	r3, r3
 8005f4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f4e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f52:	4621      	mov	r1, r4
 8005f54:	eb12 0801 	adds.w	r8, r2, r1
 8005f58:	4629      	mov	r1, r5
 8005f5a:	eb43 0901 	adc.w	r9, r3, r1
 8005f5e:	f04f 0200 	mov.w	r2, #0
 8005f62:	f04f 0300 	mov.w	r3, #0
 8005f66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005f6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005f6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005f72:	4690      	mov	r8, r2
 8005f74:	4699      	mov	r9, r3
 8005f76:	4623      	mov	r3, r4
 8005f78:	eb18 0303 	adds.w	r3, r8, r3
 8005f7c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005f80:	462b      	mov	r3, r5
 8005f82:	eb49 0303 	adc.w	r3, r9, r3
 8005f86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f8e:	685b      	ldr	r3, [r3, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005f96:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005f9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005f9e:	460b      	mov	r3, r1
 8005fa0:	18db      	adds	r3, r3, r3
 8005fa2:	653b      	str	r3, [r7, #80]	; 0x50
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	eb42 0303 	adc.w	r3, r2, r3
 8005faa:	657b      	str	r3, [r7, #84]	; 0x54
 8005fac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005fb0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005fb4:	f7fa f97c 	bl	80002b0 <__aeabi_uldivmod>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	460b      	mov	r3, r1
 8005fbc:	4b61      	ldr	r3, [pc, #388]	; (8006144 <UART_SetConfig+0x2d4>)
 8005fbe:	fba3 2302 	umull	r2, r3, r3, r2
 8005fc2:	095b      	lsrs	r3, r3, #5
 8005fc4:	011c      	lsls	r4, r3, #4
 8005fc6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fca:	2200      	movs	r2, #0
 8005fcc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005fd0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005fd4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005fd8:	4642      	mov	r2, r8
 8005fda:	464b      	mov	r3, r9
 8005fdc:	1891      	adds	r1, r2, r2
 8005fde:	64b9      	str	r1, [r7, #72]	; 0x48
 8005fe0:	415b      	adcs	r3, r3
 8005fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005fe4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005fe8:	4641      	mov	r1, r8
 8005fea:	eb12 0a01 	adds.w	sl, r2, r1
 8005fee:	4649      	mov	r1, r9
 8005ff0:	eb43 0b01 	adc.w	fp, r3, r1
 8005ff4:	f04f 0200 	mov.w	r2, #0
 8005ff8:	f04f 0300 	mov.w	r3, #0
 8005ffc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006000:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006004:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006008:	4692      	mov	sl, r2
 800600a:	469b      	mov	fp, r3
 800600c:	4643      	mov	r3, r8
 800600e:	eb1a 0303 	adds.w	r3, sl, r3
 8006012:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006016:	464b      	mov	r3, r9
 8006018:	eb4b 0303 	adc.w	r3, fp, r3
 800601c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006020:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	2200      	movs	r2, #0
 8006028:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800602c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006030:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006034:	460b      	mov	r3, r1
 8006036:	18db      	adds	r3, r3, r3
 8006038:	643b      	str	r3, [r7, #64]	; 0x40
 800603a:	4613      	mov	r3, r2
 800603c:	eb42 0303 	adc.w	r3, r2, r3
 8006040:	647b      	str	r3, [r7, #68]	; 0x44
 8006042:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006046:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800604a:	f7fa f931 	bl	80002b0 <__aeabi_uldivmod>
 800604e:	4602      	mov	r2, r0
 8006050:	460b      	mov	r3, r1
 8006052:	4611      	mov	r1, r2
 8006054:	4b3b      	ldr	r3, [pc, #236]	; (8006144 <UART_SetConfig+0x2d4>)
 8006056:	fba3 2301 	umull	r2, r3, r3, r1
 800605a:	095b      	lsrs	r3, r3, #5
 800605c:	2264      	movs	r2, #100	; 0x64
 800605e:	fb02 f303 	mul.w	r3, r2, r3
 8006062:	1acb      	subs	r3, r1, r3
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800606a:	4b36      	ldr	r3, [pc, #216]	; (8006144 <UART_SetConfig+0x2d4>)
 800606c:	fba3 2302 	umull	r2, r3, r3, r2
 8006070:	095b      	lsrs	r3, r3, #5
 8006072:	005b      	lsls	r3, r3, #1
 8006074:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006078:	441c      	add	r4, r3
 800607a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800607e:	2200      	movs	r2, #0
 8006080:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006084:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006088:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800608c:	4642      	mov	r2, r8
 800608e:	464b      	mov	r3, r9
 8006090:	1891      	adds	r1, r2, r2
 8006092:	63b9      	str	r1, [r7, #56]	; 0x38
 8006094:	415b      	adcs	r3, r3
 8006096:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006098:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800609c:	4641      	mov	r1, r8
 800609e:	1851      	adds	r1, r2, r1
 80060a0:	6339      	str	r1, [r7, #48]	; 0x30
 80060a2:	4649      	mov	r1, r9
 80060a4:	414b      	adcs	r3, r1
 80060a6:	637b      	str	r3, [r7, #52]	; 0x34
 80060a8:	f04f 0200 	mov.w	r2, #0
 80060ac:	f04f 0300 	mov.w	r3, #0
 80060b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80060b4:	4659      	mov	r1, fp
 80060b6:	00cb      	lsls	r3, r1, #3
 80060b8:	4651      	mov	r1, sl
 80060ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060be:	4651      	mov	r1, sl
 80060c0:	00ca      	lsls	r2, r1, #3
 80060c2:	4610      	mov	r0, r2
 80060c4:	4619      	mov	r1, r3
 80060c6:	4603      	mov	r3, r0
 80060c8:	4642      	mov	r2, r8
 80060ca:	189b      	adds	r3, r3, r2
 80060cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80060d0:	464b      	mov	r3, r9
 80060d2:	460a      	mov	r2, r1
 80060d4:	eb42 0303 	adc.w	r3, r2, r3
 80060d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80060dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2200      	movs	r2, #0
 80060e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80060e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80060ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80060f0:	460b      	mov	r3, r1
 80060f2:	18db      	adds	r3, r3, r3
 80060f4:	62bb      	str	r3, [r7, #40]	; 0x28
 80060f6:	4613      	mov	r3, r2
 80060f8:	eb42 0303 	adc.w	r3, r2, r3
 80060fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006102:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006106:	f7fa f8d3 	bl	80002b0 <__aeabi_uldivmod>
 800610a:	4602      	mov	r2, r0
 800610c:	460b      	mov	r3, r1
 800610e:	4b0d      	ldr	r3, [pc, #52]	; (8006144 <UART_SetConfig+0x2d4>)
 8006110:	fba3 1302 	umull	r1, r3, r3, r2
 8006114:	095b      	lsrs	r3, r3, #5
 8006116:	2164      	movs	r1, #100	; 0x64
 8006118:	fb01 f303 	mul.w	r3, r1, r3
 800611c:	1ad3      	subs	r3, r2, r3
 800611e:	00db      	lsls	r3, r3, #3
 8006120:	3332      	adds	r3, #50	; 0x32
 8006122:	4a08      	ldr	r2, [pc, #32]	; (8006144 <UART_SetConfig+0x2d4>)
 8006124:	fba2 2303 	umull	r2, r3, r2, r3
 8006128:	095b      	lsrs	r3, r3, #5
 800612a:	f003 0207 	and.w	r2, r3, #7
 800612e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	4422      	add	r2, r4
 8006136:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006138:	e106      	b.n	8006348 <UART_SetConfig+0x4d8>
 800613a:	bf00      	nop
 800613c:	40011000 	.word	0x40011000
 8006140:	40011400 	.word	0x40011400
 8006144:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006148:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800614c:	2200      	movs	r2, #0
 800614e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006152:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006156:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800615a:	4642      	mov	r2, r8
 800615c:	464b      	mov	r3, r9
 800615e:	1891      	adds	r1, r2, r2
 8006160:	6239      	str	r1, [r7, #32]
 8006162:	415b      	adcs	r3, r3
 8006164:	627b      	str	r3, [r7, #36]	; 0x24
 8006166:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800616a:	4641      	mov	r1, r8
 800616c:	1854      	adds	r4, r2, r1
 800616e:	4649      	mov	r1, r9
 8006170:	eb43 0501 	adc.w	r5, r3, r1
 8006174:	f04f 0200 	mov.w	r2, #0
 8006178:	f04f 0300 	mov.w	r3, #0
 800617c:	00eb      	lsls	r3, r5, #3
 800617e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006182:	00e2      	lsls	r2, r4, #3
 8006184:	4614      	mov	r4, r2
 8006186:	461d      	mov	r5, r3
 8006188:	4643      	mov	r3, r8
 800618a:	18e3      	adds	r3, r4, r3
 800618c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006190:	464b      	mov	r3, r9
 8006192:	eb45 0303 	adc.w	r3, r5, r3
 8006196:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800619a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	2200      	movs	r2, #0
 80061a2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061a6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061aa:	f04f 0200 	mov.w	r2, #0
 80061ae:	f04f 0300 	mov.w	r3, #0
 80061b2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80061b6:	4629      	mov	r1, r5
 80061b8:	008b      	lsls	r3, r1, #2
 80061ba:	4621      	mov	r1, r4
 80061bc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80061c0:	4621      	mov	r1, r4
 80061c2:	008a      	lsls	r2, r1, #2
 80061c4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80061c8:	f7fa f872 	bl	80002b0 <__aeabi_uldivmod>
 80061cc:	4602      	mov	r2, r0
 80061ce:	460b      	mov	r3, r1
 80061d0:	4b60      	ldr	r3, [pc, #384]	; (8006354 <UART_SetConfig+0x4e4>)
 80061d2:	fba3 2302 	umull	r2, r3, r3, r2
 80061d6:	095b      	lsrs	r3, r3, #5
 80061d8:	011c      	lsls	r4, r3, #4
 80061da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061de:	2200      	movs	r2, #0
 80061e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80061e4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80061e8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80061ec:	4642      	mov	r2, r8
 80061ee:	464b      	mov	r3, r9
 80061f0:	1891      	adds	r1, r2, r2
 80061f2:	61b9      	str	r1, [r7, #24]
 80061f4:	415b      	adcs	r3, r3
 80061f6:	61fb      	str	r3, [r7, #28]
 80061f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80061fc:	4641      	mov	r1, r8
 80061fe:	1851      	adds	r1, r2, r1
 8006200:	6139      	str	r1, [r7, #16]
 8006202:	4649      	mov	r1, r9
 8006204:	414b      	adcs	r3, r1
 8006206:	617b      	str	r3, [r7, #20]
 8006208:	f04f 0200 	mov.w	r2, #0
 800620c:	f04f 0300 	mov.w	r3, #0
 8006210:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006214:	4659      	mov	r1, fp
 8006216:	00cb      	lsls	r3, r1, #3
 8006218:	4651      	mov	r1, sl
 800621a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800621e:	4651      	mov	r1, sl
 8006220:	00ca      	lsls	r2, r1, #3
 8006222:	4610      	mov	r0, r2
 8006224:	4619      	mov	r1, r3
 8006226:	4603      	mov	r3, r0
 8006228:	4642      	mov	r2, r8
 800622a:	189b      	adds	r3, r3, r2
 800622c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006230:	464b      	mov	r3, r9
 8006232:	460a      	mov	r2, r1
 8006234:	eb42 0303 	adc.w	r3, r2, r3
 8006238:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800623c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006240:	685b      	ldr	r3, [r3, #4]
 8006242:	2200      	movs	r2, #0
 8006244:	67bb      	str	r3, [r7, #120]	; 0x78
 8006246:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006248:	f04f 0200 	mov.w	r2, #0
 800624c:	f04f 0300 	mov.w	r3, #0
 8006250:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006254:	4649      	mov	r1, r9
 8006256:	008b      	lsls	r3, r1, #2
 8006258:	4641      	mov	r1, r8
 800625a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800625e:	4641      	mov	r1, r8
 8006260:	008a      	lsls	r2, r1, #2
 8006262:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006266:	f7fa f823 	bl	80002b0 <__aeabi_uldivmod>
 800626a:	4602      	mov	r2, r0
 800626c:	460b      	mov	r3, r1
 800626e:	4611      	mov	r1, r2
 8006270:	4b38      	ldr	r3, [pc, #224]	; (8006354 <UART_SetConfig+0x4e4>)
 8006272:	fba3 2301 	umull	r2, r3, r3, r1
 8006276:	095b      	lsrs	r3, r3, #5
 8006278:	2264      	movs	r2, #100	; 0x64
 800627a:	fb02 f303 	mul.w	r3, r2, r3
 800627e:	1acb      	subs	r3, r1, r3
 8006280:	011b      	lsls	r3, r3, #4
 8006282:	3332      	adds	r3, #50	; 0x32
 8006284:	4a33      	ldr	r2, [pc, #204]	; (8006354 <UART_SetConfig+0x4e4>)
 8006286:	fba2 2303 	umull	r2, r3, r2, r3
 800628a:	095b      	lsrs	r3, r3, #5
 800628c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006290:	441c      	add	r4, r3
 8006292:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006296:	2200      	movs	r2, #0
 8006298:	673b      	str	r3, [r7, #112]	; 0x70
 800629a:	677a      	str	r2, [r7, #116]	; 0x74
 800629c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80062a0:	4642      	mov	r2, r8
 80062a2:	464b      	mov	r3, r9
 80062a4:	1891      	adds	r1, r2, r2
 80062a6:	60b9      	str	r1, [r7, #8]
 80062a8:	415b      	adcs	r3, r3
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062b0:	4641      	mov	r1, r8
 80062b2:	1851      	adds	r1, r2, r1
 80062b4:	6039      	str	r1, [r7, #0]
 80062b6:	4649      	mov	r1, r9
 80062b8:	414b      	adcs	r3, r1
 80062ba:	607b      	str	r3, [r7, #4]
 80062bc:	f04f 0200 	mov.w	r2, #0
 80062c0:	f04f 0300 	mov.w	r3, #0
 80062c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80062c8:	4659      	mov	r1, fp
 80062ca:	00cb      	lsls	r3, r1, #3
 80062cc:	4651      	mov	r1, sl
 80062ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062d2:	4651      	mov	r1, sl
 80062d4:	00ca      	lsls	r2, r1, #3
 80062d6:	4610      	mov	r0, r2
 80062d8:	4619      	mov	r1, r3
 80062da:	4603      	mov	r3, r0
 80062dc:	4642      	mov	r2, r8
 80062de:	189b      	adds	r3, r3, r2
 80062e0:	66bb      	str	r3, [r7, #104]	; 0x68
 80062e2:	464b      	mov	r3, r9
 80062e4:	460a      	mov	r2, r1
 80062e6:	eb42 0303 	adc.w	r3, r2, r3
 80062ea:	66fb      	str	r3, [r7, #108]	; 0x6c
 80062ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	2200      	movs	r2, #0
 80062f4:	663b      	str	r3, [r7, #96]	; 0x60
 80062f6:	667a      	str	r2, [r7, #100]	; 0x64
 80062f8:	f04f 0200 	mov.w	r2, #0
 80062fc:	f04f 0300 	mov.w	r3, #0
 8006300:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006304:	4649      	mov	r1, r9
 8006306:	008b      	lsls	r3, r1, #2
 8006308:	4641      	mov	r1, r8
 800630a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800630e:	4641      	mov	r1, r8
 8006310:	008a      	lsls	r2, r1, #2
 8006312:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006316:	f7f9 ffcb 	bl	80002b0 <__aeabi_uldivmod>
 800631a:	4602      	mov	r2, r0
 800631c:	460b      	mov	r3, r1
 800631e:	4b0d      	ldr	r3, [pc, #52]	; (8006354 <UART_SetConfig+0x4e4>)
 8006320:	fba3 1302 	umull	r1, r3, r3, r2
 8006324:	095b      	lsrs	r3, r3, #5
 8006326:	2164      	movs	r1, #100	; 0x64
 8006328:	fb01 f303 	mul.w	r3, r1, r3
 800632c:	1ad3      	subs	r3, r2, r3
 800632e:	011b      	lsls	r3, r3, #4
 8006330:	3332      	adds	r3, #50	; 0x32
 8006332:	4a08      	ldr	r2, [pc, #32]	; (8006354 <UART_SetConfig+0x4e4>)
 8006334:	fba2 2303 	umull	r2, r3, r2, r3
 8006338:	095b      	lsrs	r3, r3, #5
 800633a:	f003 020f 	and.w	r2, r3, #15
 800633e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	4422      	add	r2, r4
 8006346:	609a      	str	r2, [r3, #8]
}
 8006348:	bf00      	nop
 800634a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800634e:	46bd      	mov	sp, r7
 8006350:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006354:	51eb851f 	.word	0x51eb851f

08006358 <atoi>:
 8006358:	220a      	movs	r2, #10
 800635a:	2100      	movs	r1, #0
 800635c:	f000 b93e 	b.w	80065dc <strtol>

08006360 <malloc>:
 8006360:	4b02      	ldr	r3, [pc, #8]	; (800636c <malloc+0xc>)
 8006362:	4601      	mov	r1, r0
 8006364:	6818      	ldr	r0, [r3, #0]
 8006366:	f000 b82b 	b.w	80063c0 <_malloc_r>
 800636a:	bf00      	nop
 800636c:	2000006c 	.word	0x2000006c

08006370 <free>:
 8006370:	4b02      	ldr	r3, [pc, #8]	; (800637c <free+0xc>)
 8006372:	4601      	mov	r1, r0
 8006374:	6818      	ldr	r0, [r3, #0]
 8006376:	f000 bbcd 	b.w	8006b14 <_free_r>
 800637a:	bf00      	nop
 800637c:	2000006c 	.word	0x2000006c

08006380 <sbrk_aligned>:
 8006380:	b570      	push	{r4, r5, r6, lr}
 8006382:	4e0e      	ldr	r6, [pc, #56]	; (80063bc <sbrk_aligned+0x3c>)
 8006384:	460c      	mov	r4, r1
 8006386:	6831      	ldr	r1, [r6, #0]
 8006388:	4605      	mov	r5, r0
 800638a:	b911      	cbnz	r1, 8006392 <sbrk_aligned+0x12>
 800638c:	f000 fb74 	bl	8006a78 <_sbrk_r>
 8006390:	6030      	str	r0, [r6, #0]
 8006392:	4621      	mov	r1, r4
 8006394:	4628      	mov	r0, r5
 8006396:	f000 fb6f 	bl	8006a78 <_sbrk_r>
 800639a:	1c43      	adds	r3, r0, #1
 800639c:	d00a      	beq.n	80063b4 <sbrk_aligned+0x34>
 800639e:	1cc4      	adds	r4, r0, #3
 80063a0:	f024 0403 	bic.w	r4, r4, #3
 80063a4:	42a0      	cmp	r0, r4
 80063a6:	d007      	beq.n	80063b8 <sbrk_aligned+0x38>
 80063a8:	1a21      	subs	r1, r4, r0
 80063aa:	4628      	mov	r0, r5
 80063ac:	f000 fb64 	bl	8006a78 <_sbrk_r>
 80063b0:	3001      	adds	r0, #1
 80063b2:	d101      	bne.n	80063b8 <sbrk_aligned+0x38>
 80063b4:	f04f 34ff 	mov.w	r4, #4294967295
 80063b8:	4620      	mov	r0, r4
 80063ba:	bd70      	pop	{r4, r5, r6, pc}
 80063bc:	20000318 	.word	0x20000318

080063c0 <_malloc_r>:
 80063c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80063c4:	1ccd      	adds	r5, r1, #3
 80063c6:	f025 0503 	bic.w	r5, r5, #3
 80063ca:	3508      	adds	r5, #8
 80063cc:	2d0c      	cmp	r5, #12
 80063ce:	bf38      	it	cc
 80063d0:	250c      	movcc	r5, #12
 80063d2:	2d00      	cmp	r5, #0
 80063d4:	4607      	mov	r7, r0
 80063d6:	db01      	blt.n	80063dc <_malloc_r+0x1c>
 80063d8:	42a9      	cmp	r1, r5
 80063da:	d905      	bls.n	80063e8 <_malloc_r+0x28>
 80063dc:	230c      	movs	r3, #12
 80063de:	603b      	str	r3, [r7, #0]
 80063e0:	2600      	movs	r6, #0
 80063e2:	4630      	mov	r0, r6
 80063e4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80063e8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80064bc <_malloc_r+0xfc>
 80063ec:	f000 f868 	bl	80064c0 <__malloc_lock>
 80063f0:	f8d8 3000 	ldr.w	r3, [r8]
 80063f4:	461c      	mov	r4, r3
 80063f6:	bb5c      	cbnz	r4, 8006450 <_malloc_r+0x90>
 80063f8:	4629      	mov	r1, r5
 80063fa:	4638      	mov	r0, r7
 80063fc:	f7ff ffc0 	bl	8006380 <sbrk_aligned>
 8006400:	1c43      	adds	r3, r0, #1
 8006402:	4604      	mov	r4, r0
 8006404:	d155      	bne.n	80064b2 <_malloc_r+0xf2>
 8006406:	f8d8 4000 	ldr.w	r4, [r8]
 800640a:	4626      	mov	r6, r4
 800640c:	2e00      	cmp	r6, #0
 800640e:	d145      	bne.n	800649c <_malloc_r+0xdc>
 8006410:	2c00      	cmp	r4, #0
 8006412:	d048      	beq.n	80064a6 <_malloc_r+0xe6>
 8006414:	6823      	ldr	r3, [r4, #0]
 8006416:	4631      	mov	r1, r6
 8006418:	4638      	mov	r0, r7
 800641a:	eb04 0903 	add.w	r9, r4, r3
 800641e:	f000 fb2b 	bl	8006a78 <_sbrk_r>
 8006422:	4581      	cmp	r9, r0
 8006424:	d13f      	bne.n	80064a6 <_malloc_r+0xe6>
 8006426:	6821      	ldr	r1, [r4, #0]
 8006428:	1a6d      	subs	r5, r5, r1
 800642a:	4629      	mov	r1, r5
 800642c:	4638      	mov	r0, r7
 800642e:	f7ff ffa7 	bl	8006380 <sbrk_aligned>
 8006432:	3001      	adds	r0, #1
 8006434:	d037      	beq.n	80064a6 <_malloc_r+0xe6>
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	442b      	add	r3, r5
 800643a:	6023      	str	r3, [r4, #0]
 800643c:	f8d8 3000 	ldr.w	r3, [r8]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d038      	beq.n	80064b6 <_malloc_r+0xf6>
 8006444:	685a      	ldr	r2, [r3, #4]
 8006446:	42a2      	cmp	r2, r4
 8006448:	d12b      	bne.n	80064a2 <_malloc_r+0xe2>
 800644a:	2200      	movs	r2, #0
 800644c:	605a      	str	r2, [r3, #4]
 800644e:	e00f      	b.n	8006470 <_malloc_r+0xb0>
 8006450:	6822      	ldr	r2, [r4, #0]
 8006452:	1b52      	subs	r2, r2, r5
 8006454:	d41f      	bmi.n	8006496 <_malloc_r+0xd6>
 8006456:	2a0b      	cmp	r2, #11
 8006458:	d917      	bls.n	800648a <_malloc_r+0xca>
 800645a:	1961      	adds	r1, r4, r5
 800645c:	42a3      	cmp	r3, r4
 800645e:	6025      	str	r5, [r4, #0]
 8006460:	bf18      	it	ne
 8006462:	6059      	strne	r1, [r3, #4]
 8006464:	6863      	ldr	r3, [r4, #4]
 8006466:	bf08      	it	eq
 8006468:	f8c8 1000 	streq.w	r1, [r8]
 800646c:	5162      	str	r2, [r4, r5]
 800646e:	604b      	str	r3, [r1, #4]
 8006470:	4638      	mov	r0, r7
 8006472:	f104 060b 	add.w	r6, r4, #11
 8006476:	f000 f829 	bl	80064cc <__malloc_unlock>
 800647a:	f026 0607 	bic.w	r6, r6, #7
 800647e:	1d23      	adds	r3, r4, #4
 8006480:	1af2      	subs	r2, r6, r3
 8006482:	d0ae      	beq.n	80063e2 <_malloc_r+0x22>
 8006484:	1b9b      	subs	r3, r3, r6
 8006486:	50a3      	str	r3, [r4, r2]
 8006488:	e7ab      	b.n	80063e2 <_malloc_r+0x22>
 800648a:	42a3      	cmp	r3, r4
 800648c:	6862      	ldr	r2, [r4, #4]
 800648e:	d1dd      	bne.n	800644c <_malloc_r+0x8c>
 8006490:	f8c8 2000 	str.w	r2, [r8]
 8006494:	e7ec      	b.n	8006470 <_malloc_r+0xb0>
 8006496:	4623      	mov	r3, r4
 8006498:	6864      	ldr	r4, [r4, #4]
 800649a:	e7ac      	b.n	80063f6 <_malloc_r+0x36>
 800649c:	4634      	mov	r4, r6
 800649e:	6876      	ldr	r6, [r6, #4]
 80064a0:	e7b4      	b.n	800640c <_malloc_r+0x4c>
 80064a2:	4613      	mov	r3, r2
 80064a4:	e7cc      	b.n	8006440 <_malloc_r+0x80>
 80064a6:	230c      	movs	r3, #12
 80064a8:	603b      	str	r3, [r7, #0]
 80064aa:	4638      	mov	r0, r7
 80064ac:	f000 f80e 	bl	80064cc <__malloc_unlock>
 80064b0:	e797      	b.n	80063e2 <_malloc_r+0x22>
 80064b2:	6025      	str	r5, [r4, #0]
 80064b4:	e7dc      	b.n	8006470 <_malloc_r+0xb0>
 80064b6:	605b      	str	r3, [r3, #4]
 80064b8:	deff      	udf	#255	; 0xff
 80064ba:	bf00      	nop
 80064bc:	20000314 	.word	0x20000314

080064c0 <__malloc_lock>:
 80064c0:	4801      	ldr	r0, [pc, #4]	; (80064c8 <__malloc_lock+0x8>)
 80064c2:	f000 bb25 	b.w	8006b10 <__retarget_lock_acquire_recursive>
 80064c6:	bf00      	nop
 80064c8:	2000045c 	.word	0x2000045c

080064cc <__malloc_unlock>:
 80064cc:	4801      	ldr	r0, [pc, #4]	; (80064d4 <__malloc_unlock+0x8>)
 80064ce:	f000 bb20 	b.w	8006b12 <__retarget_lock_release_recursive>
 80064d2:	bf00      	nop
 80064d4:	2000045c 	.word	0x2000045c

080064d8 <_strtol_l.constprop.0>:
 80064d8:	2b01      	cmp	r3, #1
 80064da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80064de:	d001      	beq.n	80064e4 <_strtol_l.constprop.0+0xc>
 80064e0:	2b24      	cmp	r3, #36	; 0x24
 80064e2:	d906      	bls.n	80064f2 <_strtol_l.constprop.0+0x1a>
 80064e4:	f000 faea 	bl	8006abc <__errno>
 80064e8:	2316      	movs	r3, #22
 80064ea:	6003      	str	r3, [r0, #0]
 80064ec:	2000      	movs	r0, #0
 80064ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80065d8 <_strtol_l.constprop.0+0x100>
 80064f6:	460d      	mov	r5, r1
 80064f8:	462e      	mov	r6, r5
 80064fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 80064fe:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8006502:	f017 0708 	ands.w	r7, r7, #8
 8006506:	d1f7      	bne.n	80064f8 <_strtol_l.constprop.0+0x20>
 8006508:	2c2d      	cmp	r4, #45	; 0x2d
 800650a:	d132      	bne.n	8006572 <_strtol_l.constprop.0+0x9a>
 800650c:	782c      	ldrb	r4, [r5, #0]
 800650e:	2701      	movs	r7, #1
 8006510:	1cb5      	adds	r5, r6, #2
 8006512:	2b00      	cmp	r3, #0
 8006514:	d05b      	beq.n	80065ce <_strtol_l.constprop.0+0xf6>
 8006516:	2b10      	cmp	r3, #16
 8006518:	d109      	bne.n	800652e <_strtol_l.constprop.0+0x56>
 800651a:	2c30      	cmp	r4, #48	; 0x30
 800651c:	d107      	bne.n	800652e <_strtol_l.constprop.0+0x56>
 800651e:	782c      	ldrb	r4, [r5, #0]
 8006520:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006524:	2c58      	cmp	r4, #88	; 0x58
 8006526:	d14d      	bne.n	80065c4 <_strtol_l.constprop.0+0xec>
 8006528:	786c      	ldrb	r4, [r5, #1]
 800652a:	2310      	movs	r3, #16
 800652c:	3502      	adds	r5, #2
 800652e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006532:	f108 38ff 	add.w	r8, r8, #4294967295
 8006536:	f04f 0e00 	mov.w	lr, #0
 800653a:	fbb8 f9f3 	udiv	r9, r8, r3
 800653e:	4676      	mov	r6, lr
 8006540:	fb03 8a19 	mls	sl, r3, r9, r8
 8006544:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8006548:	f1bc 0f09 	cmp.w	ip, #9
 800654c:	d816      	bhi.n	800657c <_strtol_l.constprop.0+0xa4>
 800654e:	4664      	mov	r4, ip
 8006550:	42a3      	cmp	r3, r4
 8006552:	dd24      	ble.n	800659e <_strtol_l.constprop.0+0xc6>
 8006554:	f1be 3fff 	cmp.w	lr, #4294967295
 8006558:	d008      	beq.n	800656c <_strtol_l.constprop.0+0x94>
 800655a:	45b1      	cmp	r9, r6
 800655c:	d31c      	bcc.n	8006598 <_strtol_l.constprop.0+0xc0>
 800655e:	d101      	bne.n	8006564 <_strtol_l.constprop.0+0x8c>
 8006560:	45a2      	cmp	sl, r4
 8006562:	db19      	blt.n	8006598 <_strtol_l.constprop.0+0xc0>
 8006564:	fb06 4603 	mla	r6, r6, r3, r4
 8006568:	f04f 0e01 	mov.w	lr, #1
 800656c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006570:	e7e8      	b.n	8006544 <_strtol_l.constprop.0+0x6c>
 8006572:	2c2b      	cmp	r4, #43	; 0x2b
 8006574:	bf04      	itt	eq
 8006576:	782c      	ldrbeq	r4, [r5, #0]
 8006578:	1cb5      	addeq	r5, r6, #2
 800657a:	e7ca      	b.n	8006512 <_strtol_l.constprop.0+0x3a>
 800657c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006580:	f1bc 0f19 	cmp.w	ip, #25
 8006584:	d801      	bhi.n	800658a <_strtol_l.constprop.0+0xb2>
 8006586:	3c37      	subs	r4, #55	; 0x37
 8006588:	e7e2      	b.n	8006550 <_strtol_l.constprop.0+0x78>
 800658a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800658e:	f1bc 0f19 	cmp.w	ip, #25
 8006592:	d804      	bhi.n	800659e <_strtol_l.constprop.0+0xc6>
 8006594:	3c57      	subs	r4, #87	; 0x57
 8006596:	e7db      	b.n	8006550 <_strtol_l.constprop.0+0x78>
 8006598:	f04f 3eff 	mov.w	lr, #4294967295
 800659c:	e7e6      	b.n	800656c <_strtol_l.constprop.0+0x94>
 800659e:	f1be 3fff 	cmp.w	lr, #4294967295
 80065a2:	d105      	bne.n	80065b0 <_strtol_l.constprop.0+0xd8>
 80065a4:	2322      	movs	r3, #34	; 0x22
 80065a6:	6003      	str	r3, [r0, #0]
 80065a8:	4646      	mov	r6, r8
 80065aa:	b942      	cbnz	r2, 80065be <_strtol_l.constprop.0+0xe6>
 80065ac:	4630      	mov	r0, r6
 80065ae:	e79e      	b.n	80064ee <_strtol_l.constprop.0+0x16>
 80065b0:	b107      	cbz	r7, 80065b4 <_strtol_l.constprop.0+0xdc>
 80065b2:	4276      	negs	r6, r6
 80065b4:	2a00      	cmp	r2, #0
 80065b6:	d0f9      	beq.n	80065ac <_strtol_l.constprop.0+0xd4>
 80065b8:	f1be 0f00 	cmp.w	lr, #0
 80065bc:	d000      	beq.n	80065c0 <_strtol_l.constprop.0+0xe8>
 80065be:	1e69      	subs	r1, r5, #1
 80065c0:	6011      	str	r1, [r2, #0]
 80065c2:	e7f3      	b.n	80065ac <_strtol_l.constprop.0+0xd4>
 80065c4:	2430      	movs	r4, #48	; 0x30
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d1b1      	bne.n	800652e <_strtol_l.constprop.0+0x56>
 80065ca:	2308      	movs	r3, #8
 80065cc:	e7af      	b.n	800652e <_strtol_l.constprop.0+0x56>
 80065ce:	2c30      	cmp	r4, #48	; 0x30
 80065d0:	d0a5      	beq.n	800651e <_strtol_l.constprop.0+0x46>
 80065d2:	230a      	movs	r3, #10
 80065d4:	e7ab      	b.n	800652e <_strtol_l.constprop.0+0x56>
 80065d6:	bf00      	nop
 80065d8:	0800779d 	.word	0x0800779d

080065dc <strtol>:
 80065dc:	4613      	mov	r3, r2
 80065de:	460a      	mov	r2, r1
 80065e0:	4601      	mov	r1, r0
 80065e2:	4802      	ldr	r0, [pc, #8]	; (80065ec <strtol+0x10>)
 80065e4:	6800      	ldr	r0, [r0, #0]
 80065e6:	f7ff bf77 	b.w	80064d8 <_strtol_l.constprop.0>
 80065ea:	bf00      	nop
 80065ec:	2000006c 	.word	0x2000006c

080065f0 <std>:
 80065f0:	2300      	movs	r3, #0
 80065f2:	b510      	push	{r4, lr}
 80065f4:	4604      	mov	r4, r0
 80065f6:	e9c0 3300 	strd	r3, r3, [r0]
 80065fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80065fe:	6083      	str	r3, [r0, #8]
 8006600:	8181      	strh	r1, [r0, #12]
 8006602:	6643      	str	r3, [r0, #100]	; 0x64
 8006604:	81c2      	strh	r2, [r0, #14]
 8006606:	6183      	str	r3, [r0, #24]
 8006608:	4619      	mov	r1, r3
 800660a:	2208      	movs	r2, #8
 800660c:	305c      	adds	r0, #92	; 0x5c
 800660e:	f000 f9e5 	bl	80069dc <memset>
 8006612:	4b05      	ldr	r3, [pc, #20]	; (8006628 <std+0x38>)
 8006614:	6263      	str	r3, [r4, #36]	; 0x24
 8006616:	4b05      	ldr	r3, [pc, #20]	; (800662c <std+0x3c>)
 8006618:	62a3      	str	r3, [r4, #40]	; 0x28
 800661a:	4b05      	ldr	r3, [pc, #20]	; (8006630 <std+0x40>)
 800661c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800661e:	4b05      	ldr	r3, [pc, #20]	; (8006634 <std+0x44>)
 8006620:	6224      	str	r4, [r4, #32]
 8006622:	6323      	str	r3, [r4, #48]	; 0x30
 8006624:	bd10      	pop	{r4, pc}
 8006626:	bf00      	nop
 8006628:	0800682d 	.word	0x0800682d
 800662c:	0800684f 	.word	0x0800684f
 8006630:	08006887 	.word	0x08006887
 8006634:	080068ab 	.word	0x080068ab

08006638 <stdio_exit_handler>:
 8006638:	4a02      	ldr	r2, [pc, #8]	; (8006644 <stdio_exit_handler+0xc>)
 800663a:	4903      	ldr	r1, [pc, #12]	; (8006648 <stdio_exit_handler+0x10>)
 800663c:	4803      	ldr	r0, [pc, #12]	; (800664c <stdio_exit_handler+0x14>)
 800663e:	f000 b869 	b.w	8006714 <_fwalk_sglue>
 8006642:	bf00      	nop
 8006644:	20000014 	.word	0x20000014
 8006648:	08007261 	.word	0x08007261
 800664c:	20000020 	.word	0x20000020

08006650 <cleanup_stdio>:
 8006650:	6841      	ldr	r1, [r0, #4]
 8006652:	4b0c      	ldr	r3, [pc, #48]	; (8006684 <cleanup_stdio+0x34>)
 8006654:	4299      	cmp	r1, r3
 8006656:	b510      	push	{r4, lr}
 8006658:	4604      	mov	r4, r0
 800665a:	d001      	beq.n	8006660 <cleanup_stdio+0x10>
 800665c:	f000 fe00 	bl	8007260 <_fflush_r>
 8006660:	68a1      	ldr	r1, [r4, #8]
 8006662:	4b09      	ldr	r3, [pc, #36]	; (8006688 <cleanup_stdio+0x38>)
 8006664:	4299      	cmp	r1, r3
 8006666:	d002      	beq.n	800666e <cleanup_stdio+0x1e>
 8006668:	4620      	mov	r0, r4
 800666a:	f000 fdf9 	bl	8007260 <_fflush_r>
 800666e:	68e1      	ldr	r1, [r4, #12]
 8006670:	4b06      	ldr	r3, [pc, #24]	; (800668c <cleanup_stdio+0x3c>)
 8006672:	4299      	cmp	r1, r3
 8006674:	d004      	beq.n	8006680 <cleanup_stdio+0x30>
 8006676:	4620      	mov	r0, r4
 8006678:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800667c:	f000 bdf0 	b.w	8007260 <_fflush_r>
 8006680:	bd10      	pop	{r4, pc}
 8006682:	bf00      	nop
 8006684:	2000031c 	.word	0x2000031c
 8006688:	20000384 	.word	0x20000384
 800668c:	200003ec 	.word	0x200003ec

08006690 <global_stdio_init.part.0>:
 8006690:	b510      	push	{r4, lr}
 8006692:	4b0b      	ldr	r3, [pc, #44]	; (80066c0 <global_stdio_init.part.0+0x30>)
 8006694:	4c0b      	ldr	r4, [pc, #44]	; (80066c4 <global_stdio_init.part.0+0x34>)
 8006696:	4a0c      	ldr	r2, [pc, #48]	; (80066c8 <global_stdio_init.part.0+0x38>)
 8006698:	601a      	str	r2, [r3, #0]
 800669a:	4620      	mov	r0, r4
 800669c:	2200      	movs	r2, #0
 800669e:	2104      	movs	r1, #4
 80066a0:	f7ff ffa6 	bl	80065f0 <std>
 80066a4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80066a8:	2201      	movs	r2, #1
 80066aa:	2109      	movs	r1, #9
 80066ac:	f7ff ffa0 	bl	80065f0 <std>
 80066b0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80066b4:	2202      	movs	r2, #2
 80066b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066ba:	2112      	movs	r1, #18
 80066bc:	f7ff bf98 	b.w	80065f0 <std>
 80066c0:	20000454 	.word	0x20000454
 80066c4:	2000031c 	.word	0x2000031c
 80066c8:	08006639 	.word	0x08006639

080066cc <__sfp_lock_acquire>:
 80066cc:	4801      	ldr	r0, [pc, #4]	; (80066d4 <__sfp_lock_acquire+0x8>)
 80066ce:	f000 ba1f 	b.w	8006b10 <__retarget_lock_acquire_recursive>
 80066d2:	bf00      	nop
 80066d4:	2000045d 	.word	0x2000045d

080066d8 <__sfp_lock_release>:
 80066d8:	4801      	ldr	r0, [pc, #4]	; (80066e0 <__sfp_lock_release+0x8>)
 80066da:	f000 ba1a 	b.w	8006b12 <__retarget_lock_release_recursive>
 80066de:	bf00      	nop
 80066e0:	2000045d 	.word	0x2000045d

080066e4 <__sinit>:
 80066e4:	b510      	push	{r4, lr}
 80066e6:	4604      	mov	r4, r0
 80066e8:	f7ff fff0 	bl	80066cc <__sfp_lock_acquire>
 80066ec:	6a23      	ldr	r3, [r4, #32]
 80066ee:	b11b      	cbz	r3, 80066f8 <__sinit+0x14>
 80066f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80066f4:	f7ff bff0 	b.w	80066d8 <__sfp_lock_release>
 80066f8:	4b04      	ldr	r3, [pc, #16]	; (800670c <__sinit+0x28>)
 80066fa:	6223      	str	r3, [r4, #32]
 80066fc:	4b04      	ldr	r3, [pc, #16]	; (8006710 <__sinit+0x2c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d1f5      	bne.n	80066f0 <__sinit+0xc>
 8006704:	f7ff ffc4 	bl	8006690 <global_stdio_init.part.0>
 8006708:	e7f2      	b.n	80066f0 <__sinit+0xc>
 800670a:	bf00      	nop
 800670c:	08006651 	.word	0x08006651
 8006710:	20000454 	.word	0x20000454

08006714 <_fwalk_sglue>:
 8006714:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006718:	4607      	mov	r7, r0
 800671a:	4688      	mov	r8, r1
 800671c:	4614      	mov	r4, r2
 800671e:	2600      	movs	r6, #0
 8006720:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006724:	f1b9 0901 	subs.w	r9, r9, #1
 8006728:	d505      	bpl.n	8006736 <_fwalk_sglue+0x22>
 800672a:	6824      	ldr	r4, [r4, #0]
 800672c:	2c00      	cmp	r4, #0
 800672e:	d1f7      	bne.n	8006720 <_fwalk_sglue+0xc>
 8006730:	4630      	mov	r0, r6
 8006732:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006736:	89ab      	ldrh	r3, [r5, #12]
 8006738:	2b01      	cmp	r3, #1
 800673a:	d907      	bls.n	800674c <_fwalk_sglue+0x38>
 800673c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006740:	3301      	adds	r3, #1
 8006742:	d003      	beq.n	800674c <_fwalk_sglue+0x38>
 8006744:	4629      	mov	r1, r5
 8006746:	4638      	mov	r0, r7
 8006748:	47c0      	blx	r8
 800674a:	4306      	orrs	r6, r0
 800674c:	3568      	adds	r5, #104	; 0x68
 800674e:	e7e9      	b.n	8006724 <_fwalk_sglue+0x10>

08006750 <iprintf>:
 8006750:	b40f      	push	{r0, r1, r2, r3}
 8006752:	b507      	push	{r0, r1, r2, lr}
 8006754:	4906      	ldr	r1, [pc, #24]	; (8006770 <iprintf+0x20>)
 8006756:	ab04      	add	r3, sp, #16
 8006758:	6808      	ldr	r0, [r1, #0]
 800675a:	f853 2b04 	ldr.w	r2, [r3], #4
 800675e:	6881      	ldr	r1, [r0, #8]
 8006760:	9301      	str	r3, [sp, #4]
 8006762:	f000 fa4d 	bl	8006c00 <_vfiprintf_r>
 8006766:	b003      	add	sp, #12
 8006768:	f85d eb04 	ldr.w	lr, [sp], #4
 800676c:	b004      	add	sp, #16
 800676e:	4770      	bx	lr
 8006770:	2000006c 	.word	0x2000006c

08006774 <_puts_r>:
 8006774:	6a03      	ldr	r3, [r0, #32]
 8006776:	b570      	push	{r4, r5, r6, lr}
 8006778:	6884      	ldr	r4, [r0, #8]
 800677a:	4605      	mov	r5, r0
 800677c:	460e      	mov	r6, r1
 800677e:	b90b      	cbnz	r3, 8006784 <_puts_r+0x10>
 8006780:	f7ff ffb0 	bl	80066e4 <__sinit>
 8006784:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006786:	07db      	lsls	r3, r3, #31
 8006788:	d405      	bmi.n	8006796 <_puts_r+0x22>
 800678a:	89a3      	ldrh	r3, [r4, #12]
 800678c:	0598      	lsls	r0, r3, #22
 800678e:	d402      	bmi.n	8006796 <_puts_r+0x22>
 8006790:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006792:	f000 f9bd 	bl	8006b10 <__retarget_lock_acquire_recursive>
 8006796:	89a3      	ldrh	r3, [r4, #12]
 8006798:	0719      	lsls	r1, r3, #28
 800679a:	d513      	bpl.n	80067c4 <_puts_r+0x50>
 800679c:	6923      	ldr	r3, [r4, #16]
 800679e:	b18b      	cbz	r3, 80067c4 <_puts_r+0x50>
 80067a0:	3e01      	subs	r6, #1
 80067a2:	68a3      	ldr	r3, [r4, #8]
 80067a4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80067a8:	3b01      	subs	r3, #1
 80067aa:	60a3      	str	r3, [r4, #8]
 80067ac:	b9e9      	cbnz	r1, 80067ea <_puts_r+0x76>
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	da2e      	bge.n	8006810 <_puts_r+0x9c>
 80067b2:	4622      	mov	r2, r4
 80067b4:	210a      	movs	r1, #10
 80067b6:	4628      	mov	r0, r5
 80067b8:	f000 f87b 	bl	80068b2 <__swbuf_r>
 80067bc:	3001      	adds	r0, #1
 80067be:	d007      	beq.n	80067d0 <_puts_r+0x5c>
 80067c0:	250a      	movs	r5, #10
 80067c2:	e007      	b.n	80067d4 <_puts_r+0x60>
 80067c4:	4621      	mov	r1, r4
 80067c6:	4628      	mov	r0, r5
 80067c8:	f000 f8b0 	bl	800692c <__swsetup_r>
 80067cc:	2800      	cmp	r0, #0
 80067ce:	d0e7      	beq.n	80067a0 <_puts_r+0x2c>
 80067d0:	f04f 35ff 	mov.w	r5, #4294967295
 80067d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80067d6:	07da      	lsls	r2, r3, #31
 80067d8:	d405      	bmi.n	80067e6 <_puts_r+0x72>
 80067da:	89a3      	ldrh	r3, [r4, #12]
 80067dc:	059b      	lsls	r3, r3, #22
 80067de:	d402      	bmi.n	80067e6 <_puts_r+0x72>
 80067e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067e2:	f000 f996 	bl	8006b12 <__retarget_lock_release_recursive>
 80067e6:	4628      	mov	r0, r5
 80067e8:	bd70      	pop	{r4, r5, r6, pc}
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	da04      	bge.n	80067f8 <_puts_r+0x84>
 80067ee:	69a2      	ldr	r2, [r4, #24]
 80067f0:	429a      	cmp	r2, r3
 80067f2:	dc06      	bgt.n	8006802 <_puts_r+0x8e>
 80067f4:	290a      	cmp	r1, #10
 80067f6:	d004      	beq.n	8006802 <_puts_r+0x8e>
 80067f8:	6823      	ldr	r3, [r4, #0]
 80067fa:	1c5a      	adds	r2, r3, #1
 80067fc:	6022      	str	r2, [r4, #0]
 80067fe:	7019      	strb	r1, [r3, #0]
 8006800:	e7cf      	b.n	80067a2 <_puts_r+0x2e>
 8006802:	4622      	mov	r2, r4
 8006804:	4628      	mov	r0, r5
 8006806:	f000 f854 	bl	80068b2 <__swbuf_r>
 800680a:	3001      	adds	r0, #1
 800680c:	d1c9      	bne.n	80067a2 <_puts_r+0x2e>
 800680e:	e7df      	b.n	80067d0 <_puts_r+0x5c>
 8006810:	6823      	ldr	r3, [r4, #0]
 8006812:	250a      	movs	r5, #10
 8006814:	1c5a      	adds	r2, r3, #1
 8006816:	6022      	str	r2, [r4, #0]
 8006818:	701d      	strb	r5, [r3, #0]
 800681a:	e7db      	b.n	80067d4 <_puts_r+0x60>

0800681c <puts>:
 800681c:	4b02      	ldr	r3, [pc, #8]	; (8006828 <puts+0xc>)
 800681e:	4601      	mov	r1, r0
 8006820:	6818      	ldr	r0, [r3, #0]
 8006822:	f7ff bfa7 	b.w	8006774 <_puts_r>
 8006826:	bf00      	nop
 8006828:	2000006c 	.word	0x2000006c

0800682c <__sread>:
 800682c:	b510      	push	{r4, lr}
 800682e:	460c      	mov	r4, r1
 8006830:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006834:	f000 f90e 	bl	8006a54 <_read_r>
 8006838:	2800      	cmp	r0, #0
 800683a:	bfab      	itete	ge
 800683c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800683e:	89a3      	ldrhlt	r3, [r4, #12]
 8006840:	181b      	addge	r3, r3, r0
 8006842:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006846:	bfac      	ite	ge
 8006848:	6563      	strge	r3, [r4, #84]	; 0x54
 800684a:	81a3      	strhlt	r3, [r4, #12]
 800684c:	bd10      	pop	{r4, pc}

0800684e <__swrite>:
 800684e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006852:	461f      	mov	r7, r3
 8006854:	898b      	ldrh	r3, [r1, #12]
 8006856:	05db      	lsls	r3, r3, #23
 8006858:	4605      	mov	r5, r0
 800685a:	460c      	mov	r4, r1
 800685c:	4616      	mov	r6, r2
 800685e:	d505      	bpl.n	800686c <__swrite+0x1e>
 8006860:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006864:	2302      	movs	r3, #2
 8006866:	2200      	movs	r2, #0
 8006868:	f000 f8e2 	bl	8006a30 <_lseek_r>
 800686c:	89a3      	ldrh	r3, [r4, #12]
 800686e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006872:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006876:	81a3      	strh	r3, [r4, #12]
 8006878:	4632      	mov	r2, r6
 800687a:	463b      	mov	r3, r7
 800687c:	4628      	mov	r0, r5
 800687e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006882:	f000 b909 	b.w	8006a98 <_write_r>

08006886 <__sseek>:
 8006886:	b510      	push	{r4, lr}
 8006888:	460c      	mov	r4, r1
 800688a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800688e:	f000 f8cf 	bl	8006a30 <_lseek_r>
 8006892:	1c43      	adds	r3, r0, #1
 8006894:	89a3      	ldrh	r3, [r4, #12]
 8006896:	bf15      	itete	ne
 8006898:	6560      	strne	r0, [r4, #84]	; 0x54
 800689a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800689e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80068a2:	81a3      	strheq	r3, [r4, #12]
 80068a4:	bf18      	it	ne
 80068a6:	81a3      	strhne	r3, [r4, #12]
 80068a8:	bd10      	pop	{r4, pc}

080068aa <__sclose>:
 80068aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80068ae:	f000 b8af 	b.w	8006a10 <_close_r>

080068b2 <__swbuf_r>:
 80068b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b4:	460e      	mov	r6, r1
 80068b6:	4614      	mov	r4, r2
 80068b8:	4605      	mov	r5, r0
 80068ba:	b118      	cbz	r0, 80068c4 <__swbuf_r+0x12>
 80068bc:	6a03      	ldr	r3, [r0, #32]
 80068be:	b90b      	cbnz	r3, 80068c4 <__swbuf_r+0x12>
 80068c0:	f7ff ff10 	bl	80066e4 <__sinit>
 80068c4:	69a3      	ldr	r3, [r4, #24]
 80068c6:	60a3      	str	r3, [r4, #8]
 80068c8:	89a3      	ldrh	r3, [r4, #12]
 80068ca:	071a      	lsls	r2, r3, #28
 80068cc:	d525      	bpl.n	800691a <__swbuf_r+0x68>
 80068ce:	6923      	ldr	r3, [r4, #16]
 80068d0:	b31b      	cbz	r3, 800691a <__swbuf_r+0x68>
 80068d2:	6823      	ldr	r3, [r4, #0]
 80068d4:	6922      	ldr	r2, [r4, #16]
 80068d6:	1a98      	subs	r0, r3, r2
 80068d8:	6963      	ldr	r3, [r4, #20]
 80068da:	b2f6      	uxtb	r6, r6
 80068dc:	4283      	cmp	r3, r0
 80068de:	4637      	mov	r7, r6
 80068e0:	dc04      	bgt.n	80068ec <__swbuf_r+0x3a>
 80068e2:	4621      	mov	r1, r4
 80068e4:	4628      	mov	r0, r5
 80068e6:	f000 fcbb 	bl	8007260 <_fflush_r>
 80068ea:	b9e0      	cbnz	r0, 8006926 <__swbuf_r+0x74>
 80068ec:	68a3      	ldr	r3, [r4, #8]
 80068ee:	3b01      	subs	r3, #1
 80068f0:	60a3      	str	r3, [r4, #8]
 80068f2:	6823      	ldr	r3, [r4, #0]
 80068f4:	1c5a      	adds	r2, r3, #1
 80068f6:	6022      	str	r2, [r4, #0]
 80068f8:	701e      	strb	r6, [r3, #0]
 80068fa:	6962      	ldr	r2, [r4, #20]
 80068fc:	1c43      	adds	r3, r0, #1
 80068fe:	429a      	cmp	r2, r3
 8006900:	d004      	beq.n	800690c <__swbuf_r+0x5a>
 8006902:	89a3      	ldrh	r3, [r4, #12]
 8006904:	07db      	lsls	r3, r3, #31
 8006906:	d506      	bpl.n	8006916 <__swbuf_r+0x64>
 8006908:	2e0a      	cmp	r6, #10
 800690a:	d104      	bne.n	8006916 <__swbuf_r+0x64>
 800690c:	4621      	mov	r1, r4
 800690e:	4628      	mov	r0, r5
 8006910:	f000 fca6 	bl	8007260 <_fflush_r>
 8006914:	b938      	cbnz	r0, 8006926 <__swbuf_r+0x74>
 8006916:	4638      	mov	r0, r7
 8006918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800691a:	4621      	mov	r1, r4
 800691c:	4628      	mov	r0, r5
 800691e:	f000 f805 	bl	800692c <__swsetup_r>
 8006922:	2800      	cmp	r0, #0
 8006924:	d0d5      	beq.n	80068d2 <__swbuf_r+0x20>
 8006926:	f04f 37ff 	mov.w	r7, #4294967295
 800692a:	e7f4      	b.n	8006916 <__swbuf_r+0x64>

0800692c <__swsetup_r>:
 800692c:	b538      	push	{r3, r4, r5, lr}
 800692e:	4b2a      	ldr	r3, [pc, #168]	; (80069d8 <__swsetup_r+0xac>)
 8006930:	4605      	mov	r5, r0
 8006932:	6818      	ldr	r0, [r3, #0]
 8006934:	460c      	mov	r4, r1
 8006936:	b118      	cbz	r0, 8006940 <__swsetup_r+0x14>
 8006938:	6a03      	ldr	r3, [r0, #32]
 800693a:	b90b      	cbnz	r3, 8006940 <__swsetup_r+0x14>
 800693c:	f7ff fed2 	bl	80066e4 <__sinit>
 8006940:	89a3      	ldrh	r3, [r4, #12]
 8006942:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006946:	0718      	lsls	r0, r3, #28
 8006948:	d422      	bmi.n	8006990 <__swsetup_r+0x64>
 800694a:	06d9      	lsls	r1, r3, #27
 800694c:	d407      	bmi.n	800695e <__swsetup_r+0x32>
 800694e:	2309      	movs	r3, #9
 8006950:	602b      	str	r3, [r5, #0]
 8006952:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006956:	81a3      	strh	r3, [r4, #12]
 8006958:	f04f 30ff 	mov.w	r0, #4294967295
 800695c:	e034      	b.n	80069c8 <__swsetup_r+0x9c>
 800695e:	0758      	lsls	r0, r3, #29
 8006960:	d512      	bpl.n	8006988 <__swsetup_r+0x5c>
 8006962:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006964:	b141      	cbz	r1, 8006978 <__swsetup_r+0x4c>
 8006966:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800696a:	4299      	cmp	r1, r3
 800696c:	d002      	beq.n	8006974 <__swsetup_r+0x48>
 800696e:	4628      	mov	r0, r5
 8006970:	f000 f8d0 	bl	8006b14 <_free_r>
 8006974:	2300      	movs	r3, #0
 8006976:	6363      	str	r3, [r4, #52]	; 0x34
 8006978:	89a3      	ldrh	r3, [r4, #12]
 800697a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800697e:	81a3      	strh	r3, [r4, #12]
 8006980:	2300      	movs	r3, #0
 8006982:	6063      	str	r3, [r4, #4]
 8006984:	6923      	ldr	r3, [r4, #16]
 8006986:	6023      	str	r3, [r4, #0]
 8006988:	89a3      	ldrh	r3, [r4, #12]
 800698a:	f043 0308 	orr.w	r3, r3, #8
 800698e:	81a3      	strh	r3, [r4, #12]
 8006990:	6923      	ldr	r3, [r4, #16]
 8006992:	b94b      	cbnz	r3, 80069a8 <__swsetup_r+0x7c>
 8006994:	89a3      	ldrh	r3, [r4, #12]
 8006996:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800699a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800699e:	d003      	beq.n	80069a8 <__swsetup_r+0x7c>
 80069a0:	4621      	mov	r1, r4
 80069a2:	4628      	mov	r0, r5
 80069a4:	f000 fcaa 	bl	80072fc <__smakebuf_r>
 80069a8:	89a0      	ldrh	r0, [r4, #12]
 80069aa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80069ae:	f010 0301 	ands.w	r3, r0, #1
 80069b2:	d00a      	beq.n	80069ca <__swsetup_r+0x9e>
 80069b4:	2300      	movs	r3, #0
 80069b6:	60a3      	str	r3, [r4, #8]
 80069b8:	6963      	ldr	r3, [r4, #20]
 80069ba:	425b      	negs	r3, r3
 80069bc:	61a3      	str	r3, [r4, #24]
 80069be:	6923      	ldr	r3, [r4, #16]
 80069c0:	b943      	cbnz	r3, 80069d4 <__swsetup_r+0xa8>
 80069c2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80069c6:	d1c4      	bne.n	8006952 <__swsetup_r+0x26>
 80069c8:	bd38      	pop	{r3, r4, r5, pc}
 80069ca:	0781      	lsls	r1, r0, #30
 80069cc:	bf58      	it	pl
 80069ce:	6963      	ldrpl	r3, [r4, #20]
 80069d0:	60a3      	str	r3, [r4, #8]
 80069d2:	e7f4      	b.n	80069be <__swsetup_r+0x92>
 80069d4:	2000      	movs	r0, #0
 80069d6:	e7f7      	b.n	80069c8 <__swsetup_r+0x9c>
 80069d8:	2000006c 	.word	0x2000006c

080069dc <memset>:
 80069dc:	4402      	add	r2, r0
 80069de:	4603      	mov	r3, r0
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d100      	bne.n	80069e6 <memset+0xa>
 80069e4:	4770      	bx	lr
 80069e6:	f803 1b01 	strb.w	r1, [r3], #1
 80069ea:	e7f9      	b.n	80069e0 <memset+0x4>

080069ec <strncmp>:
 80069ec:	b510      	push	{r4, lr}
 80069ee:	b16a      	cbz	r2, 8006a0c <strncmp+0x20>
 80069f0:	3901      	subs	r1, #1
 80069f2:	1884      	adds	r4, r0, r2
 80069f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80069f8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80069fc:	429a      	cmp	r2, r3
 80069fe:	d103      	bne.n	8006a08 <strncmp+0x1c>
 8006a00:	42a0      	cmp	r0, r4
 8006a02:	d001      	beq.n	8006a08 <strncmp+0x1c>
 8006a04:	2a00      	cmp	r2, #0
 8006a06:	d1f5      	bne.n	80069f4 <strncmp+0x8>
 8006a08:	1ad0      	subs	r0, r2, r3
 8006a0a:	bd10      	pop	{r4, pc}
 8006a0c:	4610      	mov	r0, r2
 8006a0e:	e7fc      	b.n	8006a0a <strncmp+0x1e>

08006a10 <_close_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	4d06      	ldr	r5, [pc, #24]	; (8006a2c <_close_r+0x1c>)
 8006a14:	2300      	movs	r3, #0
 8006a16:	4604      	mov	r4, r0
 8006a18:	4608      	mov	r0, r1
 8006a1a:	602b      	str	r3, [r5, #0]
 8006a1c:	f7fa fca9 	bl	8001372 <_close>
 8006a20:	1c43      	adds	r3, r0, #1
 8006a22:	d102      	bne.n	8006a2a <_close_r+0x1a>
 8006a24:	682b      	ldr	r3, [r5, #0]
 8006a26:	b103      	cbz	r3, 8006a2a <_close_r+0x1a>
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	bd38      	pop	{r3, r4, r5, pc}
 8006a2c:	20000458 	.word	0x20000458

08006a30 <_lseek_r>:
 8006a30:	b538      	push	{r3, r4, r5, lr}
 8006a32:	4d07      	ldr	r5, [pc, #28]	; (8006a50 <_lseek_r+0x20>)
 8006a34:	4604      	mov	r4, r0
 8006a36:	4608      	mov	r0, r1
 8006a38:	4611      	mov	r1, r2
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	602a      	str	r2, [r5, #0]
 8006a3e:	461a      	mov	r2, r3
 8006a40:	f7fa fcbe 	bl	80013c0 <_lseek>
 8006a44:	1c43      	adds	r3, r0, #1
 8006a46:	d102      	bne.n	8006a4e <_lseek_r+0x1e>
 8006a48:	682b      	ldr	r3, [r5, #0]
 8006a4a:	b103      	cbz	r3, 8006a4e <_lseek_r+0x1e>
 8006a4c:	6023      	str	r3, [r4, #0]
 8006a4e:	bd38      	pop	{r3, r4, r5, pc}
 8006a50:	20000458 	.word	0x20000458

08006a54 <_read_r>:
 8006a54:	b538      	push	{r3, r4, r5, lr}
 8006a56:	4d07      	ldr	r5, [pc, #28]	; (8006a74 <_read_r+0x20>)
 8006a58:	4604      	mov	r4, r0
 8006a5a:	4608      	mov	r0, r1
 8006a5c:	4611      	mov	r1, r2
 8006a5e:	2200      	movs	r2, #0
 8006a60:	602a      	str	r2, [r5, #0]
 8006a62:	461a      	mov	r2, r3
 8006a64:	f7fa fc4c 	bl	8001300 <_read>
 8006a68:	1c43      	adds	r3, r0, #1
 8006a6a:	d102      	bne.n	8006a72 <_read_r+0x1e>
 8006a6c:	682b      	ldr	r3, [r5, #0]
 8006a6e:	b103      	cbz	r3, 8006a72 <_read_r+0x1e>
 8006a70:	6023      	str	r3, [r4, #0]
 8006a72:	bd38      	pop	{r3, r4, r5, pc}
 8006a74:	20000458 	.word	0x20000458

08006a78 <_sbrk_r>:
 8006a78:	b538      	push	{r3, r4, r5, lr}
 8006a7a:	4d06      	ldr	r5, [pc, #24]	; (8006a94 <_sbrk_r+0x1c>)
 8006a7c:	2300      	movs	r3, #0
 8006a7e:	4604      	mov	r4, r0
 8006a80:	4608      	mov	r0, r1
 8006a82:	602b      	str	r3, [r5, #0]
 8006a84:	f7fa fcaa 	bl	80013dc <_sbrk>
 8006a88:	1c43      	adds	r3, r0, #1
 8006a8a:	d102      	bne.n	8006a92 <_sbrk_r+0x1a>
 8006a8c:	682b      	ldr	r3, [r5, #0]
 8006a8e:	b103      	cbz	r3, 8006a92 <_sbrk_r+0x1a>
 8006a90:	6023      	str	r3, [r4, #0]
 8006a92:	bd38      	pop	{r3, r4, r5, pc}
 8006a94:	20000458 	.word	0x20000458

08006a98 <_write_r>:
 8006a98:	b538      	push	{r3, r4, r5, lr}
 8006a9a:	4d07      	ldr	r5, [pc, #28]	; (8006ab8 <_write_r+0x20>)
 8006a9c:	4604      	mov	r4, r0
 8006a9e:	4608      	mov	r0, r1
 8006aa0:	4611      	mov	r1, r2
 8006aa2:	2200      	movs	r2, #0
 8006aa4:	602a      	str	r2, [r5, #0]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	f7fa fc47 	bl	800133a <_write>
 8006aac:	1c43      	adds	r3, r0, #1
 8006aae:	d102      	bne.n	8006ab6 <_write_r+0x1e>
 8006ab0:	682b      	ldr	r3, [r5, #0]
 8006ab2:	b103      	cbz	r3, 8006ab6 <_write_r+0x1e>
 8006ab4:	6023      	str	r3, [r4, #0]
 8006ab6:	bd38      	pop	{r3, r4, r5, pc}
 8006ab8:	20000458 	.word	0x20000458

08006abc <__errno>:
 8006abc:	4b01      	ldr	r3, [pc, #4]	; (8006ac4 <__errno+0x8>)
 8006abe:	6818      	ldr	r0, [r3, #0]
 8006ac0:	4770      	bx	lr
 8006ac2:	bf00      	nop
 8006ac4:	2000006c 	.word	0x2000006c

08006ac8 <__libc_init_array>:
 8006ac8:	b570      	push	{r4, r5, r6, lr}
 8006aca:	4d0d      	ldr	r5, [pc, #52]	; (8006b00 <__libc_init_array+0x38>)
 8006acc:	4c0d      	ldr	r4, [pc, #52]	; (8006b04 <__libc_init_array+0x3c>)
 8006ace:	1b64      	subs	r4, r4, r5
 8006ad0:	10a4      	asrs	r4, r4, #2
 8006ad2:	2600      	movs	r6, #0
 8006ad4:	42a6      	cmp	r6, r4
 8006ad6:	d109      	bne.n	8006aec <__libc_init_array+0x24>
 8006ad8:	4d0b      	ldr	r5, [pc, #44]	; (8006b08 <__libc_init_array+0x40>)
 8006ada:	4c0c      	ldr	r4, [pc, #48]	; (8006b0c <__libc_init_array+0x44>)
 8006adc:	f000 fc6c 	bl	80073b8 <_init>
 8006ae0:	1b64      	subs	r4, r4, r5
 8006ae2:	10a4      	asrs	r4, r4, #2
 8006ae4:	2600      	movs	r6, #0
 8006ae6:	42a6      	cmp	r6, r4
 8006ae8:	d105      	bne.n	8006af6 <__libc_init_array+0x2e>
 8006aea:	bd70      	pop	{r4, r5, r6, pc}
 8006aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8006af0:	4798      	blx	r3
 8006af2:	3601      	adds	r6, #1
 8006af4:	e7ee      	b.n	8006ad4 <__libc_init_array+0xc>
 8006af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006afa:	4798      	blx	r3
 8006afc:	3601      	adds	r6, #1
 8006afe:	e7f2      	b.n	8006ae6 <__libc_init_array+0x1e>
 8006b00:	080078d8 	.word	0x080078d8
 8006b04:	080078d8 	.word	0x080078d8
 8006b08:	080078d8 	.word	0x080078d8
 8006b0c:	080078dc 	.word	0x080078dc

08006b10 <__retarget_lock_acquire_recursive>:
 8006b10:	4770      	bx	lr

08006b12 <__retarget_lock_release_recursive>:
 8006b12:	4770      	bx	lr

08006b14 <_free_r>:
 8006b14:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006b16:	2900      	cmp	r1, #0
 8006b18:	d044      	beq.n	8006ba4 <_free_r+0x90>
 8006b1a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006b1e:	9001      	str	r0, [sp, #4]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	f1a1 0404 	sub.w	r4, r1, #4
 8006b26:	bfb8      	it	lt
 8006b28:	18e4      	addlt	r4, r4, r3
 8006b2a:	f7ff fcc9 	bl	80064c0 <__malloc_lock>
 8006b2e:	4a1e      	ldr	r2, [pc, #120]	; (8006ba8 <_free_r+0x94>)
 8006b30:	9801      	ldr	r0, [sp, #4]
 8006b32:	6813      	ldr	r3, [r2, #0]
 8006b34:	b933      	cbnz	r3, 8006b44 <_free_r+0x30>
 8006b36:	6063      	str	r3, [r4, #4]
 8006b38:	6014      	str	r4, [r2, #0]
 8006b3a:	b003      	add	sp, #12
 8006b3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006b40:	f7ff bcc4 	b.w	80064cc <__malloc_unlock>
 8006b44:	42a3      	cmp	r3, r4
 8006b46:	d908      	bls.n	8006b5a <_free_r+0x46>
 8006b48:	6825      	ldr	r5, [r4, #0]
 8006b4a:	1961      	adds	r1, r4, r5
 8006b4c:	428b      	cmp	r3, r1
 8006b4e:	bf01      	itttt	eq
 8006b50:	6819      	ldreq	r1, [r3, #0]
 8006b52:	685b      	ldreq	r3, [r3, #4]
 8006b54:	1949      	addeq	r1, r1, r5
 8006b56:	6021      	streq	r1, [r4, #0]
 8006b58:	e7ed      	b.n	8006b36 <_free_r+0x22>
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	685b      	ldr	r3, [r3, #4]
 8006b5e:	b10b      	cbz	r3, 8006b64 <_free_r+0x50>
 8006b60:	42a3      	cmp	r3, r4
 8006b62:	d9fa      	bls.n	8006b5a <_free_r+0x46>
 8006b64:	6811      	ldr	r1, [r2, #0]
 8006b66:	1855      	adds	r5, r2, r1
 8006b68:	42a5      	cmp	r5, r4
 8006b6a:	d10b      	bne.n	8006b84 <_free_r+0x70>
 8006b6c:	6824      	ldr	r4, [r4, #0]
 8006b6e:	4421      	add	r1, r4
 8006b70:	1854      	adds	r4, r2, r1
 8006b72:	42a3      	cmp	r3, r4
 8006b74:	6011      	str	r1, [r2, #0]
 8006b76:	d1e0      	bne.n	8006b3a <_free_r+0x26>
 8006b78:	681c      	ldr	r4, [r3, #0]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	6053      	str	r3, [r2, #4]
 8006b7e:	440c      	add	r4, r1
 8006b80:	6014      	str	r4, [r2, #0]
 8006b82:	e7da      	b.n	8006b3a <_free_r+0x26>
 8006b84:	d902      	bls.n	8006b8c <_free_r+0x78>
 8006b86:	230c      	movs	r3, #12
 8006b88:	6003      	str	r3, [r0, #0]
 8006b8a:	e7d6      	b.n	8006b3a <_free_r+0x26>
 8006b8c:	6825      	ldr	r5, [r4, #0]
 8006b8e:	1961      	adds	r1, r4, r5
 8006b90:	428b      	cmp	r3, r1
 8006b92:	bf04      	itt	eq
 8006b94:	6819      	ldreq	r1, [r3, #0]
 8006b96:	685b      	ldreq	r3, [r3, #4]
 8006b98:	6063      	str	r3, [r4, #4]
 8006b9a:	bf04      	itt	eq
 8006b9c:	1949      	addeq	r1, r1, r5
 8006b9e:	6021      	streq	r1, [r4, #0]
 8006ba0:	6054      	str	r4, [r2, #4]
 8006ba2:	e7ca      	b.n	8006b3a <_free_r+0x26>
 8006ba4:	b003      	add	sp, #12
 8006ba6:	bd30      	pop	{r4, r5, pc}
 8006ba8:	20000314 	.word	0x20000314

08006bac <__sfputc_r>:
 8006bac:	6893      	ldr	r3, [r2, #8]
 8006bae:	3b01      	subs	r3, #1
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	b410      	push	{r4}
 8006bb4:	6093      	str	r3, [r2, #8]
 8006bb6:	da08      	bge.n	8006bca <__sfputc_r+0x1e>
 8006bb8:	6994      	ldr	r4, [r2, #24]
 8006bba:	42a3      	cmp	r3, r4
 8006bbc:	db01      	blt.n	8006bc2 <__sfputc_r+0x16>
 8006bbe:	290a      	cmp	r1, #10
 8006bc0:	d103      	bne.n	8006bca <__sfputc_r+0x1e>
 8006bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bc6:	f7ff be74 	b.w	80068b2 <__swbuf_r>
 8006bca:	6813      	ldr	r3, [r2, #0]
 8006bcc:	1c58      	adds	r0, r3, #1
 8006bce:	6010      	str	r0, [r2, #0]
 8006bd0:	7019      	strb	r1, [r3, #0]
 8006bd2:	4608      	mov	r0, r1
 8006bd4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bd8:	4770      	bx	lr

08006bda <__sfputs_r>:
 8006bda:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bdc:	4606      	mov	r6, r0
 8006bde:	460f      	mov	r7, r1
 8006be0:	4614      	mov	r4, r2
 8006be2:	18d5      	adds	r5, r2, r3
 8006be4:	42ac      	cmp	r4, r5
 8006be6:	d101      	bne.n	8006bec <__sfputs_r+0x12>
 8006be8:	2000      	movs	r0, #0
 8006bea:	e007      	b.n	8006bfc <__sfputs_r+0x22>
 8006bec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bf0:	463a      	mov	r2, r7
 8006bf2:	4630      	mov	r0, r6
 8006bf4:	f7ff ffda 	bl	8006bac <__sfputc_r>
 8006bf8:	1c43      	adds	r3, r0, #1
 8006bfa:	d1f3      	bne.n	8006be4 <__sfputs_r+0xa>
 8006bfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c00 <_vfiprintf_r>:
 8006c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c04:	460d      	mov	r5, r1
 8006c06:	b09d      	sub	sp, #116	; 0x74
 8006c08:	4614      	mov	r4, r2
 8006c0a:	4698      	mov	r8, r3
 8006c0c:	4606      	mov	r6, r0
 8006c0e:	b118      	cbz	r0, 8006c18 <_vfiprintf_r+0x18>
 8006c10:	6a03      	ldr	r3, [r0, #32]
 8006c12:	b90b      	cbnz	r3, 8006c18 <_vfiprintf_r+0x18>
 8006c14:	f7ff fd66 	bl	80066e4 <__sinit>
 8006c18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c1a:	07d9      	lsls	r1, r3, #31
 8006c1c:	d405      	bmi.n	8006c2a <_vfiprintf_r+0x2a>
 8006c1e:	89ab      	ldrh	r3, [r5, #12]
 8006c20:	059a      	lsls	r2, r3, #22
 8006c22:	d402      	bmi.n	8006c2a <_vfiprintf_r+0x2a>
 8006c24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c26:	f7ff ff73 	bl	8006b10 <__retarget_lock_acquire_recursive>
 8006c2a:	89ab      	ldrh	r3, [r5, #12]
 8006c2c:	071b      	lsls	r3, r3, #28
 8006c2e:	d501      	bpl.n	8006c34 <_vfiprintf_r+0x34>
 8006c30:	692b      	ldr	r3, [r5, #16]
 8006c32:	b99b      	cbnz	r3, 8006c5c <_vfiprintf_r+0x5c>
 8006c34:	4629      	mov	r1, r5
 8006c36:	4630      	mov	r0, r6
 8006c38:	f7ff fe78 	bl	800692c <__swsetup_r>
 8006c3c:	b170      	cbz	r0, 8006c5c <_vfiprintf_r+0x5c>
 8006c3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006c40:	07dc      	lsls	r4, r3, #31
 8006c42:	d504      	bpl.n	8006c4e <_vfiprintf_r+0x4e>
 8006c44:	f04f 30ff 	mov.w	r0, #4294967295
 8006c48:	b01d      	add	sp, #116	; 0x74
 8006c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c4e:	89ab      	ldrh	r3, [r5, #12]
 8006c50:	0598      	lsls	r0, r3, #22
 8006c52:	d4f7      	bmi.n	8006c44 <_vfiprintf_r+0x44>
 8006c54:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006c56:	f7ff ff5c 	bl	8006b12 <__retarget_lock_release_recursive>
 8006c5a:	e7f3      	b.n	8006c44 <_vfiprintf_r+0x44>
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	9309      	str	r3, [sp, #36]	; 0x24
 8006c60:	2320      	movs	r3, #32
 8006c62:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c66:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c6a:	2330      	movs	r3, #48	; 0x30
 8006c6c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006e20 <_vfiprintf_r+0x220>
 8006c70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c74:	f04f 0901 	mov.w	r9, #1
 8006c78:	4623      	mov	r3, r4
 8006c7a:	469a      	mov	sl, r3
 8006c7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c80:	b10a      	cbz	r2, 8006c86 <_vfiprintf_r+0x86>
 8006c82:	2a25      	cmp	r2, #37	; 0x25
 8006c84:	d1f9      	bne.n	8006c7a <_vfiprintf_r+0x7a>
 8006c86:	ebba 0b04 	subs.w	fp, sl, r4
 8006c8a:	d00b      	beq.n	8006ca4 <_vfiprintf_r+0xa4>
 8006c8c:	465b      	mov	r3, fp
 8006c8e:	4622      	mov	r2, r4
 8006c90:	4629      	mov	r1, r5
 8006c92:	4630      	mov	r0, r6
 8006c94:	f7ff ffa1 	bl	8006bda <__sfputs_r>
 8006c98:	3001      	adds	r0, #1
 8006c9a:	f000 80a9 	beq.w	8006df0 <_vfiprintf_r+0x1f0>
 8006c9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ca0:	445a      	add	r2, fp
 8006ca2:	9209      	str	r2, [sp, #36]	; 0x24
 8006ca4:	f89a 3000 	ldrb.w	r3, [sl]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	f000 80a1 	beq.w	8006df0 <_vfiprintf_r+0x1f0>
 8006cae:	2300      	movs	r3, #0
 8006cb0:	f04f 32ff 	mov.w	r2, #4294967295
 8006cb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cb8:	f10a 0a01 	add.w	sl, sl, #1
 8006cbc:	9304      	str	r3, [sp, #16]
 8006cbe:	9307      	str	r3, [sp, #28]
 8006cc0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cc4:	931a      	str	r3, [sp, #104]	; 0x68
 8006cc6:	4654      	mov	r4, sl
 8006cc8:	2205      	movs	r2, #5
 8006cca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cce:	4854      	ldr	r0, [pc, #336]	; (8006e20 <_vfiprintf_r+0x220>)
 8006cd0:	f7f9 fa9e 	bl	8000210 <memchr>
 8006cd4:	9a04      	ldr	r2, [sp, #16]
 8006cd6:	b9d8      	cbnz	r0, 8006d10 <_vfiprintf_r+0x110>
 8006cd8:	06d1      	lsls	r1, r2, #27
 8006cda:	bf44      	itt	mi
 8006cdc:	2320      	movmi	r3, #32
 8006cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ce2:	0713      	lsls	r3, r2, #28
 8006ce4:	bf44      	itt	mi
 8006ce6:	232b      	movmi	r3, #43	; 0x2b
 8006ce8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cec:	f89a 3000 	ldrb.w	r3, [sl]
 8006cf0:	2b2a      	cmp	r3, #42	; 0x2a
 8006cf2:	d015      	beq.n	8006d20 <_vfiprintf_r+0x120>
 8006cf4:	9a07      	ldr	r2, [sp, #28]
 8006cf6:	4654      	mov	r4, sl
 8006cf8:	2000      	movs	r0, #0
 8006cfa:	f04f 0c0a 	mov.w	ip, #10
 8006cfe:	4621      	mov	r1, r4
 8006d00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d04:	3b30      	subs	r3, #48	; 0x30
 8006d06:	2b09      	cmp	r3, #9
 8006d08:	d94d      	bls.n	8006da6 <_vfiprintf_r+0x1a6>
 8006d0a:	b1b0      	cbz	r0, 8006d3a <_vfiprintf_r+0x13a>
 8006d0c:	9207      	str	r2, [sp, #28]
 8006d0e:	e014      	b.n	8006d3a <_vfiprintf_r+0x13a>
 8006d10:	eba0 0308 	sub.w	r3, r0, r8
 8006d14:	fa09 f303 	lsl.w	r3, r9, r3
 8006d18:	4313      	orrs	r3, r2
 8006d1a:	9304      	str	r3, [sp, #16]
 8006d1c:	46a2      	mov	sl, r4
 8006d1e:	e7d2      	b.n	8006cc6 <_vfiprintf_r+0xc6>
 8006d20:	9b03      	ldr	r3, [sp, #12]
 8006d22:	1d19      	adds	r1, r3, #4
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	9103      	str	r1, [sp, #12]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	bfbb      	ittet	lt
 8006d2c:	425b      	neglt	r3, r3
 8006d2e:	f042 0202 	orrlt.w	r2, r2, #2
 8006d32:	9307      	strge	r3, [sp, #28]
 8006d34:	9307      	strlt	r3, [sp, #28]
 8006d36:	bfb8      	it	lt
 8006d38:	9204      	strlt	r2, [sp, #16]
 8006d3a:	7823      	ldrb	r3, [r4, #0]
 8006d3c:	2b2e      	cmp	r3, #46	; 0x2e
 8006d3e:	d10c      	bne.n	8006d5a <_vfiprintf_r+0x15a>
 8006d40:	7863      	ldrb	r3, [r4, #1]
 8006d42:	2b2a      	cmp	r3, #42	; 0x2a
 8006d44:	d134      	bne.n	8006db0 <_vfiprintf_r+0x1b0>
 8006d46:	9b03      	ldr	r3, [sp, #12]
 8006d48:	1d1a      	adds	r2, r3, #4
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	9203      	str	r2, [sp, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	bfb8      	it	lt
 8006d52:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d56:	3402      	adds	r4, #2
 8006d58:	9305      	str	r3, [sp, #20]
 8006d5a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006e30 <_vfiprintf_r+0x230>
 8006d5e:	7821      	ldrb	r1, [r4, #0]
 8006d60:	2203      	movs	r2, #3
 8006d62:	4650      	mov	r0, sl
 8006d64:	f7f9 fa54 	bl	8000210 <memchr>
 8006d68:	b138      	cbz	r0, 8006d7a <_vfiprintf_r+0x17a>
 8006d6a:	9b04      	ldr	r3, [sp, #16]
 8006d6c:	eba0 000a 	sub.w	r0, r0, sl
 8006d70:	2240      	movs	r2, #64	; 0x40
 8006d72:	4082      	lsls	r2, r0
 8006d74:	4313      	orrs	r3, r2
 8006d76:	3401      	adds	r4, #1
 8006d78:	9304      	str	r3, [sp, #16]
 8006d7a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d7e:	4829      	ldr	r0, [pc, #164]	; (8006e24 <_vfiprintf_r+0x224>)
 8006d80:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d84:	2206      	movs	r2, #6
 8006d86:	f7f9 fa43 	bl	8000210 <memchr>
 8006d8a:	2800      	cmp	r0, #0
 8006d8c:	d03f      	beq.n	8006e0e <_vfiprintf_r+0x20e>
 8006d8e:	4b26      	ldr	r3, [pc, #152]	; (8006e28 <_vfiprintf_r+0x228>)
 8006d90:	bb1b      	cbnz	r3, 8006dda <_vfiprintf_r+0x1da>
 8006d92:	9b03      	ldr	r3, [sp, #12]
 8006d94:	3307      	adds	r3, #7
 8006d96:	f023 0307 	bic.w	r3, r3, #7
 8006d9a:	3308      	adds	r3, #8
 8006d9c:	9303      	str	r3, [sp, #12]
 8006d9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006da0:	443b      	add	r3, r7
 8006da2:	9309      	str	r3, [sp, #36]	; 0x24
 8006da4:	e768      	b.n	8006c78 <_vfiprintf_r+0x78>
 8006da6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006daa:	460c      	mov	r4, r1
 8006dac:	2001      	movs	r0, #1
 8006dae:	e7a6      	b.n	8006cfe <_vfiprintf_r+0xfe>
 8006db0:	2300      	movs	r3, #0
 8006db2:	3401      	adds	r4, #1
 8006db4:	9305      	str	r3, [sp, #20]
 8006db6:	4619      	mov	r1, r3
 8006db8:	f04f 0c0a 	mov.w	ip, #10
 8006dbc:	4620      	mov	r0, r4
 8006dbe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006dc2:	3a30      	subs	r2, #48	; 0x30
 8006dc4:	2a09      	cmp	r2, #9
 8006dc6:	d903      	bls.n	8006dd0 <_vfiprintf_r+0x1d0>
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d0c6      	beq.n	8006d5a <_vfiprintf_r+0x15a>
 8006dcc:	9105      	str	r1, [sp, #20]
 8006dce:	e7c4      	b.n	8006d5a <_vfiprintf_r+0x15a>
 8006dd0:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dd4:	4604      	mov	r4, r0
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e7f0      	b.n	8006dbc <_vfiprintf_r+0x1bc>
 8006dda:	ab03      	add	r3, sp, #12
 8006ddc:	9300      	str	r3, [sp, #0]
 8006dde:	462a      	mov	r2, r5
 8006de0:	4b12      	ldr	r3, [pc, #72]	; (8006e2c <_vfiprintf_r+0x22c>)
 8006de2:	a904      	add	r1, sp, #16
 8006de4:	4630      	mov	r0, r6
 8006de6:	f3af 8000 	nop.w
 8006dea:	4607      	mov	r7, r0
 8006dec:	1c78      	adds	r0, r7, #1
 8006dee:	d1d6      	bne.n	8006d9e <_vfiprintf_r+0x19e>
 8006df0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006df2:	07d9      	lsls	r1, r3, #31
 8006df4:	d405      	bmi.n	8006e02 <_vfiprintf_r+0x202>
 8006df6:	89ab      	ldrh	r3, [r5, #12]
 8006df8:	059a      	lsls	r2, r3, #22
 8006dfa:	d402      	bmi.n	8006e02 <_vfiprintf_r+0x202>
 8006dfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006dfe:	f7ff fe88 	bl	8006b12 <__retarget_lock_release_recursive>
 8006e02:	89ab      	ldrh	r3, [r5, #12]
 8006e04:	065b      	lsls	r3, r3, #25
 8006e06:	f53f af1d 	bmi.w	8006c44 <_vfiprintf_r+0x44>
 8006e0a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006e0c:	e71c      	b.n	8006c48 <_vfiprintf_r+0x48>
 8006e0e:	ab03      	add	r3, sp, #12
 8006e10:	9300      	str	r3, [sp, #0]
 8006e12:	462a      	mov	r2, r5
 8006e14:	4b05      	ldr	r3, [pc, #20]	; (8006e2c <_vfiprintf_r+0x22c>)
 8006e16:	a904      	add	r1, sp, #16
 8006e18:	4630      	mov	r0, r6
 8006e1a:	f000 f879 	bl	8006f10 <_printf_i>
 8006e1e:	e7e4      	b.n	8006dea <_vfiprintf_r+0x1ea>
 8006e20:	0800789d 	.word	0x0800789d
 8006e24:	080078a7 	.word	0x080078a7
 8006e28:	00000000 	.word	0x00000000
 8006e2c:	08006bdb 	.word	0x08006bdb
 8006e30:	080078a3 	.word	0x080078a3

08006e34 <_printf_common>:
 8006e34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e38:	4616      	mov	r6, r2
 8006e3a:	4699      	mov	r9, r3
 8006e3c:	688a      	ldr	r2, [r1, #8]
 8006e3e:	690b      	ldr	r3, [r1, #16]
 8006e40:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006e44:	4293      	cmp	r3, r2
 8006e46:	bfb8      	it	lt
 8006e48:	4613      	movlt	r3, r2
 8006e4a:	6033      	str	r3, [r6, #0]
 8006e4c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006e50:	4607      	mov	r7, r0
 8006e52:	460c      	mov	r4, r1
 8006e54:	b10a      	cbz	r2, 8006e5a <_printf_common+0x26>
 8006e56:	3301      	adds	r3, #1
 8006e58:	6033      	str	r3, [r6, #0]
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	0699      	lsls	r1, r3, #26
 8006e5e:	bf42      	ittt	mi
 8006e60:	6833      	ldrmi	r3, [r6, #0]
 8006e62:	3302      	addmi	r3, #2
 8006e64:	6033      	strmi	r3, [r6, #0]
 8006e66:	6825      	ldr	r5, [r4, #0]
 8006e68:	f015 0506 	ands.w	r5, r5, #6
 8006e6c:	d106      	bne.n	8006e7c <_printf_common+0x48>
 8006e6e:	f104 0a19 	add.w	sl, r4, #25
 8006e72:	68e3      	ldr	r3, [r4, #12]
 8006e74:	6832      	ldr	r2, [r6, #0]
 8006e76:	1a9b      	subs	r3, r3, r2
 8006e78:	42ab      	cmp	r3, r5
 8006e7a:	dc26      	bgt.n	8006eca <_printf_common+0x96>
 8006e7c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006e80:	1e13      	subs	r3, r2, #0
 8006e82:	6822      	ldr	r2, [r4, #0]
 8006e84:	bf18      	it	ne
 8006e86:	2301      	movne	r3, #1
 8006e88:	0692      	lsls	r2, r2, #26
 8006e8a:	d42b      	bmi.n	8006ee4 <_printf_common+0xb0>
 8006e8c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006e90:	4649      	mov	r1, r9
 8006e92:	4638      	mov	r0, r7
 8006e94:	47c0      	blx	r8
 8006e96:	3001      	adds	r0, #1
 8006e98:	d01e      	beq.n	8006ed8 <_printf_common+0xa4>
 8006e9a:	6823      	ldr	r3, [r4, #0]
 8006e9c:	6922      	ldr	r2, [r4, #16]
 8006e9e:	f003 0306 	and.w	r3, r3, #6
 8006ea2:	2b04      	cmp	r3, #4
 8006ea4:	bf02      	ittt	eq
 8006ea6:	68e5      	ldreq	r5, [r4, #12]
 8006ea8:	6833      	ldreq	r3, [r6, #0]
 8006eaa:	1aed      	subeq	r5, r5, r3
 8006eac:	68a3      	ldr	r3, [r4, #8]
 8006eae:	bf0c      	ite	eq
 8006eb0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006eb4:	2500      	movne	r5, #0
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	bfc4      	itt	gt
 8006eba:	1a9b      	subgt	r3, r3, r2
 8006ebc:	18ed      	addgt	r5, r5, r3
 8006ebe:	2600      	movs	r6, #0
 8006ec0:	341a      	adds	r4, #26
 8006ec2:	42b5      	cmp	r5, r6
 8006ec4:	d11a      	bne.n	8006efc <_printf_common+0xc8>
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	e008      	b.n	8006edc <_printf_common+0xa8>
 8006eca:	2301      	movs	r3, #1
 8006ecc:	4652      	mov	r2, sl
 8006ece:	4649      	mov	r1, r9
 8006ed0:	4638      	mov	r0, r7
 8006ed2:	47c0      	blx	r8
 8006ed4:	3001      	adds	r0, #1
 8006ed6:	d103      	bne.n	8006ee0 <_printf_common+0xac>
 8006ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8006edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ee0:	3501      	adds	r5, #1
 8006ee2:	e7c6      	b.n	8006e72 <_printf_common+0x3e>
 8006ee4:	18e1      	adds	r1, r4, r3
 8006ee6:	1c5a      	adds	r2, r3, #1
 8006ee8:	2030      	movs	r0, #48	; 0x30
 8006eea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006eee:	4422      	add	r2, r4
 8006ef0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006ef4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006ef8:	3302      	adds	r3, #2
 8006efa:	e7c7      	b.n	8006e8c <_printf_common+0x58>
 8006efc:	2301      	movs	r3, #1
 8006efe:	4622      	mov	r2, r4
 8006f00:	4649      	mov	r1, r9
 8006f02:	4638      	mov	r0, r7
 8006f04:	47c0      	blx	r8
 8006f06:	3001      	adds	r0, #1
 8006f08:	d0e6      	beq.n	8006ed8 <_printf_common+0xa4>
 8006f0a:	3601      	adds	r6, #1
 8006f0c:	e7d9      	b.n	8006ec2 <_printf_common+0x8e>
	...

08006f10 <_printf_i>:
 8006f10:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f14:	7e0f      	ldrb	r7, [r1, #24]
 8006f16:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006f18:	2f78      	cmp	r7, #120	; 0x78
 8006f1a:	4691      	mov	r9, r2
 8006f1c:	4680      	mov	r8, r0
 8006f1e:	460c      	mov	r4, r1
 8006f20:	469a      	mov	sl, r3
 8006f22:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006f26:	d807      	bhi.n	8006f38 <_printf_i+0x28>
 8006f28:	2f62      	cmp	r7, #98	; 0x62
 8006f2a:	d80a      	bhi.n	8006f42 <_printf_i+0x32>
 8006f2c:	2f00      	cmp	r7, #0
 8006f2e:	f000 80d4 	beq.w	80070da <_printf_i+0x1ca>
 8006f32:	2f58      	cmp	r7, #88	; 0x58
 8006f34:	f000 80c0 	beq.w	80070b8 <_printf_i+0x1a8>
 8006f38:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006f3c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006f40:	e03a      	b.n	8006fb8 <_printf_i+0xa8>
 8006f42:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006f46:	2b15      	cmp	r3, #21
 8006f48:	d8f6      	bhi.n	8006f38 <_printf_i+0x28>
 8006f4a:	a101      	add	r1, pc, #4	; (adr r1, 8006f50 <_printf_i+0x40>)
 8006f4c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f50:	08006fa9 	.word	0x08006fa9
 8006f54:	08006fbd 	.word	0x08006fbd
 8006f58:	08006f39 	.word	0x08006f39
 8006f5c:	08006f39 	.word	0x08006f39
 8006f60:	08006f39 	.word	0x08006f39
 8006f64:	08006f39 	.word	0x08006f39
 8006f68:	08006fbd 	.word	0x08006fbd
 8006f6c:	08006f39 	.word	0x08006f39
 8006f70:	08006f39 	.word	0x08006f39
 8006f74:	08006f39 	.word	0x08006f39
 8006f78:	08006f39 	.word	0x08006f39
 8006f7c:	080070c1 	.word	0x080070c1
 8006f80:	08006fe9 	.word	0x08006fe9
 8006f84:	0800707b 	.word	0x0800707b
 8006f88:	08006f39 	.word	0x08006f39
 8006f8c:	08006f39 	.word	0x08006f39
 8006f90:	080070e3 	.word	0x080070e3
 8006f94:	08006f39 	.word	0x08006f39
 8006f98:	08006fe9 	.word	0x08006fe9
 8006f9c:	08006f39 	.word	0x08006f39
 8006fa0:	08006f39 	.word	0x08006f39
 8006fa4:	08007083 	.word	0x08007083
 8006fa8:	682b      	ldr	r3, [r5, #0]
 8006faa:	1d1a      	adds	r2, r3, #4
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	602a      	str	r2, [r5, #0]
 8006fb0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006fb4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e09f      	b.n	80070fc <_printf_i+0x1ec>
 8006fbc:	6820      	ldr	r0, [r4, #0]
 8006fbe:	682b      	ldr	r3, [r5, #0]
 8006fc0:	0607      	lsls	r7, r0, #24
 8006fc2:	f103 0104 	add.w	r1, r3, #4
 8006fc6:	6029      	str	r1, [r5, #0]
 8006fc8:	d501      	bpl.n	8006fce <_printf_i+0xbe>
 8006fca:	681e      	ldr	r6, [r3, #0]
 8006fcc:	e003      	b.n	8006fd6 <_printf_i+0xc6>
 8006fce:	0646      	lsls	r6, r0, #25
 8006fd0:	d5fb      	bpl.n	8006fca <_printf_i+0xba>
 8006fd2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006fd6:	2e00      	cmp	r6, #0
 8006fd8:	da03      	bge.n	8006fe2 <_printf_i+0xd2>
 8006fda:	232d      	movs	r3, #45	; 0x2d
 8006fdc:	4276      	negs	r6, r6
 8006fde:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006fe2:	485a      	ldr	r0, [pc, #360]	; (800714c <_printf_i+0x23c>)
 8006fe4:	230a      	movs	r3, #10
 8006fe6:	e012      	b.n	800700e <_printf_i+0xfe>
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	6820      	ldr	r0, [r4, #0]
 8006fec:	1d19      	adds	r1, r3, #4
 8006fee:	6029      	str	r1, [r5, #0]
 8006ff0:	0605      	lsls	r5, r0, #24
 8006ff2:	d501      	bpl.n	8006ff8 <_printf_i+0xe8>
 8006ff4:	681e      	ldr	r6, [r3, #0]
 8006ff6:	e002      	b.n	8006ffe <_printf_i+0xee>
 8006ff8:	0641      	lsls	r1, r0, #25
 8006ffa:	d5fb      	bpl.n	8006ff4 <_printf_i+0xe4>
 8006ffc:	881e      	ldrh	r6, [r3, #0]
 8006ffe:	4853      	ldr	r0, [pc, #332]	; (800714c <_printf_i+0x23c>)
 8007000:	2f6f      	cmp	r7, #111	; 0x6f
 8007002:	bf0c      	ite	eq
 8007004:	2308      	moveq	r3, #8
 8007006:	230a      	movne	r3, #10
 8007008:	2100      	movs	r1, #0
 800700a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800700e:	6865      	ldr	r5, [r4, #4]
 8007010:	60a5      	str	r5, [r4, #8]
 8007012:	2d00      	cmp	r5, #0
 8007014:	bfa2      	ittt	ge
 8007016:	6821      	ldrge	r1, [r4, #0]
 8007018:	f021 0104 	bicge.w	r1, r1, #4
 800701c:	6021      	strge	r1, [r4, #0]
 800701e:	b90e      	cbnz	r6, 8007024 <_printf_i+0x114>
 8007020:	2d00      	cmp	r5, #0
 8007022:	d04b      	beq.n	80070bc <_printf_i+0x1ac>
 8007024:	4615      	mov	r5, r2
 8007026:	fbb6 f1f3 	udiv	r1, r6, r3
 800702a:	fb03 6711 	mls	r7, r3, r1, r6
 800702e:	5dc7      	ldrb	r7, [r0, r7]
 8007030:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007034:	4637      	mov	r7, r6
 8007036:	42bb      	cmp	r3, r7
 8007038:	460e      	mov	r6, r1
 800703a:	d9f4      	bls.n	8007026 <_printf_i+0x116>
 800703c:	2b08      	cmp	r3, #8
 800703e:	d10b      	bne.n	8007058 <_printf_i+0x148>
 8007040:	6823      	ldr	r3, [r4, #0]
 8007042:	07de      	lsls	r6, r3, #31
 8007044:	d508      	bpl.n	8007058 <_printf_i+0x148>
 8007046:	6923      	ldr	r3, [r4, #16]
 8007048:	6861      	ldr	r1, [r4, #4]
 800704a:	4299      	cmp	r1, r3
 800704c:	bfde      	ittt	le
 800704e:	2330      	movle	r3, #48	; 0x30
 8007050:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007054:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007058:	1b52      	subs	r2, r2, r5
 800705a:	6122      	str	r2, [r4, #16]
 800705c:	f8cd a000 	str.w	sl, [sp]
 8007060:	464b      	mov	r3, r9
 8007062:	aa03      	add	r2, sp, #12
 8007064:	4621      	mov	r1, r4
 8007066:	4640      	mov	r0, r8
 8007068:	f7ff fee4 	bl	8006e34 <_printf_common>
 800706c:	3001      	adds	r0, #1
 800706e:	d14a      	bne.n	8007106 <_printf_i+0x1f6>
 8007070:	f04f 30ff 	mov.w	r0, #4294967295
 8007074:	b004      	add	sp, #16
 8007076:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800707a:	6823      	ldr	r3, [r4, #0]
 800707c:	f043 0320 	orr.w	r3, r3, #32
 8007080:	6023      	str	r3, [r4, #0]
 8007082:	4833      	ldr	r0, [pc, #204]	; (8007150 <_printf_i+0x240>)
 8007084:	2778      	movs	r7, #120	; 0x78
 8007086:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	6829      	ldr	r1, [r5, #0]
 800708e:	061f      	lsls	r7, r3, #24
 8007090:	f851 6b04 	ldr.w	r6, [r1], #4
 8007094:	d402      	bmi.n	800709c <_printf_i+0x18c>
 8007096:	065f      	lsls	r7, r3, #25
 8007098:	bf48      	it	mi
 800709a:	b2b6      	uxthmi	r6, r6
 800709c:	07df      	lsls	r7, r3, #31
 800709e:	bf48      	it	mi
 80070a0:	f043 0320 	orrmi.w	r3, r3, #32
 80070a4:	6029      	str	r1, [r5, #0]
 80070a6:	bf48      	it	mi
 80070a8:	6023      	strmi	r3, [r4, #0]
 80070aa:	b91e      	cbnz	r6, 80070b4 <_printf_i+0x1a4>
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	f023 0320 	bic.w	r3, r3, #32
 80070b2:	6023      	str	r3, [r4, #0]
 80070b4:	2310      	movs	r3, #16
 80070b6:	e7a7      	b.n	8007008 <_printf_i+0xf8>
 80070b8:	4824      	ldr	r0, [pc, #144]	; (800714c <_printf_i+0x23c>)
 80070ba:	e7e4      	b.n	8007086 <_printf_i+0x176>
 80070bc:	4615      	mov	r5, r2
 80070be:	e7bd      	b.n	800703c <_printf_i+0x12c>
 80070c0:	682b      	ldr	r3, [r5, #0]
 80070c2:	6826      	ldr	r6, [r4, #0]
 80070c4:	6961      	ldr	r1, [r4, #20]
 80070c6:	1d18      	adds	r0, r3, #4
 80070c8:	6028      	str	r0, [r5, #0]
 80070ca:	0635      	lsls	r5, r6, #24
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	d501      	bpl.n	80070d4 <_printf_i+0x1c4>
 80070d0:	6019      	str	r1, [r3, #0]
 80070d2:	e002      	b.n	80070da <_printf_i+0x1ca>
 80070d4:	0670      	lsls	r0, r6, #25
 80070d6:	d5fb      	bpl.n	80070d0 <_printf_i+0x1c0>
 80070d8:	8019      	strh	r1, [r3, #0]
 80070da:	2300      	movs	r3, #0
 80070dc:	6123      	str	r3, [r4, #16]
 80070de:	4615      	mov	r5, r2
 80070e0:	e7bc      	b.n	800705c <_printf_i+0x14c>
 80070e2:	682b      	ldr	r3, [r5, #0]
 80070e4:	1d1a      	adds	r2, r3, #4
 80070e6:	602a      	str	r2, [r5, #0]
 80070e8:	681d      	ldr	r5, [r3, #0]
 80070ea:	6862      	ldr	r2, [r4, #4]
 80070ec:	2100      	movs	r1, #0
 80070ee:	4628      	mov	r0, r5
 80070f0:	f7f9 f88e 	bl	8000210 <memchr>
 80070f4:	b108      	cbz	r0, 80070fa <_printf_i+0x1ea>
 80070f6:	1b40      	subs	r0, r0, r5
 80070f8:	6060      	str	r0, [r4, #4]
 80070fa:	6863      	ldr	r3, [r4, #4]
 80070fc:	6123      	str	r3, [r4, #16]
 80070fe:	2300      	movs	r3, #0
 8007100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007104:	e7aa      	b.n	800705c <_printf_i+0x14c>
 8007106:	6923      	ldr	r3, [r4, #16]
 8007108:	462a      	mov	r2, r5
 800710a:	4649      	mov	r1, r9
 800710c:	4640      	mov	r0, r8
 800710e:	47d0      	blx	sl
 8007110:	3001      	adds	r0, #1
 8007112:	d0ad      	beq.n	8007070 <_printf_i+0x160>
 8007114:	6823      	ldr	r3, [r4, #0]
 8007116:	079b      	lsls	r3, r3, #30
 8007118:	d413      	bmi.n	8007142 <_printf_i+0x232>
 800711a:	68e0      	ldr	r0, [r4, #12]
 800711c:	9b03      	ldr	r3, [sp, #12]
 800711e:	4298      	cmp	r0, r3
 8007120:	bfb8      	it	lt
 8007122:	4618      	movlt	r0, r3
 8007124:	e7a6      	b.n	8007074 <_printf_i+0x164>
 8007126:	2301      	movs	r3, #1
 8007128:	4632      	mov	r2, r6
 800712a:	4649      	mov	r1, r9
 800712c:	4640      	mov	r0, r8
 800712e:	47d0      	blx	sl
 8007130:	3001      	adds	r0, #1
 8007132:	d09d      	beq.n	8007070 <_printf_i+0x160>
 8007134:	3501      	adds	r5, #1
 8007136:	68e3      	ldr	r3, [r4, #12]
 8007138:	9903      	ldr	r1, [sp, #12]
 800713a:	1a5b      	subs	r3, r3, r1
 800713c:	42ab      	cmp	r3, r5
 800713e:	dcf2      	bgt.n	8007126 <_printf_i+0x216>
 8007140:	e7eb      	b.n	800711a <_printf_i+0x20a>
 8007142:	2500      	movs	r5, #0
 8007144:	f104 0619 	add.w	r6, r4, #25
 8007148:	e7f5      	b.n	8007136 <_printf_i+0x226>
 800714a:	bf00      	nop
 800714c:	080078ae 	.word	0x080078ae
 8007150:	080078bf 	.word	0x080078bf

08007154 <__sflush_r>:
 8007154:	898a      	ldrh	r2, [r1, #12]
 8007156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800715a:	4605      	mov	r5, r0
 800715c:	0710      	lsls	r0, r2, #28
 800715e:	460c      	mov	r4, r1
 8007160:	d458      	bmi.n	8007214 <__sflush_r+0xc0>
 8007162:	684b      	ldr	r3, [r1, #4]
 8007164:	2b00      	cmp	r3, #0
 8007166:	dc05      	bgt.n	8007174 <__sflush_r+0x20>
 8007168:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800716a:	2b00      	cmp	r3, #0
 800716c:	dc02      	bgt.n	8007174 <__sflush_r+0x20>
 800716e:	2000      	movs	r0, #0
 8007170:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007174:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007176:	2e00      	cmp	r6, #0
 8007178:	d0f9      	beq.n	800716e <__sflush_r+0x1a>
 800717a:	2300      	movs	r3, #0
 800717c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007180:	682f      	ldr	r7, [r5, #0]
 8007182:	6a21      	ldr	r1, [r4, #32]
 8007184:	602b      	str	r3, [r5, #0]
 8007186:	d032      	beq.n	80071ee <__sflush_r+0x9a>
 8007188:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800718a:	89a3      	ldrh	r3, [r4, #12]
 800718c:	075a      	lsls	r2, r3, #29
 800718e:	d505      	bpl.n	800719c <__sflush_r+0x48>
 8007190:	6863      	ldr	r3, [r4, #4]
 8007192:	1ac0      	subs	r0, r0, r3
 8007194:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007196:	b10b      	cbz	r3, 800719c <__sflush_r+0x48>
 8007198:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800719a:	1ac0      	subs	r0, r0, r3
 800719c:	2300      	movs	r3, #0
 800719e:	4602      	mov	r2, r0
 80071a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80071a2:	6a21      	ldr	r1, [r4, #32]
 80071a4:	4628      	mov	r0, r5
 80071a6:	47b0      	blx	r6
 80071a8:	1c43      	adds	r3, r0, #1
 80071aa:	89a3      	ldrh	r3, [r4, #12]
 80071ac:	d106      	bne.n	80071bc <__sflush_r+0x68>
 80071ae:	6829      	ldr	r1, [r5, #0]
 80071b0:	291d      	cmp	r1, #29
 80071b2:	d82b      	bhi.n	800720c <__sflush_r+0xb8>
 80071b4:	4a29      	ldr	r2, [pc, #164]	; (800725c <__sflush_r+0x108>)
 80071b6:	410a      	asrs	r2, r1
 80071b8:	07d6      	lsls	r6, r2, #31
 80071ba:	d427      	bmi.n	800720c <__sflush_r+0xb8>
 80071bc:	2200      	movs	r2, #0
 80071be:	6062      	str	r2, [r4, #4]
 80071c0:	04d9      	lsls	r1, r3, #19
 80071c2:	6922      	ldr	r2, [r4, #16]
 80071c4:	6022      	str	r2, [r4, #0]
 80071c6:	d504      	bpl.n	80071d2 <__sflush_r+0x7e>
 80071c8:	1c42      	adds	r2, r0, #1
 80071ca:	d101      	bne.n	80071d0 <__sflush_r+0x7c>
 80071cc:	682b      	ldr	r3, [r5, #0]
 80071ce:	b903      	cbnz	r3, 80071d2 <__sflush_r+0x7e>
 80071d0:	6560      	str	r0, [r4, #84]	; 0x54
 80071d2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80071d4:	602f      	str	r7, [r5, #0]
 80071d6:	2900      	cmp	r1, #0
 80071d8:	d0c9      	beq.n	800716e <__sflush_r+0x1a>
 80071da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80071de:	4299      	cmp	r1, r3
 80071e0:	d002      	beq.n	80071e8 <__sflush_r+0x94>
 80071e2:	4628      	mov	r0, r5
 80071e4:	f7ff fc96 	bl	8006b14 <_free_r>
 80071e8:	2000      	movs	r0, #0
 80071ea:	6360      	str	r0, [r4, #52]	; 0x34
 80071ec:	e7c0      	b.n	8007170 <__sflush_r+0x1c>
 80071ee:	2301      	movs	r3, #1
 80071f0:	4628      	mov	r0, r5
 80071f2:	47b0      	blx	r6
 80071f4:	1c41      	adds	r1, r0, #1
 80071f6:	d1c8      	bne.n	800718a <__sflush_r+0x36>
 80071f8:	682b      	ldr	r3, [r5, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d0c5      	beq.n	800718a <__sflush_r+0x36>
 80071fe:	2b1d      	cmp	r3, #29
 8007200:	d001      	beq.n	8007206 <__sflush_r+0xb2>
 8007202:	2b16      	cmp	r3, #22
 8007204:	d101      	bne.n	800720a <__sflush_r+0xb6>
 8007206:	602f      	str	r7, [r5, #0]
 8007208:	e7b1      	b.n	800716e <__sflush_r+0x1a>
 800720a:	89a3      	ldrh	r3, [r4, #12]
 800720c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007210:	81a3      	strh	r3, [r4, #12]
 8007212:	e7ad      	b.n	8007170 <__sflush_r+0x1c>
 8007214:	690f      	ldr	r7, [r1, #16]
 8007216:	2f00      	cmp	r7, #0
 8007218:	d0a9      	beq.n	800716e <__sflush_r+0x1a>
 800721a:	0793      	lsls	r3, r2, #30
 800721c:	680e      	ldr	r6, [r1, #0]
 800721e:	bf08      	it	eq
 8007220:	694b      	ldreq	r3, [r1, #20]
 8007222:	600f      	str	r7, [r1, #0]
 8007224:	bf18      	it	ne
 8007226:	2300      	movne	r3, #0
 8007228:	eba6 0807 	sub.w	r8, r6, r7
 800722c:	608b      	str	r3, [r1, #8]
 800722e:	f1b8 0f00 	cmp.w	r8, #0
 8007232:	dd9c      	ble.n	800716e <__sflush_r+0x1a>
 8007234:	6a21      	ldr	r1, [r4, #32]
 8007236:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007238:	4643      	mov	r3, r8
 800723a:	463a      	mov	r2, r7
 800723c:	4628      	mov	r0, r5
 800723e:	47b0      	blx	r6
 8007240:	2800      	cmp	r0, #0
 8007242:	dc06      	bgt.n	8007252 <__sflush_r+0xfe>
 8007244:	89a3      	ldrh	r3, [r4, #12]
 8007246:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800724a:	81a3      	strh	r3, [r4, #12]
 800724c:	f04f 30ff 	mov.w	r0, #4294967295
 8007250:	e78e      	b.n	8007170 <__sflush_r+0x1c>
 8007252:	4407      	add	r7, r0
 8007254:	eba8 0800 	sub.w	r8, r8, r0
 8007258:	e7e9      	b.n	800722e <__sflush_r+0xda>
 800725a:	bf00      	nop
 800725c:	dfbffffe 	.word	0xdfbffffe

08007260 <_fflush_r>:
 8007260:	b538      	push	{r3, r4, r5, lr}
 8007262:	690b      	ldr	r3, [r1, #16]
 8007264:	4605      	mov	r5, r0
 8007266:	460c      	mov	r4, r1
 8007268:	b913      	cbnz	r3, 8007270 <_fflush_r+0x10>
 800726a:	2500      	movs	r5, #0
 800726c:	4628      	mov	r0, r5
 800726e:	bd38      	pop	{r3, r4, r5, pc}
 8007270:	b118      	cbz	r0, 800727a <_fflush_r+0x1a>
 8007272:	6a03      	ldr	r3, [r0, #32]
 8007274:	b90b      	cbnz	r3, 800727a <_fflush_r+0x1a>
 8007276:	f7ff fa35 	bl	80066e4 <__sinit>
 800727a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d0f3      	beq.n	800726a <_fflush_r+0xa>
 8007282:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007284:	07d0      	lsls	r0, r2, #31
 8007286:	d404      	bmi.n	8007292 <_fflush_r+0x32>
 8007288:	0599      	lsls	r1, r3, #22
 800728a:	d402      	bmi.n	8007292 <_fflush_r+0x32>
 800728c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800728e:	f7ff fc3f 	bl	8006b10 <__retarget_lock_acquire_recursive>
 8007292:	4628      	mov	r0, r5
 8007294:	4621      	mov	r1, r4
 8007296:	f7ff ff5d 	bl	8007154 <__sflush_r>
 800729a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800729c:	07da      	lsls	r2, r3, #31
 800729e:	4605      	mov	r5, r0
 80072a0:	d4e4      	bmi.n	800726c <_fflush_r+0xc>
 80072a2:	89a3      	ldrh	r3, [r4, #12]
 80072a4:	059b      	lsls	r3, r3, #22
 80072a6:	d4e1      	bmi.n	800726c <_fflush_r+0xc>
 80072a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80072aa:	f7ff fc32 	bl	8006b12 <__retarget_lock_release_recursive>
 80072ae:	e7dd      	b.n	800726c <_fflush_r+0xc>

080072b0 <__swhatbuf_r>:
 80072b0:	b570      	push	{r4, r5, r6, lr}
 80072b2:	460c      	mov	r4, r1
 80072b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072b8:	2900      	cmp	r1, #0
 80072ba:	b096      	sub	sp, #88	; 0x58
 80072bc:	4615      	mov	r5, r2
 80072be:	461e      	mov	r6, r3
 80072c0:	da0d      	bge.n	80072de <__swhatbuf_r+0x2e>
 80072c2:	89a3      	ldrh	r3, [r4, #12]
 80072c4:	f013 0f80 	tst.w	r3, #128	; 0x80
 80072c8:	f04f 0100 	mov.w	r1, #0
 80072cc:	bf0c      	ite	eq
 80072ce:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80072d2:	2340      	movne	r3, #64	; 0x40
 80072d4:	2000      	movs	r0, #0
 80072d6:	6031      	str	r1, [r6, #0]
 80072d8:	602b      	str	r3, [r5, #0]
 80072da:	b016      	add	sp, #88	; 0x58
 80072dc:	bd70      	pop	{r4, r5, r6, pc}
 80072de:	466a      	mov	r2, sp
 80072e0:	f000 f848 	bl	8007374 <_fstat_r>
 80072e4:	2800      	cmp	r0, #0
 80072e6:	dbec      	blt.n	80072c2 <__swhatbuf_r+0x12>
 80072e8:	9901      	ldr	r1, [sp, #4]
 80072ea:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80072ee:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80072f2:	4259      	negs	r1, r3
 80072f4:	4159      	adcs	r1, r3
 80072f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072fa:	e7eb      	b.n	80072d4 <__swhatbuf_r+0x24>

080072fc <__smakebuf_r>:
 80072fc:	898b      	ldrh	r3, [r1, #12]
 80072fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007300:	079d      	lsls	r5, r3, #30
 8007302:	4606      	mov	r6, r0
 8007304:	460c      	mov	r4, r1
 8007306:	d507      	bpl.n	8007318 <__smakebuf_r+0x1c>
 8007308:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800730c:	6023      	str	r3, [r4, #0]
 800730e:	6123      	str	r3, [r4, #16]
 8007310:	2301      	movs	r3, #1
 8007312:	6163      	str	r3, [r4, #20]
 8007314:	b002      	add	sp, #8
 8007316:	bd70      	pop	{r4, r5, r6, pc}
 8007318:	ab01      	add	r3, sp, #4
 800731a:	466a      	mov	r2, sp
 800731c:	f7ff ffc8 	bl	80072b0 <__swhatbuf_r>
 8007320:	9900      	ldr	r1, [sp, #0]
 8007322:	4605      	mov	r5, r0
 8007324:	4630      	mov	r0, r6
 8007326:	f7ff f84b 	bl	80063c0 <_malloc_r>
 800732a:	b948      	cbnz	r0, 8007340 <__smakebuf_r+0x44>
 800732c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007330:	059a      	lsls	r2, r3, #22
 8007332:	d4ef      	bmi.n	8007314 <__smakebuf_r+0x18>
 8007334:	f023 0303 	bic.w	r3, r3, #3
 8007338:	f043 0302 	orr.w	r3, r3, #2
 800733c:	81a3      	strh	r3, [r4, #12]
 800733e:	e7e3      	b.n	8007308 <__smakebuf_r+0xc>
 8007340:	89a3      	ldrh	r3, [r4, #12]
 8007342:	6020      	str	r0, [r4, #0]
 8007344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007348:	81a3      	strh	r3, [r4, #12]
 800734a:	9b00      	ldr	r3, [sp, #0]
 800734c:	6163      	str	r3, [r4, #20]
 800734e:	9b01      	ldr	r3, [sp, #4]
 8007350:	6120      	str	r0, [r4, #16]
 8007352:	b15b      	cbz	r3, 800736c <__smakebuf_r+0x70>
 8007354:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007358:	4630      	mov	r0, r6
 800735a:	f000 f81d 	bl	8007398 <_isatty_r>
 800735e:	b128      	cbz	r0, 800736c <__smakebuf_r+0x70>
 8007360:	89a3      	ldrh	r3, [r4, #12]
 8007362:	f023 0303 	bic.w	r3, r3, #3
 8007366:	f043 0301 	orr.w	r3, r3, #1
 800736a:	81a3      	strh	r3, [r4, #12]
 800736c:	89a3      	ldrh	r3, [r4, #12]
 800736e:	431d      	orrs	r5, r3
 8007370:	81a5      	strh	r5, [r4, #12]
 8007372:	e7cf      	b.n	8007314 <__smakebuf_r+0x18>

08007374 <_fstat_r>:
 8007374:	b538      	push	{r3, r4, r5, lr}
 8007376:	4d07      	ldr	r5, [pc, #28]	; (8007394 <_fstat_r+0x20>)
 8007378:	2300      	movs	r3, #0
 800737a:	4604      	mov	r4, r0
 800737c:	4608      	mov	r0, r1
 800737e:	4611      	mov	r1, r2
 8007380:	602b      	str	r3, [r5, #0]
 8007382:	f7fa f802 	bl	800138a <_fstat>
 8007386:	1c43      	adds	r3, r0, #1
 8007388:	d102      	bne.n	8007390 <_fstat_r+0x1c>
 800738a:	682b      	ldr	r3, [r5, #0]
 800738c:	b103      	cbz	r3, 8007390 <_fstat_r+0x1c>
 800738e:	6023      	str	r3, [r4, #0]
 8007390:	bd38      	pop	{r3, r4, r5, pc}
 8007392:	bf00      	nop
 8007394:	20000458 	.word	0x20000458

08007398 <_isatty_r>:
 8007398:	b538      	push	{r3, r4, r5, lr}
 800739a:	4d06      	ldr	r5, [pc, #24]	; (80073b4 <_isatty_r+0x1c>)
 800739c:	2300      	movs	r3, #0
 800739e:	4604      	mov	r4, r0
 80073a0:	4608      	mov	r0, r1
 80073a2:	602b      	str	r3, [r5, #0]
 80073a4:	f7fa f801 	bl	80013aa <_isatty>
 80073a8:	1c43      	adds	r3, r0, #1
 80073aa:	d102      	bne.n	80073b2 <_isatty_r+0x1a>
 80073ac:	682b      	ldr	r3, [r5, #0]
 80073ae:	b103      	cbz	r3, 80073b2 <_isatty_r+0x1a>
 80073b0:	6023      	str	r3, [r4, #0]
 80073b2:	bd38      	pop	{r3, r4, r5, pc}
 80073b4:	20000458 	.word	0x20000458

080073b8 <_init>:
 80073b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073ba:	bf00      	nop
 80073bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073be:	bc08      	pop	{r3}
 80073c0:	469e      	mov	lr, r3
 80073c2:	4770      	bx	lr

080073c4 <_fini>:
 80073c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073c6:	bf00      	nop
 80073c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80073ca:	bc08      	pop	{r3}
 80073cc:	469e      	mov	lr, r3
 80073ce:	4770      	bx	lr
